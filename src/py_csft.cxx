/* Generated by Cython 0.20.2 on Thu Aug 13 19:47:56 2015 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#define CYTHON_ABI "0_20_2"
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600
#define Py_OptimizeFlag 0
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_As_int(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX < 0x02060000 && !defined(Py_TPFLAGS_IS_ABSTRACT)
  #define Py_TPFLAGS_IS_ABSTRACT 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#define __Pyx_PyString_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__py_csft
#define __PYX_HAVE_API__py_csft
#include "stdint.h"
#include "string.h"
#include "stdio.h"
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "sphinxstd.h"
#include "py_iface.h"
#include "sphinxutils.h"
#include "sphinx.h"
#include "py_source2.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "py_csft.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_7py_csft_PySchemaWrap;
struct __pyx_obj_7py_csft_PyDocInfo;
struct __pyx_obj_7py_csft_PyHitCollector;
struct __pyx_obj_7py_csft_PySourceWrap;
struct __pyx_opt_args_7py_csft_12PySchemaWrap_addAttribute;
struct __pyx_opt_args_7py_csft_12PySchemaWrap_addField;
struct __pyx_opt_args_7py_csft_9PyDocInfo_setAttrMulti;

/* "py_csft.pyx":279
 *         self._join_fields = []
 * 
 *     cpdef int addAttribute(self, const char* sName, const char* sType, int iBitSize=0, bool bJoin=False, bool bIsSet=False):             # <<<<<<<<<<<<<<
 *         """
 *              Schema
 */
struct __pyx_opt_args_7py_csft_12PySchemaWrap_addAttribute {
  int __pyx_n;
  int iBitSize;
  bool bJoin;
  bool bIsSet;
};

/* "py_csft.pyx":305
 *         return tCol.m_iIndex
 * 
 *     cpdef addField(self, const char* sName, bool bJoin=False):             # <<<<<<<<<<<<<<
 *         """
 *              Schema
 */
struct __pyx_opt_args_7py_csft_12PySchemaWrap_addField {
  int __pyx_n;
  bool bJoin;
};

/* "py_csft.pyx":404
 *         return 0
 * 
 *     cpdef int setAttrMulti(self, int iIndex, list values, bool bValue64 = False):             # <<<<<<<<<<<<<<
 *         cdef vector[int64_t] vect
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 */
struct __pyx_opt_args_7py_csft_9PyDocInfo_setAttrMulti {
  int __pyx_n;
  bool bValue64;
};

/* "py_csft.pyx":227
 *     pass
 * 
 * cdef class PySchemaWrap(object):             # <<<<<<<<<<<<<<
 *     """
 *          Python   Schema
 */
struct __pyx_obj_7py_csft_PySchemaWrap {
  PyObject_HEAD
  struct __pyx_vtabstruct_7py_csft_PySchemaWrap *__pyx_vtab;
  CSphSchema *_schema;
  PyObject *_valid_attribute_type;
  int iIndex;
  PyObject *_join_fields;
  int _i_plain_fields_length;
};


/* "py_csft.pyx":362
 *         return self._schema.GetAttrIndex(sKey)
 * 
 * cdef class PyDocInfo(object):             # <<<<<<<<<<<<<<
 *     """
 *          Python
 */
struct __pyx_obj_7py_csft_PyDocInfo {
  PyObject_HEAD
  struct __pyx_vtabstruct_7py_csft_PyDocInfo *__pyx_vtab;
  PySphMatch _docInfo;
  int _iAttrCount;
  int _iFieldCount;
};


/* "py_csft.pyx":428
 *         return 0
 * 
 * cdef class PyHitCollector(object):             # <<<<<<<<<<<<<<
 *     """
 *          Python   Hit ,  FieldIndex
 */
struct __pyx_obj_7py_csft_PyHitCollector {
  PyObject_HEAD
  struct __pyx_vtabstruct_7py_csft_PyHitCollector *__pyx_vtab;
  ISphHits *_hits;
};


/* "py_csft.pyx":444
 * 
 * 
 * cdef class PySourceWrap(object):             # <<<<<<<<<<<<<<
 *     """
 *         C++ -> Python ;
 */
struct __pyx_obj_7py_csft_PySourceWrap {
  PyObject_HEAD
  struct __pyx_vtabstruct_7py_csft_PySourceWrap *__pyx_vtab;
  PyObject *_pysource;
  struct __pyx_obj_7py_csft_PyDocInfo *_docInfo;
  struct __pyx_obj_7py_csft_PyHitCollector *_hitCollecotr;
  CSphSource_Python2 *_csrc;
  PyObject *_killList;
  int _killListPos;
};



/* "py_csft.pyx":227
 *     pass
 * 
 * cdef class PySchemaWrap(object):             # <<<<<<<<<<<<<<
 *     """
 *          Python   Schema
 */

struct __pyx_vtabstruct_7py_csft_PySchemaWrap {
  PyObject *(*sphColumnInfoTypeToString)(struct __pyx_obj_7py_csft_PySchemaWrap *, CSphColumnInfo &);
  PyObject *(*bind)(struct __pyx_obj_7py_csft_PySchemaWrap *, CSphSchema *);
  PyObject *(*done)(struct __pyx_obj_7py_csft_PySchemaWrap *, int __pyx_skip_dispatch);
  int (*addAttribute)(struct __pyx_obj_7py_csft_PySchemaWrap *, char const *, char const *, int __pyx_skip_dispatch, struct __pyx_opt_args_7py_csft_12PySchemaWrap_addAttribute *__pyx_optional_args);
  PyObject *(*addField)(struct __pyx_obj_7py_csft_PySchemaWrap *, char const *, int __pyx_skip_dispatch, struct __pyx_opt_args_7py_csft_12PySchemaWrap_addField *__pyx_optional_args);
  int (*fieldsBaseCount)(struct __pyx_obj_7py_csft_PySchemaWrap *, int __pyx_skip_dispatch);
  int (*fieldsCount)(struct __pyx_obj_7py_csft_PySchemaWrap *, int __pyx_skip_dispatch);
  int (*attributeCount)(struct __pyx_obj_7py_csft_PySchemaWrap *, int __pyx_skip_dispatch);
  PyObject *(*fieldsInfo)(struct __pyx_obj_7py_csft_PySchemaWrap *, int, int __pyx_skip_dispatch);
  PyObject *(*attributeInfo)(struct __pyx_obj_7py_csft_PySchemaWrap *, int, int __pyx_skip_dispatch);
  int (*getFieldIndex)(struct __pyx_obj_7py_csft_PySchemaWrap *, char const *, int __pyx_skip_dispatch);
  int (*getAttributeIndex)(struct __pyx_obj_7py_csft_PySchemaWrap *, char const *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7py_csft_PySchemaWrap *__pyx_vtabptr_7py_csft_PySchemaWrap;


/* "py_csft.pyx":362
 *         return self._schema.GetAttrIndex(sKey)
 * 
 * cdef class PyDocInfo(object):             # <<<<<<<<<<<<<<
 *     """
 *          Python
 */

struct __pyx_vtabstruct_7py_csft_PyDocInfo {
  void (*bind)(struct __pyx_obj_7py_csft_PyDocInfo *, CSphSource_Python2 *, CSphMatch *);
  PyObject *(*setDocID)(struct __pyx_obj_7py_csft_PyDocInfo *, uint64_t, int __pyx_skip_dispatch);
  uint64_t (*getDocID)(struct __pyx_obj_7py_csft_PyDocInfo *, int __pyx_skip_dispatch);
  int (*setAttr)(struct __pyx_obj_7py_csft_PyDocInfo *, int, SphAttr_t, int __pyx_skip_dispatch);
  int (*setAttrFloat)(struct __pyx_obj_7py_csft_PyDocInfo *, int, float, int __pyx_skip_dispatch);
  int (*setAttrInt64)(struct __pyx_obj_7py_csft_PyDocInfo *, int, int64_t, int __pyx_skip_dispatch);
  int (*setAttrTimestamp)(struct __pyx_obj_7py_csft_PyDocInfo *, int, int64_t, int __pyx_skip_dispatch);
  int (*setAttrMulti)(struct __pyx_obj_7py_csft_PyDocInfo *, int, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7py_csft_9PyDocInfo_setAttrMulti *__pyx_optional_args);
  int (*setAttrString)(struct __pyx_obj_7py_csft_PyDocInfo *, int, char const *, int __pyx_skip_dispatch);
  int (*setField)(struct __pyx_obj_7py_csft_PyDocInfo *, int, char const *, int __pyx_skip_dispatch);
  uint64_t (*getLastDocID)(struct __pyx_obj_7py_csft_PyDocInfo *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7py_csft_PyDocInfo *__pyx_vtabptr_7py_csft_PyDocInfo;


/* "py_csft.pyx":428
 *         return 0
 * 
 * cdef class PyHitCollector(object):             # <<<<<<<<<<<<<<
 *     """
 *          Python   Hit ,  FieldIndex
 */

struct __pyx_vtabstruct_7py_csft_PyHitCollector {
  void (*bind)(struct __pyx_obj_7py_csft_PyHitCollector *, ISphHits *);
  uint64_t (*getPrevDocID)(struct __pyx_obj_7py_csft_PyHitCollector *, int __pyx_skip_dispatch);
  uint64_t (*getDocID)(struct __pyx_obj_7py_csft_PyHitCollector *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7py_csft_PyHitCollector *__pyx_vtabptr_7py_csft_PyHitCollector;


/* "py_csft.pyx":444
 * 
 * 
 * cdef class PySourceWrap(object):             # <<<<<<<<<<<<<<
 *     """
 *         C++ -> Python ;
 */

struct __pyx_vtabstruct_7py_csft_PySourceWrap {
  PyObject *(*bindSource)(struct __pyx_obj_7py_csft_PySourceWrap *, CSphSource_Python2 *);
  int (*setup)(struct __pyx_obj_7py_csft_PySourceWrap *, PyObject *, int __pyx_skip_dispatch);
  int (*connect)(struct __pyx_obj_7py_csft_PySourceWrap *, PyObject *, int __pyx_skip_dispatch);
  int (*indexFinished)(struct __pyx_obj_7py_csft_PySourceWrap *, int __pyx_skip_dispatch);
  int (*beforeIndex)(struct __pyx_obj_7py_csft_PySourceWrap *, int __pyx_skip_dispatch);
  int (*afterIndex)(struct __pyx_obj_7py_csft_PySourceWrap *, bool, int __pyx_skip_dispatch);
  int (*index_finished)(struct __pyx_obj_7py_csft_PySourceWrap *, int __pyx_skip_dispatch);
  int (*getJoinField)(struct __pyx_obj_7py_csft_PySourceWrap *, char const *, int __pyx_skip_dispatch);
  PyObject *(*getJoinMva)(struct __pyx_obj_7py_csft_PySourceWrap *, char const *, int __pyx_skip_dispatch);
  int (*next)(struct __pyx_obj_7py_csft_PySourceWrap *, int __pyx_skip_dispatch);
  int (*getKillList)(struct __pyx_obj_7py_csft_PySourceWrap *, int __pyx_skip_dispatch);
  int (*getKillListItem)(struct __pyx_obj_7py_csft_PySourceWrap *, uint64_t *);
};
static struct __pyx_vtabstruct_7py_csft_PySourceWrap *__pyx_vtabptr_7py_csft_PySourceWrap;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw); /*proto*/
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *); /*proto*/

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name); /*proto*/

static CYTHON_INLINE int __Pyx_PySequence_Contains(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static PyObject* __Pyx_PyObject_CallMethodTuple(PyObject* obj, PyObject* method_name, PyObject* args) {
    PyObject *method, *result = NULL;
    if (unlikely(!args)) return NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_Call(method, args, NULL);
    Py_DECREF(method);
bad:
    Py_DECREF(args);
    return result;
}
#define __Pyx_PyObject_CallMethod3(obj, name, arg1, arg2, arg3) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(3, arg1, arg2, arg3))
#define __Pyx_PyObject_CallMethod2(obj, name, arg1, arg2) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(2, arg1, arg2))
#define __Pyx_PyObject_CallMethod1(obj, name, arg1) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(1, arg1))
#define __Pyx_PyObject_CallMethod0(obj, name) \
    __Pyx_PyObject_CallMethodTuple(obj, name, (Py_INCREF(__pyx_empty_tuple), __pyx_empty_tuple))

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#define __Pyx_PyCallable_Check(obj)   ((obj)->ob_type->tp_call != NULL)
#else
#define __Pyx_PyCallable_Check(obj)   PyCallable_Check(obj)
#endif

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static CYTHON_INLINE int __Pyx_PyDict_Contains(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void); /*proto*/

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc); /*proto*/
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass); /*proto*/

#include <new>

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

static int __Pyx_Print(PyObject*, PyObject *, int); /*proto*/
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o); /*proto*/

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static int __Pyx_check_binary_version(void);

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig); /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'py_csft' */
static PyTypeObject *__pyx_ptype_7py_csft_PySchemaWrap = 0;
static PyTypeObject *__pyx_ptype_7py_csft_PyDocInfo = 0;
static PyTypeObject *__pyx_ptype_7py_csft_PyHitCollector = 0;
static PyTypeObject *__pyx_ptype_7py_csft_PySourceWrap = 0;
__PYX_EXTERN_C DL_EXPORT(void) __setPythonPath(char const *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(PyObject) *__getPythonClassByName(char const *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) py_source_setup(void *, CSphConfigSection const &); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) py_source_connected(void *, CSphSchema &); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) py_source_index_finished(void *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) py_source_before_index(void *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) py_source_get_join_field(void *, char const *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) py_source_get_join_mva(void *, char const *, uint64_t *, int64_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) py_source_next(void *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) py_source_after_index(void *, bool); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) py_source_get_kill_list(void *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) py_source_get_kill_list_item(void *, uint64_t *); /*proto*/
static PyObject *__pyx_f_7py_csft_wrap_sphinx_config(CSphConfigSection const &); /*proto*/
__PYX_EXTERN_C DL_EXPORT(CSphSource) *createPythonDataSourceObject(char const *, char const *); /*proto*/
#define __Pyx_MODULE_NAME "py_csft"
int __pyx_module_is_main_py_csft = 0;

/* Implementation of 'py_csft' */
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_AttributeError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_pf_7py_csft___findPythonClass(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sName); /* proto */
static PyObject *__pyx_pf_7py_csft_2attr_callable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_attr_name); /* proto */
static int __pyx_pf_7py_csft_12PySchemaWrap___cinit__(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_2done(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_4addAttribute(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, char const *__pyx_v_sName, char const *__pyx_v_sType, int __pyx_v_iBitSize, bool __pyx_v_bJoin, bool __pyx_v_bIsSet); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_6addField(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, char const *__pyx_v_sName, bool __pyx_v_bJoin); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_8fieldsBaseCount(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_10fieldsCount(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_12attributeCount(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_14fieldsInfo(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, int __pyx_v_iIndex); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_16attributeInfo(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, int __pyx_v_iIndex); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_18getFieldIndex(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, char const *__pyx_v_sKey); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_20getAttributeIndex(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, char const *__pyx_v_sKey); /* proto */
static PyObject *__pyx_pf_7py_csft_9PyDocInfo_setDocID(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, uint64_t __pyx_v_id); /* proto */
static PyObject *__pyx_pf_7py_csft_9PyDocInfo_2getDocID(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7py_csft_9PyDocInfo_4setAttr(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, SphAttr_t __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7py_csft_9PyDocInfo_6setAttrFloat(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, float __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7py_csft_9PyDocInfo_8setAttrInt64(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, int64_t __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7py_csft_9PyDocInfo_10setAttrTimestamp(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, int64_t __pyx_v_dVal); /* proto */
static PyObject *__pyx_pf_7py_csft_9PyDocInfo_12setAttrMulti(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, PyObject *__pyx_v_values, bool __pyx_v_bValue64); /* proto */
static PyObject *__pyx_pf_7py_csft_9PyDocInfo_14setAttrString(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, char const *__pyx_v_sVal); /* proto */
static PyObject *__pyx_pf_7py_csft_9PyDocInfo_16setField(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, char const *__pyx_v_sVal); /* proto */
static PyObject *__pyx_pf_7py_csft_9PyDocInfo_18getLastDocID(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7py_csft_14PyHitCollector_getPrevDocID(struct __pyx_obj_7py_csft_PyHitCollector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7py_csft_14PyHitCollector_2getDocID(struct __pyx_obj_7py_csft_PyHitCollector *__pyx_v_self); /* proto */
static int __pyx_pf_7py_csft_12PySourceWrap___init__(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, PyObject *__pyx_v_pysrc); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySourceWrap_2setup(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, PyObject *__pyx_v_source_conf); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySourceWrap_4connect(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, PyObject *__pyx_v_schema); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySourceWrap_6indexFinished(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySourceWrap_8beforeIndex(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySourceWrap_10afterIndex(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, bool __pyx_v_bNormalExit); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySourceWrap_12index_finished(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySourceWrap_14getJoinField(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, char const *__pyx_v_attrName); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySourceWrap_16getJoinMva(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, char const *__pyx_v_attrName); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySourceWrap_18next(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7py_csft_12PySourceWrap_20getKillList(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_7py_csft_PySchemaWrap(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7py_csft_PyDocInfo(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7py_csft_PyHitCollector(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7py_csft_PySourceWrap(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_[] = ".";
static char __pyx_k_c[] = "c";
static char __pyx_k_e[] = "e";
static char __pyx_k_m[] = "m";
static char __pyx_k_v[] = "v";
static char __pyx_k_ex[] = "ex";
static char __pyx_k_gc[] = "gc";
static char __pyx_k_os[] = "os";
static char __pyx_k_bit[] = "bit";
static char __pyx_k_doc[] = "__doc__";
static char __pyx_k_end[] = "end";
static char __pyx_k_obj[] = "obj";
static char __pyx_k_pos[] = "pos";
static char __pyx_k_sys[] = "sys";
static char __pyx_k_dVal[] = "dVal";
static char __pyx_k_done[] = "done";
static char __pyx_k_file[] = "file";
static char __pyx_k_find[] = "find";
static char __pyx_k_func[] = "func";
static char __pyx_k_json[] = "json";
static char __pyx_k_long[] = "long";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_name[] = "name";
static char __pyx_k_next[] = "next";
static char __pyx_k_none[] = "none";
static char __pyx_k_path[] = "path";
static char __pyx_k_sVal[] = "sVal";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_type[] = "type";
static char __pyx_k_bJoin[] = "bJoin";
static char __pyx_k_cName[] = "cName";
static char __pyx_k_field[] = "field";
static char __pyx_k_float[] = "float";
static char __pyx_k_index[] = "index";
static char __pyx_k_lower[] = "lower";
static char __pyx_k_mva32[] = "mva32";
static char __pyx_k_mva64[] = "mva64";
static char __pyx_k_print[] = "print";
static char __pyx_k_pysrc[] = "pysrc";
static char __pyx_k_range[] = "range";
static char __pyx_k_sName[] = "sName";
static char __pyx_k_sType[] = "sType";
static char __pyx_k_setup[] = "setup";
static char __pyx_k_append[] = "append";
static char __pyx_k_bIsSet[] = "bIsSet";
static char __pyx_k_gather[] = "gather";
static char __pyx_k_iIndex[] = "iIndex";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_module[] = "__module__";
static char __pyx_k_poly2d[] = "poly2d";
static char __pyx_k_string[] = "string";
static char __pyx_k_values[] = "values";
static char __pyx_k_abspath[] = "abspath";
static char __pyx_k_boolean[] = "boolean";
static char __pyx_k_connect[] = "connect";
static char __pyx_k_integer[] = "integer";
static char __pyx_k_prepare[] = "__prepare__";
static char __pyx_k_py_csft[] = "py_csft";
static char __pyx_k_setAttr[] = "setAttr";
static char __pyx_k_unknown[] = "unknown";
static char __pyx_k_addField[] = "addField";
static char __pyx_k_bValue64[] = "bValue64";
static char __pyx_k_getDocID[] = "getDocID";
static char __pyx_k_iBitSize[] = "iBitSize";
static char __pyx_k_qualname[] = "__qualname__";
static char __pyx_k_setDocID[] = "setDocID";
static char __pyx_k_setField[] = "setField";
static char __pyx_k_Exception[] = "Exception";
static char __pyx_k_attr_name[] = "attr_name";
static char __pyx_k_importlib[] = "importlib";
static char __pyx_k_metaclass[] = "__metaclass__";
static char __pyx_k_print_exc[] = "print_exc";
static char __pyx_k_stringPtr[] = "stringPtr";
static char __pyx_k_timestamp[] = "timestamp";
static char __pyx_k_traceback[] = "traceback";
static char __pyx_k_IndexError[] = "IndexError";
static char __pyx_k_afterIndex[] = "afterIndex";
static char __pyx_k_fieldsInfo[] = "fieldsInfo";
static char __pyx_k_getJoinMva[] = "getJoinMva";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_tokencount[] = "tokencount";
static char __pyx_k_ImportError[] = "ImportError";
static char __pyx_k_beforeIndex[] = "beforeIndex";
static char __pyx_k_fieldsCount[] = "fieldsCount";
static char __pyx_k_getKillList[] = "getKillList";
static char __pyx_k_module_name[] = "module_name";
static char __pyx_k_addAttribute[] = "addAttribute";
static char __pyx_k_getJoinField[] = "getJoinField";
static char __pyx_k_getLastDocID[] = "getLastDocID";
static char __pyx_k_getPrevDocID[] = "getPrevDocID";
static char __pyx_k_setAttrFloat[] = "setAttrFloat";
static char __pyx_k_setAttrInt64[] = "setAttrInt64";
static char __pyx_k_setAttrMulti[] = "setAttrMulti";
static char __pyx_k_attr_callable[] = "attr_callable";
static char __pyx_k_attributeInfo[] = "attributeInfo";
static char __pyx_k_getFieldIndex[] = "getFieldIndex";
static char __pyx_k_import_module[] = "import_module";
static char __pyx_k_indexFinished[] = "indexFinished";
static char __pyx_k_setAttrString[] = "setAttrString";
static char __pyx_k_AttributeError[] = "AttributeError";
static char __pyx_k_attributeCount[] = "attributeCount";
static char __pyx_k_index_finished[] = "index_finished";
static char __pyx_k_fieldsBaseCount[] = "fieldsBaseCount";
static char __pyx_k_findPythonClass[] = "__findPythonClass";
static char __pyx_k_gatherJoinField[] = "gatherJoinField";
static char __pyx_k_setAttrTimestamp[] = "setAttrTimestamp";
static char __pyx_k_getAttributeIndex[] = "getAttributeIndex";
static char __pyx_k_InvalidAttributeType[] = "InvalidAttributeType";
static char __pyx_k_getMultiValueAttribute[] = "getMultiValueAttribute";
static char __pyx_k_Users_nzinfo_coreseek_sphinxsea[] = "/Users/nzinfo/coreseek/sphinxsearch/src/py_csft.pyx";
static char __pyx_k_WARNING_PySource_s_is_defined_b[] = "[WARNING][PySource] '%s' is defined but not a callable function.";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_n_s_AttributeError;
static PyObject *__pyx_n_s_Exception;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_n_s_InvalidAttributeType;
static PyObject *__pyx_kp_s_Users_nzinfo_coreseek_sphinxsea;
static PyObject *__pyx_kp_s_WARNING_PySource_s_is_defined_b;
static PyObject *__pyx_n_s_abspath;
static PyObject *__pyx_n_s_addAttribute;
static PyObject *__pyx_n_s_addField;
static PyObject *__pyx_n_s_afterIndex;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_attr_callable;
static PyObject *__pyx_n_s_attr_name;
static PyObject *__pyx_n_s_attributeCount;
static PyObject *__pyx_n_s_attributeInfo;
static PyObject *__pyx_n_s_bIsSet;
static PyObject *__pyx_n_s_bJoin;
static PyObject *__pyx_n_s_bValue64;
static PyObject *__pyx_n_s_beforeIndex;
static PyObject *__pyx_n_s_bit;
static PyObject *__pyx_n_s_boolean;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_cName;
static PyObject *__pyx_n_s_connect;
static PyObject *__pyx_n_s_dVal;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_done;
static PyObject *__pyx_n_s_e;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_ex;
static PyObject *__pyx_n_s_field;
static PyObject *__pyx_n_s_fieldsBaseCount;
static PyObject *__pyx_n_s_fieldsCount;
static PyObject *__pyx_n_s_fieldsInfo;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_find;
static PyObject *__pyx_n_s_findPythonClass;
static PyObject *__pyx_n_s_float;
static PyObject *__pyx_n_s_func;
static PyObject *__pyx_n_s_gather;
static PyObject *__pyx_n_s_gatherJoinField;
static PyObject *__pyx_n_s_gc;
static PyObject *__pyx_n_s_getAttributeIndex;
static PyObject *__pyx_n_s_getDocID;
static PyObject *__pyx_n_s_getFieldIndex;
static PyObject *__pyx_n_s_getJoinField;
static PyObject *__pyx_n_s_getJoinMva;
static PyObject *__pyx_n_s_getKillList;
static PyObject *__pyx_n_s_getLastDocID;
static PyObject *__pyx_n_s_getMultiValueAttribute;
static PyObject *__pyx_n_s_getPrevDocID;
static PyObject *__pyx_n_s_iBitSize;
static PyObject *__pyx_n_s_iIndex;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_import_module;
static PyObject *__pyx_n_s_importlib;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_indexFinished;
static PyObject *__pyx_n_s_index_finished;
static PyObject *__pyx_n_s_integer;
static PyObject *__pyx_n_s_json;
static PyObject *__pyx_n_s_long;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_module_name;
static PyObject *__pyx_n_s_mva32;
static PyObject *__pyx_n_s_mva64;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_next;
static PyObject *__pyx_n_s_none;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_poly2d;
static PyObject *__pyx_n_s_pos;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_print_exc;
static PyObject *__pyx_n_s_py_csft;
static PyObject *__pyx_n_s_pysrc;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_sName;
static PyObject *__pyx_n_s_sType;
static PyObject *__pyx_n_s_sVal;
static PyObject *__pyx_n_s_setAttr;
static PyObject *__pyx_n_s_setAttrFloat;
static PyObject *__pyx_n_s_setAttrInt64;
static PyObject *__pyx_n_s_setAttrMulti;
static PyObject *__pyx_n_s_setAttrString;
static PyObject *__pyx_n_s_setAttrTimestamp;
static PyObject *__pyx_n_s_setDocID;
static PyObject *__pyx_n_s_setField;
static PyObject *__pyx_n_s_setup;
static PyObject *__pyx_n_s_string;
static PyObject *__pyx_n_s_stringPtr;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_timestamp;
static PyObject *__pyx_n_s_tokencount;
static PyObject *__pyx_n_s_traceback;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_n_s_unknown;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__9;

/* "py_csft.pyx":31
 * 
 * # Ref: http://stackoverflow.com/questions/1176136/convert-string-to-python-class-object
 * def __findPythonClass(sName):             # <<<<<<<<<<<<<<
 *     import importlib
 *     pos = sName.find('.')
 */

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_1__findPythonClass(PyObject *__pyx_self, PyObject *__pyx_v_sName); /*proto*/
static PyMethodDef __pyx_mdef_7py_csft_1__findPythonClass = {__Pyx_NAMESTR("__findPythonClass"), (PyCFunction)__pyx_pw_7py_csft_1__findPythonClass, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_7py_csft_1__findPythonClass(PyObject *__pyx_self, PyObject *__pyx_v_sName) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__findPythonClass (wrapper)", 0);
  __pyx_r = __pyx_pf_7py_csft___findPythonClass(__pyx_self, ((PyObject *)__pyx_v_sName));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft___findPythonClass(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sName) {
  PyObject *__pyx_v_importlib = NULL;
  PyObject *__pyx_v_pos = NULL;
  PyObject *__pyx_v_module_name = NULL;
  PyObject *__pyx_v_cName = NULL;
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__findPythonClass", 0);

  /* "py_csft.pyx":32
 * # Ref: http://stackoverflow.com/questions/1176136/convert-string-to-python-class-object
 * def __findPythonClass(sName):
 *     import importlib             # <<<<<<<<<<<<<<
 *     pos = sName.find('.')
 *     module_name = sName[:pos]
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_importlib, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_importlib = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "py_csft.pyx":33
 * def __findPythonClass(sName):
 *     import importlib
 *     pos = sName.find('.')             # <<<<<<<<<<<<<<
 *     module_name = sName[:pos]
 *     cName = sName[pos+1:]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sName, __pyx_n_s_find); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pos = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_csft.pyx":34
 *     import importlib
 *     pos = sName.find('.')
 *     module_name = sName[:pos]             # <<<<<<<<<<<<<<
 *     cName = sName[pos+1:]
 *     #print module_name, cName
 */
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_sName, 0, 0, NULL, &__pyx_v_pos, NULL, 0, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_module_name = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_csft.pyx":35
 *     pos = sName.find('.')
 *     module_name = sName[:pos]
 *     cName = sName[pos+1:]             # <<<<<<<<<<<<<<
 *     #print module_name, cName
 *     # import os
 */
  __pyx_t_2 = PyNumber_Add(__pyx_v_pos, __pyx_int_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_sName, 0, 0, &__pyx_t_2, NULL, NULL, 0, 0, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_cName = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "py_csft.pyx":40
 *     # print 'cwd: ', os.getcwd()
 *     # print '@@@@@@@@@@@@@@@@@@@@@@@@@@@@'
 *     try:             # <<<<<<<<<<<<<<
 *         m = importlib.import_module(module_name)
 *         #print m, dir(m)
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "py_csft.pyx":41
 *     # print '@@@@@@@@@@@@@@@@@@@@@@@@@@@@'
 *     try:
 *         m = importlib.import_module(module_name)             # <<<<<<<<<<<<<<
 *         #print m, dir(m)
 *         c = getattr(m, cName)
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_importlib, __pyx_n_s_import_module); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_module_name);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_module_name);
      __Pyx_GIVEREF(__pyx_v_module_name);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_m = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "py_csft.pyx":43
 *         m = importlib.import_module(module_name)
 *         #print m, dir(m)
 *         c = getattr(m, cName)             # <<<<<<<<<<<<<<
 *         return c
 *     except ImportError, e:
 */
      __pyx_t_6 = __Pyx_GetAttr(__pyx_v_m, __pyx_v_cName); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_v_c = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "py_csft.pyx":44
 *         #print m, dir(m)
 *         c = getattr(m, cName)
 *         return c             # <<<<<<<<<<<<<<
 *     except ImportError, e:
 *         print e
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_c);
      __pyx_r = __pyx_v_c;
      goto __pyx_L7_try_return;
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "py_csft.pyx":45
 *         c = getattr(m, cName)
 *         return c
 *     except ImportError, e:             # <<<<<<<<<<<<<<
 *         print e
 *         return None
 */
    __pyx_t_7 = PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("py_csft.__findPythonClass", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_2, &__pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __pyx_v_e = __pyx_t_2;

      /* "py_csft.pyx":46
 *         return c
 *     except ImportError, e:
 *         print e             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
      if (__Pyx_PrintOne(0, __pyx_v_e) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}

      /* "py_csft.pyx":47
 *     except ImportError, e:
 *         print e
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L6_except_return;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    __pyx_L10_try_end:;
  }

  /* "py_csft.pyx":31
 * 
 * # Ref: http://stackoverflow.com/questions/1176136/convert-string-to-python-class-object
 * def __findPythonClass(sName):             # <<<<<<<<<<<<<<
 *     import importlib
 *     pos = sName.find('.')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("py_csft.__findPythonClass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_importlib);
  __Pyx_XDECREF(__pyx_v_pos);
  __Pyx_XDECREF(__pyx_v_module_name);
  __Pyx_XDECREF(__pyx_v_cName);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":52
 * # Cython creator API
 * #
 * cdef public api void __setPythonPath(const char* sPath):             # <<<<<<<<<<<<<<
 *     import sys
 *     sPaths = [x.lower() for x in sys.path]
 */

void __setPythonPath(char const *__pyx_v_sPath) {
  PyObject *__pyx_v_sys = NULL;
  PyObject *__pyx_v_sPaths = NULL;
  PyObject *__pyx_v_sPath_ = NULL;
  PyObject *__pyx_v_x = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setPythonPath", 0);

  /* "py_csft.pyx":53
 * #
 * cdef public api void __setPythonPath(const char* sPath):
 *     import sys             # <<<<<<<<<<<<<<
 *     sPaths = [x.lower() for x in sys.path]
 *     sPath_ = os.path.abspath(sPath)
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sys = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "py_csft.pyx":54
 * cdef public api void __setPythonPath(const char* sPath):
 *     import sys
 *     sPaths = [x.lower() for x in sys.path]             # <<<<<<<<<<<<<<
 *     sPath_ = os.path.abspath(sPath)
 *     if sPath_ not in sPaths:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_sys, __pyx_n_s_path); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_lower); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_sPaths = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_csft.pyx":55
 *     import sys
 *     sPaths = [x.lower() for x in sys.path]
 *     sPath_ = os.path.abspath(sPath)             # <<<<<<<<<<<<<<
 *     if sPath_ not in sPaths:
 *         sys.path.append(sPath_)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_abspath); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_sPath); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_sPath_ = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "py_csft.pyx":56
 *     sPaths = [x.lower() for x in sys.path]
 *     sPath_ = os.path.abspath(sPath)
 *     if sPath_ not in sPaths:             # <<<<<<<<<<<<<<
 *         sys.path.append(sPath_)
 *     #print __findPythonClass('flask.Flask')
 */
  __pyx_t_7 = (__Pyx_PySequence_Contains(__pyx_v_sPath_, __pyx_v_sPaths, Py_NE)); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "py_csft.pyx":57
 *     sPath_ = os.path.abspath(sPath)
 *     if sPath_ not in sPaths:
 *         sys.path.append(sPath_)             # <<<<<<<<<<<<<<
 *     #print __findPythonClass('flask.Flask')
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_sys, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_Append(__pyx_t_3, __pyx_v_sPath_); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "py_csft.pyx":52
 * # Cython creator API
 * #
 * cdef public api void __setPythonPath(const char* sPath):             # <<<<<<<<<<<<<<
 *     import sys
 *     sPaths = [x.lower() for x in sys.path]
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("py_csft.__setPythonPath", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sys);
  __Pyx_XDECREF(__pyx_v_sPaths);
  __Pyx_XDECREF(__pyx_v_sPath_);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_RefNannyFinishContext();
}

/* "py_csft.pyx":61
 * 
 * #   Python
 * cdef public api cpy_ref.PyObject* __getPythonClassByName(const char* class_name):             # <<<<<<<<<<<<<<
 *     import sys
 *     sName = class_name
 */

PyObject *__getPythonClassByName(char const *__pyx_v_class_name) {
  CYTHON_UNUSED PyObject *__pyx_v_sys = NULL;
  char const *__pyx_v_sName;
  PyObject *__pyx_v_clsType = NULL;
  PyObject *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getPythonClassByName", 0);

  /* "py_csft.pyx":62
 * #   Python
 * cdef public api cpy_ref.PyObject* __getPythonClassByName(const char* class_name):
 *     import sys             # <<<<<<<<<<<<<<
 *     sName = class_name
 *     clsType = __findPythonClass(sName)
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sys = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "py_csft.pyx":63
 * cdef public api cpy_ref.PyObject* __getPythonClassByName(const char* class_name):
 *     import sys
 *     sName = class_name             # <<<<<<<<<<<<<<
 *     clsType = __findPythonClass(sName)
 *     if clsType:
 */
  __pyx_v_sName = __pyx_v_class_name;

  /* "py_csft.pyx":64
 *     import sys
 *     sName = class_name
 *     clsType = __findPythonClass(sName)             # <<<<<<<<<<<<<<
 *     if clsType:
 *         return ( <cpy_ref.PyObject*>clsType )
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_findPythonClass); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_sName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_clsType = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_csft.pyx":65
 *     sName = class_name
 *     clsType = __findPythonClass(sName)
 *     if clsType:             # <<<<<<<<<<<<<<
 *         return ( <cpy_ref.PyObject*>clsType )
 *     else:
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_clsType); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "py_csft.pyx":66
 *     clsType = __findPythonClass(sName)
 *     if clsType:
 *         return ( <cpy_ref.PyObject*>clsType )             # <<<<<<<<<<<<<<
 *     else:
 *         return NULL
 */
    __pyx_r = ((PyObject *)__pyx_v_clsType);
    goto __pyx_L0;
  }
  /*else*/ {

    /* "py_csft.pyx":68
 *         return ( <cpy_ref.PyObject*>clsType )
 *     else:
 *         return NULL             # <<<<<<<<<<<<<<
 * 
 * """
 */
    __pyx_r = NULL;
    goto __pyx_L0;
  }

  /* "py_csft.pyx":61
 * 
 * #   Python
 * cdef public api cpy_ref.PyObject* __getPythonClassByName(const char* class_name):             # <<<<<<<<<<<<<<
 *     import sys
 *     sName = class_name
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("py_csft.__getPythonClassByName", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sys);
  __Pyx_XDECREF(__pyx_v_clsType);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":213
 * 
 * ## --- python source ---
 * def attr_callable(obj, attr_name):             # <<<<<<<<<<<<<<
 *     try:
 *         func = getattr(obj, attr_name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_3attr_callable(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7py_csft_3attr_callable = {__Pyx_NAMESTR("attr_callable"), (PyCFunction)__pyx_pw_7py_csft_3attr_callable, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_7py_csft_3attr_callable(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  PyObject *__pyx_v_attr_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attr_callable (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_attr_name,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_attr_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("attr_callable", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "attr_callable") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_obj = values[0];
    __pyx_v_attr_name = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("attr_callable", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_csft.attr_callable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7py_csft_2attr_callable(__pyx_self, __pyx_v_obj, __pyx_v_attr_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_2attr_callable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_attr_name) {
  PyObject *__pyx_v_func = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ex = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("attr_callable", 0);

  /* "py_csft.pyx":214
 * ## --- python source ---
 * def attr_callable(obj, attr_name):
 *     try:             # <<<<<<<<<<<<<<
 *         func = getattr(obj, attr_name)
 *         if callable(func):
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "py_csft.pyx":215
 * def attr_callable(obj, attr_name):
 *     try:
 *         func = getattr(obj, attr_name)             # <<<<<<<<<<<<<<
 *         if callable(func):
 *             return True
 */
      __pyx_t_4 = __Pyx_GetAttr(__pyx_v_obj, __pyx_v_attr_name); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_func = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "py_csft.pyx":216
 *     try:
 *         func = getattr(obj, attr_name)
 *         if callable(func):             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
      __pyx_t_5 = __Pyx_PyCallable_Check(__pyx_v_func); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __pyx_t_6 = (__pyx_t_5 != 0);
      if (__pyx_t_6) {

        /* "py_csft.pyx":217
 *         func = getattr(obj, attr_name)
 *         if callable(func):
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             print("[WARNING][PySource] '%s' is defined but not a callable function." % attr_name);
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_True);
        __pyx_r = Py_True;
        goto __pyx_L7_try_return;
      }
      /*else*/ {

        /* "py_csft.pyx":219
 *             return True
 *         else:
 *             print("[WARNING][PySource] '%s' is defined but not a callable function." % attr_name);             # <<<<<<<<<<<<<<
 *     except AttributeError, ex:
 *         return False
 */
        __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_WARNING_PySource_s_is_defined_b, __pyx_v_attr_name); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_GOTREF(__pyx_t_4);
        if (__Pyx_PrintOne(0, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "py_csft.pyx":220
 *         else:
 *             print("[WARNING][PySource] '%s' is defined but not a callable function." % attr_name);
 *     except AttributeError, ex:             # <<<<<<<<<<<<<<
 *         return False
 *     return False
 */
    __pyx_t_7 = PyErr_ExceptionMatches(__pyx_builtin_AttributeError);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("py_csft.attr_callable", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_8, &__pyx_t_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_8);
      __pyx_v_ex = __pyx_t_8;

      /* "py_csft.pyx":221
 *             print("[WARNING][PySource] '%s' is defined but not a callable function." % attr_name);
 *     except AttributeError, ex:
 *         return False             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L6_except_return;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L10_try_end:;
  }

  /* "py_csft.pyx":222
 *     except AttributeError, ex:
 *         return False
 *     return False             # <<<<<<<<<<<<<<
 * 
 * class InvalidAttributeType(Exception):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "py_csft.pyx":213
 * 
 * ## --- python source ---
 * def attr_callable(obj, attr_name):             # <<<<<<<<<<<<<<
 *     try:
 *         func = getattr(obj, attr_name)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("py_csft.attr_callable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_func);
  __Pyx_XDECREF(__pyx_v_ex);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":237
 *     cdef int _i_plain_fields_length
 * 
 *     def  __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._schema = NULL
 *         self._valid_attribute_type = ["integer", "timestamp", "boolean", "float", "long", "string", "poly2d", "field", "json"]
 */

/* Python wrapper */
static int __pyx_pw_7py_csft_12PySchemaWrap_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7py_csft_12PySchemaWrap_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7py_csft_12PySchemaWrap___cinit__(((struct __pyx_obj_7py_csft_PySchemaWrap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7py_csft_12PySchemaWrap___cinit__(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "py_csft.pyx":238
 * 
 *     def  __cinit__(self):
 *         self._schema = NULL             # <<<<<<<<<<<<<<
 *         self._valid_attribute_type = ["integer", "timestamp", "boolean", "float", "long", "string", "poly2d", "field", "json"]
 *         self.iIndex = 0
 */
  __pyx_v_self->_schema = NULL;

  /* "py_csft.pyx":239
 *     def  __cinit__(self):
 *         self._schema = NULL
 *         self._valid_attribute_type = ["integer", "timestamp", "boolean", "float", "long", "string", "poly2d", "field", "json"]             # <<<<<<<<<<<<<<
 *         self.iIndex = 0
 *         self._join_fields = []
 */
  __pyx_t_1 = PyList_New(9); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_integer);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_integer);
  __Pyx_GIVEREF(__pyx_n_s_integer);
  __Pyx_INCREF(__pyx_n_s_timestamp);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_timestamp);
  __Pyx_GIVEREF(__pyx_n_s_timestamp);
  __Pyx_INCREF(__pyx_n_s_boolean);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_boolean);
  __Pyx_GIVEREF(__pyx_n_s_boolean);
  __Pyx_INCREF(__pyx_n_s_float);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_float);
  __Pyx_GIVEREF(__pyx_n_s_float);
  __Pyx_INCREF(__pyx_n_s_long);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_long);
  __Pyx_GIVEREF(__pyx_n_s_long);
  __Pyx_INCREF(__pyx_n_s_string);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_string);
  __Pyx_GIVEREF(__pyx_n_s_string);
  __Pyx_INCREF(__pyx_n_s_poly2d);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_poly2d);
  __Pyx_GIVEREF(__pyx_n_s_poly2d);
  __Pyx_INCREF(__pyx_n_s_field);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_field);
  __Pyx_GIVEREF(__pyx_n_s_field);
  __Pyx_INCREF(__pyx_n_s_json);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_s_json);
  __Pyx_GIVEREF(__pyx_n_s_json);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_valid_attribute_type);
  __Pyx_DECREF(__pyx_v_self->_valid_attribute_type);
  __pyx_v_self->_valid_attribute_type = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "py_csft.pyx":240
 *         self._schema = NULL
 *         self._valid_attribute_type = ["integer", "timestamp", "boolean", "float", "long", "string", "poly2d", "field", "json"]
 *         self.iIndex = 0             # <<<<<<<<<<<<<<
 *         self._join_fields = []
 *         self._i_plain_fields_length = 0
 */
  __pyx_v_self->iIndex = 0;

  /* "py_csft.pyx":241
 *         self._valid_attribute_type = ["integer", "timestamp", "boolean", "float", "long", "string", "poly2d", "field", "json"]
 *         self.iIndex = 0
 *         self._join_fields = []             # <<<<<<<<<<<<<<
 *         self._i_plain_fields_length = 0
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_join_fields);
  __Pyx_DECREF(__pyx_v_self->_join_fields);
  __pyx_v_self->_join_fields = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_csft.pyx":242
 *         self.iIndex = 0
 *         self._join_fields = []
 *         self._i_plain_fields_length = 0             # <<<<<<<<<<<<<<
 * 
 *     cdef sphColumnInfoTypeToString(self, CSphColumnInfo& tCol):
 */
  __pyx_v_self->_i_plain_fields_length = 0;

  /* "py_csft.pyx":237
 *     cdef int _i_plain_fields_length
 * 
 *     def  __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._schema = NULL
 *         self._valid_attribute_type = ["integer", "timestamp", "boolean", "float", "long", "string", "poly2d", "field", "json"]
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySchemaWrap.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":244
 *         self._i_plain_fields_length = 0
 * 
 *     cdef sphColumnInfoTypeToString(self, CSphColumnInfo& tCol):             # <<<<<<<<<<<<<<
 *         type2str = {
 *             SPH_ATTR_NONE:"none",
 */

static PyObject *__pyx_f_7py_csft_12PySchemaWrap_sphColumnInfoTypeToString(CYTHON_UNUSED struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, CSphColumnInfo &__pyx_v_tCol) {
  PyObject *__pyx_v_type2str = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sphColumnInfoTypeToString", 0);

  /* "py_csft.pyx":245
 * 
 *     cdef sphColumnInfoTypeToString(self, CSphColumnInfo& tCol):
 *         type2str = {             # <<<<<<<<<<<<<<
 *             SPH_ATTR_NONE:"none",
 *             SPH_ATTR_INTEGER:"integer",
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "py_csft.pyx":246
 *     cdef sphColumnInfoTypeToString(self, CSphColumnInfo& tCol):
 *         type2str = {
 *             SPH_ATTR_NONE:"none",             # <<<<<<<<<<<<<<
 *             SPH_ATTR_INTEGER:"integer",
 *             SPH_ATTR_TIMESTAMP:"timestamp",
 */
  __pyx_t_2 = PyInt_FromLong(SPH_ATTR_NONE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_none) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_csft.pyx":247
 *         type2str = {
 *             SPH_ATTR_NONE:"none",
 *             SPH_ATTR_INTEGER:"integer",             # <<<<<<<<<<<<<<
 *             SPH_ATTR_TIMESTAMP:"timestamp",
 *             #SPH_ATTR_ORDINAL:"str2ord",
 */
  __pyx_t_2 = PyInt_FromLong(SPH_ATTR_INTEGER); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_integer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_csft.pyx":248
 *             SPH_ATTR_NONE:"none",
 *             SPH_ATTR_INTEGER:"integer",
 *             SPH_ATTR_TIMESTAMP:"timestamp",             # <<<<<<<<<<<<<<
 *             #SPH_ATTR_ORDINAL:"str2ord",
 *             SPH_ATTR_BOOL:"boolean",
 */
  __pyx_t_2 = PyInt_FromLong(SPH_ATTR_TIMESTAMP); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_timestamp) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_csft.pyx":250
 *             SPH_ATTR_TIMESTAMP:"timestamp",
 *             #SPH_ATTR_ORDINAL:"str2ord",
 *             SPH_ATTR_BOOL:"boolean",             # <<<<<<<<<<<<<<
 *             SPH_ATTR_FLOAT:"float",
 *             SPH_ATTR_BIGINT:"long",
 */
  __pyx_t_2 = PyInt_FromLong(SPH_ATTR_BOOL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_boolean) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_csft.pyx":251
 *             #SPH_ATTR_ORDINAL:"str2ord",
 *             SPH_ATTR_BOOL:"boolean",
 *             SPH_ATTR_FLOAT:"float",             # <<<<<<<<<<<<<<
 *             SPH_ATTR_BIGINT:"long",
 *             SPH_ATTR_STRING:"string",
 */
  __pyx_t_2 = PyInt_FromLong(SPH_ATTR_FLOAT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_float) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_csft.pyx":252
 *             SPH_ATTR_BOOL:"boolean",
 *             SPH_ATTR_FLOAT:"float",
 *             SPH_ATTR_BIGINT:"long",             # <<<<<<<<<<<<<<
 *             SPH_ATTR_STRING:"string",
 *             #SPH_ATTR_WORDCOUNT:"wordcount",
 */
  __pyx_t_2 = PyInt_FromLong(SPH_ATTR_BIGINT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_long) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_csft.pyx":253
 *             SPH_ATTR_FLOAT:"float",
 *             SPH_ATTR_BIGINT:"long",
 *             SPH_ATTR_STRING:"string",             # <<<<<<<<<<<<<<
 *             #SPH_ATTR_WORDCOUNT:"wordcount",
 *             SPH_ATTR_POLY2D:"poly2d",
 */
  __pyx_t_2 = PyInt_FromLong(SPH_ATTR_STRING); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_string) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_csft.pyx":255
 *             SPH_ATTR_STRING:"string",
 *             #SPH_ATTR_WORDCOUNT:"wordcount",
 *             SPH_ATTR_POLY2D:"poly2d",             # <<<<<<<<<<<<<<
 *             SPH_ATTR_STRINGPTR:"stringPtr",
 *             SPH_ATTR_TOKENCOUNT:"tokencount",
 */
  __pyx_t_2 = PyInt_FromLong(SPH_ATTR_POLY2D); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_poly2d) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_csft.pyx":256
 *             #SPH_ATTR_WORDCOUNT:"wordcount",
 *             SPH_ATTR_POLY2D:"poly2d",
 *             SPH_ATTR_STRINGPTR:"stringPtr",             # <<<<<<<<<<<<<<
 *             SPH_ATTR_TOKENCOUNT:"tokencount",
 *             SPH_ATTR_JSON:"json",
 */
  __pyx_t_2 = PyInt_FromLong(SPH_ATTR_STRINGPTR); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_stringPtr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_csft.pyx":257
 *             SPH_ATTR_POLY2D:"poly2d",
 *             SPH_ATTR_STRINGPTR:"stringPtr",
 *             SPH_ATTR_TOKENCOUNT:"tokencount",             # <<<<<<<<<<<<<<
 *             SPH_ATTR_JSON:"json",
 *             SPH_ATTR_UINT32SET:"mva32",
 */
  __pyx_t_2 = PyInt_FromLong(SPH_ATTR_TOKENCOUNT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_tokencount) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_csft.pyx":258
 *             SPH_ATTR_STRINGPTR:"stringPtr",
 *             SPH_ATTR_TOKENCOUNT:"tokencount",
 *             SPH_ATTR_JSON:"json",             # <<<<<<<<<<<<<<
 *             SPH_ATTR_UINT32SET:"mva32",
 *             SPH_ATTR_INT64SET:"mva64",
 */
  __pyx_t_2 = PyInt_FromLong(SPH_ATTR_JSON); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_json) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_csft.pyx":259
 *             SPH_ATTR_TOKENCOUNT:"tokencount",
 *             SPH_ATTR_JSON:"json",
 *             SPH_ATTR_UINT32SET:"mva32",             # <<<<<<<<<<<<<<
 *             SPH_ATTR_INT64SET:"mva64",
 *         }
 */
  __pyx_t_2 = PyInt_FromLong(SPH_ATTR_UINT32SET); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_mva32) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "py_csft.pyx":260
 *             SPH_ATTR_JSON:"json",
 *             SPH_ATTR_UINT32SET:"mva32",
 *             SPH_ATTR_INT64SET:"mva64",             # <<<<<<<<<<<<<<
 *         }
 *         if tCol.m_eAttrType in type2str:
 */
  __pyx_t_2 = PyInt_FromLong(SPH_ATTR_INT64SET); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_2, __pyx_n_s_mva64) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_type2str = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_csft.pyx":262
 *             SPH_ATTR_INT64SET:"mva64",
 *         }
 *         if tCol.m_eAttrType in type2str:             # <<<<<<<<<<<<<<
 *             return type2str[tCol.m_eAttrType]
 * 
 */
  __pyx_t_1 = PyInt_FromLong(__pyx_v_tCol.m_eAttrType); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PyDict_Contains(__pyx_t_1, __pyx_v_type2str, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "py_csft.pyx":263
 *         }
 *         if tCol.m_eAttrType in type2str:
 *             return type2str[tCol.m_eAttrType]             # <<<<<<<<<<<<<<
 * 
 *         return "unknown"
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyInt_FromLong(__pyx_v_tCol.m_eAttrType); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_type2str, __pyx_t_1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "py_csft.pyx":265
 *             return type2str[tCol.m_eAttrType]
 * 
 *         return "unknown"             # <<<<<<<<<<<<<<
 * 
 *     cdef bind(self, CSphSchema* s):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_n_s_unknown);
  __pyx_r = __pyx_n_s_unknown;
  goto __pyx_L0;

  /* "py_csft.pyx":244
 *         self._i_plain_fields_length = 0
 * 
 *     cdef sphColumnInfoTypeToString(self, CSphColumnInfo& tCol):             # <<<<<<<<<<<<<<
 *         type2str = {
 *             SPH_ATTR_NONE:"none",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_csft.PySchemaWrap.sphColumnInfoTypeToString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_type2str);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":267
 *         return "unknown"
 * 
 *     cdef bind(self, CSphSchema* s):             # <<<<<<<<<<<<<<
 *         self._schema = s
 * 
 */

static PyObject *__pyx_f_7py_csft_12PySchemaWrap_bind(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, CSphSchema *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bind", 0);

  /* "py_csft.pyx":268
 * 
 *     cdef bind(self, CSphSchema* s):
 *         self._schema = s             # <<<<<<<<<<<<<<
 * 
 *     cpdef done(self):
 */
  __pyx_v_self->_schema = __pyx_v_s;

  /* "py_csft.pyx":267
 *         return "unknown"
 * 
 *     cdef bind(self, CSphSchema* s):             # <<<<<<<<<<<<<<
 *         self._schema = s
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":270
 *         self._schema = s
 * 
 *     cpdef done(self):             # <<<<<<<<<<<<<<
 *         cdef CSphColumnInfo tCol
 *         for sName in self._join_fields:
 */

static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_3done(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_7py_csft_12PySchemaWrap_done(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, int __pyx_skip_dispatch) {
  CSphColumnInfo __pyx_v_tCol;
  PyObject *__pyx_v_sName = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  char const *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("done", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_done); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_3done)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":272
 *     cpdef done(self):
 *         cdef CSphColumnInfo tCol
 *         for sName in self._join_fields:             # <<<<<<<<<<<<<<
 *             initColumnInfo(tCol, sName, NULL)
 *             tCol.m_iIndex = -1
 */
  if (unlikely(__pyx_v_self->_join_fields == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_self->_join_fields; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_sName, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "py_csft.pyx":273
 *         cdef CSphColumnInfo tCol
 *         for sName in self._join_fields:
 *             initColumnInfo(tCol, sName, NULL)             # <<<<<<<<<<<<<<
 *             tCol.m_iIndex = -1
 *             tCol.m_bIndexed = True
 */
    __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_sName); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    initColumnInfo(__pyx_v_tCol, __pyx_t_4, NULL);

    /* "py_csft.pyx":274
 *         for sName in self._join_fields:
 *             initColumnInfo(tCol, sName, NULL)
 *             tCol.m_iIndex = -1             # <<<<<<<<<<<<<<
 *             tCol.m_bIndexed = True
 *             addFieldColumn(self._schema, tCol)
 */
    __pyx_v_tCol.m_iIndex = -1;

    /* "py_csft.pyx":275
 *             initColumnInfo(tCol, sName, NULL)
 *             tCol.m_iIndex = -1
 *             tCol.m_bIndexed = True             # <<<<<<<<<<<<<<
 *             addFieldColumn(self._schema, tCol)
 *         self._join_fields = []
 */
    __pyx_v_tCol.m_bIndexed = 1;

    /* "py_csft.pyx":276
 *             tCol.m_iIndex = -1
 *             tCol.m_bIndexed = True
 *             addFieldColumn(self._schema, tCol)             # <<<<<<<<<<<<<<
 *         self._join_fields = []
 * 
 */
    addFieldColumn(__pyx_v_self->_schema, __pyx_v_tCol);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "py_csft.pyx":277
 *             tCol.m_bIndexed = True
 *             addFieldColumn(self._schema, tCol)
 *         self._join_fields = []             # <<<<<<<<<<<<<<
 * 
 *     cpdef int addAttribute(self, const char* sName, const char* sType, int iBitSize=0, bool bJoin=False, bool bIsSet=False):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_join_fields);
  __Pyx_DECREF(__pyx_v_self->_join_fields);
  __pyx_v_self->_join_fields = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_csft.pyx":270
 *         self._schema = s
 * 
 *     cpdef done(self):             # <<<<<<<<<<<<<<
 *         cdef CSphColumnInfo tCol
 *         for sName in self._join_fields:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("py_csft.PySchemaWrap.done", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sName);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_3done(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_3done(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("done (wrapper)", 0);
  __pyx_r = __pyx_pf_7py_csft_12PySchemaWrap_2done(((struct __pyx_obj_7py_csft_PySchemaWrap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_2done(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("done", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7py_csft_PySchemaWrap *)__pyx_v_self->__pyx_vtab)->done(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySchemaWrap.done", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":279
 *         self._join_fields = []
 * 
 *     cpdef int addAttribute(self, const char* sName, const char* sType, int iBitSize=0, bool bJoin=False, bool bIsSet=False):             # <<<<<<<<<<<<<<
 *         """
 *              Schema
 */

static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_5addAttribute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_7py_csft_12PySchemaWrap_addAttribute(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, char const *__pyx_v_sName, char const *__pyx_v_sType, int __pyx_skip_dispatch, struct __pyx_opt_args_7py_csft_12PySchemaWrap_addAttribute *__pyx_optional_args) {
  int __pyx_v_iBitSize = ((int)0);
  bool __pyx_v_bJoin = ((bool)0);
  bool __pyx_v_bIsSet = ((bool)0);
  CSphColumnInfo __pyx_v_tCol;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addAttribute", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_iBitSize = __pyx_optional_args->iBitSize;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_bJoin = __pyx_optional_args->bJoin;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_bIsSet = __pyx_optional_args->bIsSet;
        }
      }
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_addAttribute); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_5addAttribute)) {
      __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_sName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_sType); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_iBitSize); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_bJoin); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_bIsSet); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(5); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_r = __pyx_t_8;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":288
 *         cdef CSphColumnInfo tCol
 * 
 *         if sType not in self._valid_attribute_type:             # <<<<<<<<<<<<<<
 *             raise InvalidAttributeType()
 *         if sType == str("field"):
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_sType); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = (__Pyx_PySequence_Contains(__pyx_t_1, __pyx_v_self->_valid_attribute_type, Py_NE)); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = (__pyx_t_9 != 0);
  if (__pyx_t_10) {

    /* "py_csft.pyx":289
 * 
 *         if sType not in self._valid_attribute_type:
 *             raise InvalidAttributeType()             # <<<<<<<<<<<<<<
 *         if sType == str("field"):
 *             raise InvalidAttributeType() # used addField plz.
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_InvalidAttributeType); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "py_csft.pyx":290
 *         if sType not in self._valid_attribute_type:
 *             raise InvalidAttributeType()
 *         if sType == str("field"):             # <<<<<<<<<<<<<<
 *             raise InvalidAttributeType() # used addField plz.
 * 
 */
  __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_sType); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = (__Pyx_PyBytes_Equals(__pyx_t_6, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_10) {

    /* "py_csft.pyx":291
 *             raise InvalidAttributeType()
 *         if sType == str("field"):
 *             raise InvalidAttributeType() # used addField plz.             # <<<<<<<<<<<<<<
 * 
 *         initColumnInfo(tCol, sName, sType);
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_InvalidAttributeType); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "py_csft.pyx":293
 *             raise InvalidAttributeType() # used addField plz.
 * 
 *         initColumnInfo(tCol, sName, sType);             # <<<<<<<<<<<<<<
 *         tCol.m_iIndex = self.iIndex
 *         self.iIndex += 1
 */
  initColumnInfo(__pyx_v_tCol, __pyx_v_sName, __pyx_v_sType);

  /* "py_csft.pyx":294
 * 
 *         initColumnInfo(tCol, sName, sType);
 *         tCol.m_iIndex = self.iIndex             # <<<<<<<<<<<<<<
 *         self.iIndex += 1
 *         if iBitSize:
 */
  __pyx_t_8 = __pyx_v_self->iIndex;
  __pyx_v_tCol.m_iIndex = __pyx_t_8;

  /* "py_csft.pyx":295
 *         initColumnInfo(tCol, sName, sType);
 *         tCol.m_iIndex = self.iIndex
 *         self.iIndex += 1             # <<<<<<<<<<<<<<
 *         if iBitSize:
 *             setColumnBitCount(tCol, iBitSize)
 */
  __pyx_v_self->iIndex = (__pyx_v_self->iIndex + 1);

  /* "py_csft.pyx":296
 *         tCol.m_iIndex = self.iIndex
 *         self.iIndex += 1
 *         if iBitSize:             # <<<<<<<<<<<<<<
 *             setColumnBitCount(tCol, iBitSize)
 *         # Patch on MVA
 */
  __pyx_t_10 = (__pyx_v_iBitSize != 0);
  if (__pyx_t_10) {

    /* "py_csft.pyx":297
 *         self.iIndex += 1
 *         if iBitSize:
 *             setColumnBitCount(tCol, iBitSize)             # <<<<<<<<<<<<<<
 *         # Patch on MVA
 *         if bIsSet:
 */
    setColumnBitCount(__pyx_v_tCol, __pyx_v_iBitSize);
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "py_csft.pyx":299
 *             setColumnBitCount(tCol, iBitSize)
 *         # Patch on MVA
 *         if bIsSet:             # <<<<<<<<<<<<<<
 *             setColumnAsMVA(tCol, bJoin)
 * 
 */
  __pyx_t_10 = (__pyx_v_bIsSet != 0);
  if (__pyx_t_10) {

    /* "py_csft.pyx":300
 *         # Patch on MVA
 *         if bIsSet:
 *             setColumnAsMVA(tCol, bJoin)             # <<<<<<<<<<<<<<
 * 
 *         self._schema.AddAttr(tCol, True)
 */
    setColumnAsMVA(__pyx_v_tCol, __pyx_v_bJoin);
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "py_csft.pyx":302
 *             setColumnAsMVA(tCol, bJoin)
 * 
 *         self._schema.AddAttr(tCol, True)             # <<<<<<<<<<<<<<
 *         return tCol.m_iIndex
 * 
 */
  __pyx_v_self->_schema->AddAttr(__pyx_v_tCol, 1);

  /* "py_csft.pyx":303
 * 
 *         self._schema.AddAttr(tCol, True)
 *         return tCol.m_iIndex             # <<<<<<<<<<<<<<
 * 
 *     cpdef addField(self, const char* sName, bool bJoin=False):
 */
  __pyx_r = __pyx_v_tCol.m_iIndex;
  goto __pyx_L0;

  /* "py_csft.pyx":279
 *         self._join_fields = []
 * 
 *     cpdef int addAttribute(self, const char* sName, const char* sType, int iBitSize=0, bool bJoin=False, bool bIsSet=False):             # <<<<<<<<<<<<<<
 *         """
 *              Schema
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("py_csft.PySchemaWrap.addAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_5addAttribute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7py_csft_12PySchemaWrap_4addAttribute[] = "\n            \345\220\221\345\256\236\351\231\205\347\232\204 Schema \344\270\255\345\242\236\345\212\240 \346\226\260\345\255\227\346\256\265\n            @iBitSize <= 0, means standand size.\n\n            - check sType\n        ";
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_5addAttribute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char const *__pyx_v_sName;
  char const *__pyx_v_sType;
  int __pyx_v_iBitSize;
  bool __pyx_v_bJoin;
  bool __pyx_v_bIsSet;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addAttribute (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sName,&__pyx_n_s_sType,&__pyx_n_s_iBitSize,&__pyx_n_s_bJoin,&__pyx_n_s_bIsSet,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sName)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sType)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addAttribute", 0, 2, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iBitSize);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bJoin);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bIsSet);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addAttribute") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_sName = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_sName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_sType = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_sType) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[2]) {
      __pyx_v_iBitSize = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_iBitSize == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_iBitSize = ((int)0);
    }
    if (values[3]) {
      __pyx_v_bJoin = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_bJoin == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_bJoin = ((bool)0);
    }
    if (values[4]) {
      __pyx_v_bIsSet = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_bIsSet == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_bIsSet = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addAttribute", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_csft.PySchemaWrap.addAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7py_csft_12PySchemaWrap_4addAttribute(((struct __pyx_obj_7py_csft_PySchemaWrap *)__pyx_v_self), __pyx_v_sName, __pyx_v_sType, __pyx_v_iBitSize, __pyx_v_bJoin, __pyx_v_bIsSet);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_4addAttribute(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, char const *__pyx_v_sName, char const *__pyx_v_sType, int __pyx_v_iBitSize, bool __pyx_v_bJoin, bool __pyx_v_bIsSet) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_opt_args_7py_csft_12PySchemaWrap_addAttribute __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addAttribute", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 3;
  __pyx_t_2.iBitSize = __pyx_v_iBitSize;
  __pyx_t_2.bJoin = __pyx_v_bJoin;
  __pyx_t_2.bIsSet = __pyx_v_bIsSet;
  __pyx_t_1 = ((struct __pyx_vtabstruct_7py_csft_PySchemaWrap *)__pyx_v_self->__pyx_vtab)->addAttribute(__pyx_v_self, __pyx_v_sName, __pyx_v_sType, 1, &__pyx_t_2); 
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("py_csft.PySchemaWrap.addAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":305
 *         return tCol.m_iIndex
 * 
 *     cpdef addField(self, const char* sName, bool bJoin=False):             # <<<<<<<<<<<<<<
 *         """
 *              Schema
 */

static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_7addField(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7py_csft_12PySchemaWrap_addField(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, char const *__pyx_v_sName, int __pyx_skip_dispatch, struct __pyx_opt_args_7py_csft_12PySchemaWrap_addField *__pyx_optional_args) {
  bool __pyx_v_bJoin = ((bool)0);
  CSphColumnInfo __pyx_v_tCol;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addField", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_bJoin = __pyx_optional_args->bJoin;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_addField); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_7addField)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_sName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_bJoin); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":310
 *         """
 *         cdef CSphColumnInfo tCol
 *         initColumnInfo(tCol, sName, NULL);             # <<<<<<<<<<<<<<
 *         # int	m_iIndex;  ///< index into source result set (-1 for joined fields)
 *         if not bJoin:
 */
  initColumnInfo(__pyx_v_tCol, __pyx_v_sName, NULL);

  /* "py_csft.pyx":312
 *         initColumnInfo(tCol, sName, NULL);
 *         # int	m_iIndex;  ///< index into source result set (-1 for joined fields)
 *         if not bJoin:             # <<<<<<<<<<<<<<
 *             tCol.m_iIndex = self.iIndex
 *             tCol.m_bIndexed = True
 */
  __pyx_t_5 = ((!(__pyx_v_bJoin != 0)) != 0);
  if (__pyx_t_5) {

    /* "py_csft.pyx":313
 *         # int	m_iIndex;  ///< index into source result set (-1 for joined fields)
 *         if not bJoin:
 *             tCol.m_iIndex = self.iIndex             # <<<<<<<<<<<<<<
 *             tCol.m_bIndexed = True
 *             self.iIndex += 1
 */
    __pyx_t_6 = __pyx_v_self->iIndex;
    __pyx_v_tCol.m_iIndex = __pyx_t_6;

    /* "py_csft.pyx":314
 *         if not bJoin:
 *             tCol.m_iIndex = self.iIndex
 *             tCol.m_bIndexed = True             # <<<<<<<<<<<<<<
 *             self.iIndex += 1
 *             self._i_plain_fields_length += 1 # add new plain field.
 */
    __pyx_v_tCol.m_bIndexed = 1;

    /* "py_csft.pyx":315
 *             tCol.m_iIndex = self.iIndex
 *             tCol.m_bIndexed = True
 *             self.iIndex += 1             # <<<<<<<<<<<<<<
 *             self._i_plain_fields_length += 1 # add new plain field.
 * 
 */
    __pyx_v_self->iIndex = (__pyx_v_self->iIndex + 1);

    /* "py_csft.pyx":316
 *             tCol.m_bIndexed = True
 *             self.iIndex += 1
 *             self._i_plain_fields_length += 1 # add new plain field.             # <<<<<<<<<<<<<<
 * 
 *             return addFieldColumn(self._schema, tCol)
 */
    __pyx_v_self->_i_plain_fields_length = (__pyx_v_self->_i_plain_fields_length + 1);

    /* "py_csft.pyx":318
 *             self._i_plain_fields_length += 1 # add new plain field.
 * 
 *             return addFieldColumn(self._schema, tCol)             # <<<<<<<<<<<<<<
 *         else:
 *             # TODO: add new field to a list, and add to m_dFields...
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(addFieldColumn(__pyx_v_self->_schema, __pyx_v_tCol)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "py_csft.pyx":321
 *         else:
 *             # TODO: add new field to a list, and add to m_dFields...
 *             self._join_fields.append(sName)             # <<<<<<<<<<<<<<
 *             return getSchemaFieldCount(self._schema) + len(self._join_fields) -1
 * 
 */
    if (unlikely(__pyx_v_self->_join_fields == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_sName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_self->_join_fields, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "py_csft.pyx":322
 *             # TODO: add new field to a list, and add to m_dFields...
 *             self._join_fields.append(sName)
 *             return getSchemaFieldCount(self._schema) + len(self._join_fields) -1             # <<<<<<<<<<<<<<
 * 
 *     cpdef int fieldsBaseCount(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_v_self->_join_fields;
    __Pyx_INCREF(__pyx_t_1);
    if (unlikely(__pyx_t_1 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_8 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyInt_FromSsize_t(((getSchemaFieldCount(__pyx_v_self->_schema) + __pyx_t_8) - 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "py_csft.pyx":305
 *         return tCol.m_iIndex
 * 
 *     cpdef addField(self, const char* sName, bool bJoin=False):             # <<<<<<<<<<<<<<
 *         """
 *              Schema
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("py_csft.PySchemaWrap.addField", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_7addField(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7py_csft_12PySchemaWrap_6addField[] = "\n            \345\220\221 Schema \346\267\273\345\212\240\345\205\250\346\226\207\346\243\200\347\264\242\345\255\227\346\256\265\n        ";
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_7addField(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char const *__pyx_v_sName;
  bool __pyx_v_bJoin;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addField (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sName,&__pyx_n_s_bJoin,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sName)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bJoin);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addField") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_sName = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_sName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_bJoin = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_bJoin == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_bJoin = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addField", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_csft.PySchemaWrap.addField", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7py_csft_12PySchemaWrap_6addField(((struct __pyx_obj_7py_csft_PySchemaWrap *)__pyx_v_self), __pyx_v_sName, __pyx_v_bJoin);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_6addField(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, char const *__pyx_v_sName, bool __pyx_v_bJoin) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_7py_csft_12PySchemaWrap_addField __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addField", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.bJoin = __pyx_v_bJoin;
  __pyx_t_1 = ((struct __pyx_vtabstruct_7py_csft_PySchemaWrap *)__pyx_v_self->__pyx_vtab)->addField(__pyx_v_self, __pyx_v_sName, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySchemaWrap.addField", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":324
 *             return getSchemaFieldCount(self._schema) + len(self._join_fields) -1
 * 
 *     cpdef int fieldsBaseCount(self):             # <<<<<<<<<<<<<<
 *         return self._i_plain_fields_length;
 * 
 */

static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_9fieldsBaseCount(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_7py_csft_12PySchemaWrap_fieldsBaseCount(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fieldsBaseCount", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fieldsBaseCount); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_9fieldsBaseCount)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":325
 * 
 *     cpdef int fieldsBaseCount(self):
 *         return self._i_plain_fields_length;             # <<<<<<<<<<<<<<
 * 
 *     cpdef int fieldsCount(self):
 */
  __pyx_r = __pyx_v_self->_i_plain_fields_length;
  goto __pyx_L0;

  /* "py_csft.pyx":324
 *             return getSchemaFieldCount(self._schema) + len(self._join_fields) -1
 * 
 *     cpdef int fieldsBaseCount(self):             # <<<<<<<<<<<<<<
 *         return self._i_plain_fields_length;
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("py_csft.PySchemaWrap.fieldsBaseCount", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_9fieldsBaseCount(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_9fieldsBaseCount(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fieldsBaseCount (wrapper)", 0);
  __pyx_r = __pyx_pf_7py_csft_12PySchemaWrap_8fieldsBaseCount(((struct __pyx_obj_7py_csft_PySchemaWrap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_8fieldsBaseCount(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fieldsBaseCount", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PySchemaWrap *)__pyx_v_self->__pyx_vtab)->fieldsBaseCount(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySchemaWrap.fieldsBaseCount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":327
 *         return self._i_plain_fields_length;
 * 
 *     cpdef int fieldsCount(self):             # <<<<<<<<<<<<<<
 *         return getSchemaFieldCount(self._schema) + len(self._join_fields) # the total count.
 * 
 */

static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_11fieldsCount(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_7py_csft_12PySchemaWrap_fieldsCount(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fieldsCount", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fieldsCount); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_11fieldsCount)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":328
 * 
 *     cpdef int fieldsCount(self):
 *         return getSchemaFieldCount(self._schema) + len(self._join_fields) # the total count.             # <<<<<<<<<<<<<<
 * 
 *     cpdef int attributeCount(self):
 */
  __pyx_t_1 = __pyx_v_self->_join_fields;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = (getSchemaFieldCount(__pyx_v_self->_schema) + __pyx_t_4);
  goto __pyx_L0;

  /* "py_csft.pyx":327
 *         return self._i_plain_fields_length;
 * 
 *     cpdef int fieldsCount(self):             # <<<<<<<<<<<<<<
 *         return getSchemaFieldCount(self._schema) + len(self._join_fields) # the total count.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("py_csft.PySchemaWrap.fieldsCount", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_11fieldsCount(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_11fieldsCount(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fieldsCount (wrapper)", 0);
  __pyx_r = __pyx_pf_7py_csft_12PySchemaWrap_10fieldsCount(((struct __pyx_obj_7py_csft_PySchemaWrap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_10fieldsCount(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fieldsCount", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PySchemaWrap *)__pyx_v_self->__pyx_vtab)->fieldsCount(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySchemaWrap.fieldsCount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":330
 *         return getSchemaFieldCount(self._schema) + len(self._join_fields) # the total count.
 * 
 *     cpdef int attributeCount(self):             # <<<<<<<<<<<<<<
 *         return self._schema.GetAttrsCount()
 * 
 */

static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_13attributeCount(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_7py_csft_12PySchemaWrap_attributeCount(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("attributeCount", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_attributeCount); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_13attributeCount)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":331
 * 
 *     cpdef int attributeCount(self):
 *         return self._schema.GetAttrsCount()             # <<<<<<<<<<<<<<
 * 
 *     cpdef object fieldsInfo(self, int iIndex):
 */
  __pyx_r = __pyx_v_self->_schema->GetAttrsCount();
  goto __pyx_L0;

  /* "py_csft.pyx":330
 *         return getSchemaFieldCount(self._schema) + len(self._join_fields) # the total count.
 * 
 *     cpdef int attributeCount(self):             # <<<<<<<<<<<<<<
 *         return self._schema.GetAttrsCount()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("py_csft.PySchemaWrap.attributeCount", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_13attributeCount(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_13attributeCount(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attributeCount (wrapper)", 0);
  __pyx_r = __pyx_pf_7py_csft_12PySchemaWrap_12attributeCount(((struct __pyx_obj_7py_csft_PySchemaWrap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_12attributeCount(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("attributeCount", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PySchemaWrap *)__pyx_v_self->__pyx_vtab)->attributeCount(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySchemaWrap.attributeCount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":333
 *         return self._schema.GetAttrsCount()
 * 
 *     cpdef object fieldsInfo(self, int iIndex):             # <<<<<<<<<<<<<<
 *         cdef CSphColumnInfo* tCol
 *         tCol = getSchemaField(self._schema, iIndex)
 */

static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_15fieldsInfo(PyObject *__pyx_v_self, PyObject *__pyx_arg_iIndex); /*proto*/
static PyObject *__pyx_f_7py_csft_12PySchemaWrap_fieldsInfo(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, int __pyx_v_iIndex, int __pyx_skip_dispatch) {
  CSphColumnInfo *__pyx_v_tCol;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fieldsInfo", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fieldsInfo); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_15fieldsInfo)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_iIndex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":335
 *     cpdef object fieldsInfo(self, int iIndex):
 *         cdef CSphColumnInfo* tCol
 *         tCol = getSchemaField(self._schema, iIndex)             # <<<<<<<<<<<<<<
 *         if tCol:
 *             # FIXME: add wordpart info.
 */
  __pyx_v_tCol = getSchemaField(__pyx_v_self->_schema, __pyx_v_iIndex);

  /* "py_csft.pyx":336
 *         cdef CSphColumnInfo* tCol
 *         tCol = getSchemaField(self._schema, iIndex)
 *         if tCol:             # <<<<<<<<<<<<<<
 *             # FIXME: add wordpart info.
 *             return {
 */
  __pyx_t_4 = (__pyx_v_tCol != 0);
  if (__pyx_t_4) {

    /* "py_csft.pyx":338
 *         if tCol:
 *             # FIXME: add wordpart info.
 *             return {             # <<<<<<<<<<<<<<
 *                 "name":tCol.m_sName.cstr(),
 *             }
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);

    /* "py_csft.pyx":339
 *             # FIXME: add wordpart info.
 *             return {
 *                 "name":tCol.m_sName.cstr(),             # <<<<<<<<<<<<<<
 *             }
 *         #FIXME: the join fields.
 */
    __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_tCol->m_sName.cstr()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_name, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "py_csft.pyx":342
 *             }
 *         #FIXME: the join fields.
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     cpdef object attributeInfo(self, int iIndex):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "py_csft.pyx":333
 *         return self._schema.GetAttrsCount()
 * 
 *     cpdef object fieldsInfo(self, int iIndex):             # <<<<<<<<<<<<<<
 *         cdef CSphColumnInfo* tCol
 *         tCol = getSchemaField(self._schema, iIndex)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("py_csft.PySchemaWrap.fieldsInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_15fieldsInfo(PyObject *__pyx_v_self, PyObject *__pyx_arg_iIndex); /*proto*/
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_15fieldsInfo(PyObject *__pyx_v_self, PyObject *__pyx_arg_iIndex) {
  int __pyx_v_iIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fieldsInfo (wrapper)", 0);
  assert(__pyx_arg_iIndex); {
    __pyx_v_iIndex = __Pyx_PyInt_As_int(__pyx_arg_iIndex); if (unlikely((__pyx_v_iIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_csft.PySchemaWrap.fieldsInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7py_csft_12PySchemaWrap_14fieldsInfo(((struct __pyx_obj_7py_csft_PySchemaWrap *)__pyx_v_self), ((int)__pyx_v_iIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_14fieldsInfo(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, int __pyx_v_iIndex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fieldsInfo", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7py_csft_PySchemaWrap *)__pyx_v_self->__pyx_vtab)->fieldsInfo(__pyx_v_self, __pyx_v_iIndex, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySchemaWrap.fieldsInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":344
 *         return None
 * 
 *     cpdef object attributeInfo(self, int iIndex):             # <<<<<<<<<<<<<<
 *         cdef CSphColumnInfo tCol
 *         if iIndex>= 0 and iIndex <= self.attributeCount():
 */

static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_17attributeInfo(PyObject *__pyx_v_self, PyObject *__pyx_arg_iIndex); /*proto*/
static PyObject *__pyx_f_7py_csft_12PySchemaWrap_attributeInfo(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, int __pyx_v_iIndex, int __pyx_skip_dispatch) {
  CSphColumnInfo __pyx_v_tCol;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("attributeInfo", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_attributeInfo); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_17attributeInfo)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_iIndex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":346
 *     cpdef object attributeInfo(self, int iIndex):
 *         cdef CSphColumnInfo tCol
 *         if iIndex>= 0 and iIndex <= self.attributeCount():             # <<<<<<<<<<<<<<
 *             tCol = self._schema.GetAttr(iIndex)
 *             return {
 */
  __pyx_t_4 = ((__pyx_v_iIndex >= 0) != 0);
  if (__pyx_t_4) {
    __pyx_t_5 = ((__pyx_v_iIndex <= ((struct __pyx_vtabstruct_7py_csft_PySchemaWrap *)__pyx_v_self->__pyx_vtab)->attributeCount(__pyx_v_self, 0)) != 0);
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "py_csft.pyx":347
 *         cdef CSphColumnInfo tCol
 *         if iIndex>= 0 and iIndex <= self.attributeCount():
 *             tCol = self._schema.GetAttr(iIndex)             # <<<<<<<<<<<<<<
 *             return {
 *                 "name":tCol.m_sName.cstr(),
 */
    __pyx_v_tCol = __pyx_v_self->_schema->GetAttr(__pyx_v_iIndex);

    /* "py_csft.pyx":348
 *         if iIndex>= 0 and iIndex <= self.attributeCount():
 *             tCol = self._schema.GetAttr(iIndex)
 *             return {             # <<<<<<<<<<<<<<
 *                 "name":tCol.m_sName.cstr(),
 *                 "type":self.sphColumnInfoTypeToString(tCol),
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);

    /* "py_csft.pyx":349
 *             tCol = self._schema.GetAttr(iIndex)
 *             return {
 *                 "name":tCol.m_sName.cstr(),             # <<<<<<<<<<<<<<
 *                 "type":self.sphColumnInfoTypeToString(tCol),
 *                 "index":tCol.m_iIndex,
 */
    __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_tCol.m_sName.cstr()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_name, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "py_csft.pyx":350
 *             return {
 *                 "name":tCol.m_sName.cstr(),
 *                 "type":self.sphColumnInfoTypeToString(tCol),             # <<<<<<<<<<<<<<
 *                 "index":tCol.m_iIndex,
 *                 "bit": getColumnBitCount(tCol)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7py_csft_PySchemaWrap *)__pyx_v_self->__pyx_vtab)->sphColumnInfoTypeToString(__pyx_v_self, __pyx_v_tCol); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_type, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "py_csft.pyx":351
 *                 "name":tCol.m_sName.cstr(),
 *                 "type":self.sphColumnInfoTypeToString(tCol),
 *                 "index":tCol.m_iIndex,             # <<<<<<<<<<<<<<
 *                 "bit": getColumnBitCount(tCol)
 *             }
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_tCol.m_iIndex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_index, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "py_csft.pyx":352
 *                 "type":self.sphColumnInfoTypeToString(tCol),
 *                 "index":tCol.m_iIndex,
 *                 "bit": getColumnBitCount(tCol)             # <<<<<<<<<<<<<<
 *             }
 *         return None
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(getColumnBitCount(__pyx_v_tCol)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_bit, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "py_csft.pyx":354
 *                 "bit": getColumnBitCount(tCol)
 *             }
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     cpdef int   getFieldIndex(self, const char* sKey):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "py_csft.pyx":344
 *         return None
 * 
 *     cpdef object attributeInfo(self, int iIndex):             # <<<<<<<<<<<<<<
 *         cdef CSphColumnInfo tCol
 *         if iIndex>= 0 and iIndex <= self.attributeCount():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("py_csft.PySchemaWrap.attributeInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_17attributeInfo(PyObject *__pyx_v_self, PyObject *__pyx_arg_iIndex); /*proto*/
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_17attributeInfo(PyObject *__pyx_v_self, PyObject *__pyx_arg_iIndex) {
  int __pyx_v_iIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attributeInfo (wrapper)", 0);
  assert(__pyx_arg_iIndex); {
    __pyx_v_iIndex = __Pyx_PyInt_As_int(__pyx_arg_iIndex); if (unlikely((__pyx_v_iIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_csft.PySchemaWrap.attributeInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7py_csft_12PySchemaWrap_16attributeInfo(((struct __pyx_obj_7py_csft_PySchemaWrap *)__pyx_v_self), ((int)__pyx_v_iIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_16attributeInfo(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, int __pyx_v_iIndex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("attributeInfo", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7py_csft_PySchemaWrap *)__pyx_v_self->__pyx_vtab)->attributeInfo(__pyx_v_self, __pyx_v_iIndex, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySchemaWrap.attributeInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":356
 *         return None
 * 
 *     cpdef int   getFieldIndex(self, const char* sKey):             # <<<<<<<<<<<<<<
 *         return self._schema.GetFieldIndex(sKey)
 * 
 */

static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_19getFieldIndex(PyObject *__pyx_v_self, PyObject *__pyx_arg_sKey); /*proto*/
static int __pyx_f_7py_csft_12PySchemaWrap_getFieldIndex(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, char const *__pyx_v_sKey, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFieldIndex", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getFieldIndex); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_19getFieldIndex)) {
      __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_sKey); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":357
 * 
 *     cpdef int   getFieldIndex(self, const char* sKey):
 *         return self._schema.GetFieldIndex(sKey)             # <<<<<<<<<<<<<<
 * 
 *     cpdef int   getAttributeIndex(self, const char* sKey):
 */
  __pyx_r = __pyx_v_self->_schema->GetFieldIndex(__pyx_v_sKey);
  goto __pyx_L0;

  /* "py_csft.pyx":356
 *         return None
 * 
 *     cpdef int   getFieldIndex(self, const char* sKey):             # <<<<<<<<<<<<<<
 *         return self._schema.GetFieldIndex(sKey)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("py_csft.PySchemaWrap.getFieldIndex", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_19getFieldIndex(PyObject *__pyx_v_self, PyObject *__pyx_arg_sKey); /*proto*/
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_19getFieldIndex(PyObject *__pyx_v_self, PyObject *__pyx_arg_sKey) {
  char const *__pyx_v_sKey;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFieldIndex (wrapper)", 0);
  assert(__pyx_arg_sKey); {
    __pyx_v_sKey = __Pyx_PyObject_AsString(__pyx_arg_sKey); if (unlikely((!__pyx_v_sKey) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_csft.PySchemaWrap.getFieldIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7py_csft_12PySchemaWrap_18getFieldIndex(((struct __pyx_obj_7py_csft_PySchemaWrap *)__pyx_v_self), ((char const *)__pyx_v_sKey));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_18getFieldIndex(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, char const *__pyx_v_sKey) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFieldIndex", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PySchemaWrap *)__pyx_v_self->__pyx_vtab)->getFieldIndex(__pyx_v_self, __pyx_v_sKey, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySchemaWrap.getFieldIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":359
 *         return self._schema.GetFieldIndex(sKey)
 * 
 *     cpdef int   getAttributeIndex(self, const char* sKey):             # <<<<<<<<<<<<<<
 *         return self._schema.GetAttrIndex(sKey)
 * 
 */

static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_21getAttributeIndex(PyObject *__pyx_v_self, PyObject *__pyx_arg_sKey); /*proto*/
static int __pyx_f_7py_csft_12PySchemaWrap_getAttributeIndex(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, char const *__pyx_v_sKey, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getAttributeIndex", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getAttributeIndex); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_21getAttributeIndex)) {
      __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_sKey); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":360
 * 
 *     cpdef int   getAttributeIndex(self, const char* sKey):
 *         return self._schema.GetAttrIndex(sKey)             # <<<<<<<<<<<<<<
 * 
 * cdef class PyDocInfo(object):
 */
  __pyx_r = __pyx_v_self->_schema->GetAttrIndex(__pyx_v_sKey);
  goto __pyx_L0;

  /* "py_csft.pyx":359
 *         return self._schema.GetFieldIndex(sKey)
 * 
 *     cpdef int   getAttributeIndex(self, const char* sKey):             # <<<<<<<<<<<<<<
 *         return self._schema.GetAttrIndex(sKey)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("py_csft.PySchemaWrap.getAttributeIndex", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_21getAttributeIndex(PyObject *__pyx_v_self, PyObject *__pyx_arg_sKey); /*proto*/
static PyObject *__pyx_pw_7py_csft_12PySchemaWrap_21getAttributeIndex(PyObject *__pyx_v_self, PyObject *__pyx_arg_sKey) {
  char const *__pyx_v_sKey;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAttributeIndex (wrapper)", 0);
  assert(__pyx_arg_sKey); {
    __pyx_v_sKey = __Pyx_PyObject_AsString(__pyx_arg_sKey); if (unlikely((!__pyx_v_sKey) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_csft.PySchemaWrap.getAttributeIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7py_csft_12PySchemaWrap_20getAttributeIndex(((struct __pyx_obj_7py_csft_PySchemaWrap *)__pyx_v_self), ((char const *)__pyx_v_sKey));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySchemaWrap_20getAttributeIndex(struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_self, char const *__pyx_v_sKey) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getAttributeIndex", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PySchemaWrap *)__pyx_v_self->__pyx_vtab)->getAttributeIndex(__pyx_v_self, __pyx_v_sKey, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySchemaWrap.getAttributeIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":370
 *     cdef int _iFieldCount
 * 
 *     cdef void bind(self, CSphSource_Python2* pSource, CSphMatch* docInfo):             # <<<<<<<<<<<<<<
 *         self._docInfo.bind(<CSphSource *>pSource, docInfo)
 *         self._iAttrCount = self._docInfo.getAttrCount()
 */

static void __pyx_f_7py_csft_9PyDocInfo_bind(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, CSphSource_Python2 *__pyx_v_pSource, CSphMatch *__pyx_v_docInfo) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bind", 0);

  /* "py_csft.pyx":371
 * 
 *     cdef void bind(self, CSphSource_Python2* pSource, CSphMatch* docInfo):
 *         self._docInfo.bind(<CSphSource *>pSource, docInfo)             # <<<<<<<<<<<<<<
 *         self._iAttrCount = self._docInfo.getAttrCount()
 *         self._iFieldCount = self._docInfo.getFieldCount()
 */
  __pyx_v_self->_docInfo.bind(((CSphSource *)__pyx_v_pSource), __pyx_v_docInfo);

  /* "py_csft.pyx":372
 *     cdef void bind(self, CSphSource_Python2* pSource, CSphMatch* docInfo):
 *         self._docInfo.bind(<CSphSource *>pSource, docInfo)
 *         self._iAttrCount = self._docInfo.getAttrCount()             # <<<<<<<<<<<<<<
 *         self._iFieldCount = self._docInfo.getFieldCount()
 * 
 */
  __pyx_v_self->_iAttrCount = __pyx_v_self->_docInfo.getAttrCount();

  /* "py_csft.pyx":373
 *         self._docInfo.bind(<CSphSource *>pSource, docInfo)
 *         self._iAttrCount = self._docInfo.getAttrCount()
 *         self._iFieldCount = self._docInfo.getFieldCount()             # <<<<<<<<<<<<<<
 * 
 *     cpdef setDocID(self, uint64_t id):
 */
  __pyx_v_self->_iFieldCount = __pyx_v_self->_docInfo.getFieldCount();

  /* "py_csft.pyx":370
 *     cdef int _iFieldCount
 * 
 *     cdef void bind(self, CSphSource_Python2* pSource, CSphMatch* docInfo):             # <<<<<<<<<<<<<<
 *         self._docInfo.bind(<CSphSource *>pSource, docInfo)
 *         self._iAttrCount = self._docInfo.getAttrCount()
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "py_csft.pyx":375
 *         self._iFieldCount = self._docInfo.getFieldCount()
 * 
 *     cpdef setDocID(self, uint64_t id):             # <<<<<<<<<<<<<<
 *         self._docInfo.setDocID(id)
 * 
 */

static PyObject *__pyx_pw_7py_csft_9PyDocInfo_1setDocID(PyObject *__pyx_v_self, PyObject *__pyx_arg_id); /*proto*/
static PyObject *__pyx_f_7py_csft_9PyDocInfo_setDocID(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, uint64_t __pyx_v_id, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setDocID", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setDocID); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_1setDocID)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_v_id); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":376
 * 
 *     cpdef setDocID(self, uint64_t id):
 *         self._docInfo.setDocID(id)             # <<<<<<<<<<<<<<
 * 
 *     cpdef uint64_t getDocID(self):
 */
  __pyx_v_self->_docInfo.setDocID(__pyx_v_id);

  /* "py_csft.pyx":375
 *         self._iFieldCount = self._docInfo.getFieldCount()
 * 
 *     cpdef setDocID(self, uint64_t id):             # <<<<<<<<<<<<<<
 *         self._docInfo.setDocID(id)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("py_csft.PyDocInfo.setDocID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_1setDocID(PyObject *__pyx_v_self, PyObject *__pyx_arg_id); /*proto*/
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_1setDocID(PyObject *__pyx_v_self, PyObject *__pyx_arg_id) {
  uint64_t __pyx_v_id;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDocID (wrapper)", 0);
  assert(__pyx_arg_id); {
    __pyx_v_id = __Pyx_PyInt_As_uint64_t(__pyx_arg_id); if (unlikely((__pyx_v_id == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_csft.PyDocInfo.setDocID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7py_csft_9PyDocInfo_setDocID(((struct __pyx_obj_7py_csft_PyDocInfo *)__pyx_v_self), ((uint64_t)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_9PyDocInfo_setDocID(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, uint64_t __pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setDocID", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7py_csft_PyDocInfo *)__pyx_v_self->__pyx_vtab)->setDocID(__pyx_v_self, __pyx_v_id, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PyDocInfo.setDocID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":378
 *         self._docInfo.setDocID(id)
 * 
 *     cpdef uint64_t getDocID(self):             # <<<<<<<<<<<<<<
 *         return self._docInfo.getDocID()
 * 
 */

static PyObject *__pyx_pw_7py_csft_9PyDocInfo_3getDocID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static uint64_t __pyx_f_7py_csft_9PyDocInfo_getDocID(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_skip_dispatch) {
  uint64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  uint64_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDocID", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getDocID); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_3getDocID)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":379
 * 
 *     cpdef uint64_t getDocID(self):
 *         return self._docInfo.getDocID()             # <<<<<<<<<<<<<<
 * 
 *     cpdef int setAttr(self, int iIndex, SphAttr_t v):
 */
  __pyx_r = __pyx_v_self->_docInfo.getDocID();
  goto __pyx_L0;

  /* "py_csft.pyx":378
 *         self._docInfo.setDocID(id)
 * 
 *     cpdef uint64_t getDocID(self):             # <<<<<<<<<<<<<<
 *         return self._docInfo.getDocID()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("py_csft.PyDocInfo.getDocID", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_3getDocID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_3getDocID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDocID (wrapper)", 0);
  __pyx_r = __pyx_pf_7py_csft_9PyDocInfo_2getDocID(((struct __pyx_obj_7py_csft_PyDocInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_9PyDocInfo_2getDocID(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDocID", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(((struct __pyx_vtabstruct_7py_csft_PyDocInfo *)__pyx_v_self->__pyx_vtab)->getDocID(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PyDocInfo.getDocID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":381
 *         return self._docInfo.getDocID()
 * 
 *     cpdef int setAttr(self, int iIndex, SphAttr_t v):             # <<<<<<<<<<<<<<
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 *         self._docInfo.setAttr(iIndex, v)
 */

static PyObject *__pyx_pw_7py_csft_9PyDocInfo_5setAttr(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_7py_csft_9PyDocInfo_setAttr(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, SphAttr_t __pyx_v_v, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAttr", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setAttr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_5setAttr)) {
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_iIndex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)__pyx_v_v));
      PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_v));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_v));
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":382
 * 
 *     cpdef int setAttr(self, int iIndex, SphAttr_t v):
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()             # <<<<<<<<<<<<<<
 *         self._docInfo.setAttr(iIndex, v)
 *         return 0
 */
  __pyx_t_5 = ((__pyx_v_iIndex < 0) != 0);
  if (!__pyx_t_5) {
    __pyx_t_6 = ((__pyx_v_iIndex >= __pyx_v_self->_iAttrCount) != 0);
    __pyx_t_7 = __pyx_t_6;
  } else {
    __pyx_t_7 = __pyx_t_5;
  }
  if (__pyx_t_7) {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "py_csft.pyx":383
 *     cpdef int setAttr(self, int iIndex, SphAttr_t v):
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 *         self._docInfo.setAttr(iIndex, v)             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  __pyx_v_self->_docInfo.setAttr(__pyx_v_iIndex, __pyx_v_v);

  /* "py_csft.pyx":384
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 *         self._docInfo.setAttr(iIndex, v)
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cpdef int setAttrFloat(self, int iIndex, float v):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "py_csft.pyx":381
 *         return self._docInfo.getDocID()
 * 
 *     cpdef int setAttr(self, int iIndex, SphAttr_t v):             # <<<<<<<<<<<<<<
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 *         self._docInfo.setAttr(iIndex, v)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("py_csft.PyDocInfo.setAttr", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_5setAttr(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_5setAttr(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_iIndex;
  SphAttr_t __pyx_v_v = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAttr (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iIndex,&__pyx_n_s_v,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAttr", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAttr") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_iIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_iIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_v = ((SphAttr_t)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAttr", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_csft.PyDocInfo.setAttr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7py_csft_9PyDocInfo_4setAttr(((struct __pyx_obj_7py_csft_PyDocInfo *)__pyx_v_self), __pyx_v_iIndex, __pyx_v_v);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_9PyDocInfo_4setAttr(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, SphAttr_t __pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAttr", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PyDocInfo *)__pyx_v_self->__pyx_vtab)->setAttr(__pyx_v_self, __pyx_v_iIndex, __pyx_v_v, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PyDocInfo.setAttr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":386
 *         return 0
 * 
 *     cpdef int setAttrFloat(self, int iIndex, float v):             # <<<<<<<<<<<<<<
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 *         self._docInfo.setAttrFloat(iIndex, v)
 */

static PyObject *__pyx_pw_7py_csft_9PyDocInfo_7setAttrFloat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_7py_csft_9PyDocInfo_setAttrFloat(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, float __pyx_v_v, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAttrFloat", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setAttrFloat); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_7setAttrFloat)) {
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_iIndex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_v); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":387
 * 
 *     cpdef int setAttrFloat(self, int iIndex, float v):
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()             # <<<<<<<<<<<<<<
 *         self._docInfo.setAttrFloat(iIndex, v)
 *         return 0
 */
  __pyx_t_6 = ((__pyx_v_iIndex < 0) != 0);
  if (!__pyx_t_6) {
    __pyx_t_7 = ((__pyx_v_iIndex >= __pyx_v_self->_iAttrCount) != 0);
    __pyx_t_8 = __pyx_t_7;
  } else {
    __pyx_t_8 = __pyx_t_6;
  }
  if (__pyx_t_8) {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "py_csft.pyx":388
 *     cpdef int setAttrFloat(self, int iIndex, float v):
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 *         self._docInfo.setAttrFloat(iIndex, v)             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  __pyx_v_self->_docInfo.setAttrFloat(__pyx_v_iIndex, __pyx_v_v);

  /* "py_csft.pyx":389
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 *         self._docInfo.setAttrFloat(iIndex, v)
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cpdef int setAttrInt64(self, int iIndex, int64_t v):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "py_csft.pyx":386
 *         return 0
 * 
 *     cpdef int setAttrFloat(self, int iIndex, float v):             # <<<<<<<<<<<<<<
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 *         self._docInfo.setAttrFloat(iIndex, v)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("py_csft.PyDocInfo.setAttrFloat", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_7setAttrFloat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_7setAttrFloat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_iIndex;
  float __pyx_v_v;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAttrFloat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iIndex,&__pyx_n_s_v,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAttrFloat", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAttrFloat") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_iIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_iIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_v = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_v == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAttrFloat", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_csft.PyDocInfo.setAttrFloat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7py_csft_9PyDocInfo_6setAttrFloat(((struct __pyx_obj_7py_csft_PyDocInfo *)__pyx_v_self), __pyx_v_iIndex, __pyx_v_v);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_9PyDocInfo_6setAttrFloat(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, float __pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAttrFloat", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PyDocInfo *)__pyx_v_self->__pyx_vtab)->setAttrFloat(__pyx_v_self, __pyx_v_iIndex, __pyx_v_v, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PyDocInfo.setAttrFloat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":391
 *         return 0
 * 
 *     cpdef int setAttrInt64(self, int iIndex, int64_t v):             # <<<<<<<<<<<<<<
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 *         self._docInfo.setAttrInt64(iIndex, v)
 */

static PyObject *__pyx_pw_7py_csft_9PyDocInfo_9setAttrInt64(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_7py_csft_9PyDocInfo_setAttrInt64(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, int64_t __pyx_v_v, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAttrInt64", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setAttrInt64); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_9setAttrInt64)) {
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_iIndex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_v); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":392
 * 
 *     cpdef int setAttrInt64(self, int iIndex, int64_t v):
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()             # <<<<<<<<<<<<<<
 *         self._docInfo.setAttrInt64(iIndex, v)
 *         return 0
 */
  __pyx_t_6 = ((__pyx_v_iIndex < 0) != 0);
  if (!__pyx_t_6) {
    __pyx_t_7 = ((__pyx_v_iIndex >= __pyx_v_self->_iAttrCount) != 0);
    __pyx_t_8 = __pyx_t_7;
  } else {
    __pyx_t_8 = __pyx_t_6;
  }
  if (__pyx_t_8) {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "py_csft.pyx":393
 *     cpdef int setAttrInt64(self, int iIndex, int64_t v):
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 *         self._docInfo.setAttrInt64(iIndex, v)             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  __pyx_v_self->_docInfo.setAttrInt64(__pyx_v_iIndex, __pyx_v_v);

  /* "py_csft.pyx":394
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 *         self._docInfo.setAttrInt64(iIndex, v)
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cpdef int setAttrTimestamp(self, int iIndex, int64_t dVal):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "py_csft.pyx":391
 *         return 0
 * 
 *     cpdef int setAttrInt64(self, int iIndex, int64_t v):             # <<<<<<<<<<<<<<
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 *         self._docInfo.setAttrInt64(iIndex, v)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("py_csft.PyDocInfo.setAttrInt64", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_9setAttrInt64(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_9setAttrInt64(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_iIndex;
  int64_t __pyx_v_v;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAttrInt64 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iIndex,&__pyx_n_s_v,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAttrInt64", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAttrInt64") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_iIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_iIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_v = __Pyx_PyInt_As_int64_t(values[1]); if (unlikely((__pyx_v_v == (int64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAttrInt64", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_csft.PyDocInfo.setAttrInt64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7py_csft_9PyDocInfo_8setAttrInt64(((struct __pyx_obj_7py_csft_PyDocInfo *)__pyx_v_self), __pyx_v_iIndex, __pyx_v_v);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_9PyDocInfo_8setAttrInt64(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, int64_t __pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAttrInt64", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PyDocInfo *)__pyx_v_self->__pyx_vtab)->setAttrInt64(__pyx_v_self, __pyx_v_iIndex, __pyx_v_v, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PyDocInfo.setAttrInt64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":396
 *         return 0
 * 
 *     cpdef int setAttrTimestamp(self, int iIndex, int64_t dVal):             # <<<<<<<<<<<<<<
 *         cdef int64_t v
 *         #print iIndex, self._iAttrCount, dVal, self._docInfo.getAttrCount()
 */

static PyObject *__pyx_pw_7py_csft_9PyDocInfo_11setAttrTimestamp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_7py_csft_9PyDocInfo_setAttrTimestamp(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, int64_t __pyx_v_dVal, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAttrTimestamp", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setAttrTimestamp); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_11setAttrTimestamp)) {
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_iIndex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_v_dVal); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":399
 *         cdef int64_t v
 *         #print iIndex, self._iAttrCount, dVal, self._docInfo.getAttrCount()
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()             # <<<<<<<<<<<<<<
 *         #Python is returning the time since the epoch in seconds. Javascript takes the time in milliseconds.
 *         self._docInfo.setAttrInt64(iIndex, dVal)
 */
  __pyx_t_6 = ((__pyx_v_iIndex < 0) != 0);
  if (!__pyx_t_6) {
    __pyx_t_7 = ((__pyx_v_iIndex >= __pyx_v_self->_iAttrCount) != 0);
    __pyx_t_8 = __pyx_t_7;
  } else {
    __pyx_t_8 = __pyx_t_6;
  }
  if (__pyx_t_8) {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "py_csft.pyx":401
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 *         #Python is returning the time since the epoch in seconds. Javascript takes the time in milliseconds.
 *         self._docInfo.setAttrInt64(iIndex, dVal)             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  __pyx_v_self->_docInfo.setAttrInt64(__pyx_v_iIndex, __pyx_v_dVal);

  /* "py_csft.pyx":402
 *         #Python is returning the time since the epoch in seconds. Javascript takes the time in milliseconds.
 *         self._docInfo.setAttrInt64(iIndex, dVal)
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cpdef int setAttrMulti(self, int iIndex, list values, bool bValue64 = False):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "py_csft.pyx":396
 *         return 0
 * 
 *     cpdef int setAttrTimestamp(self, int iIndex, int64_t dVal):             # <<<<<<<<<<<<<<
 *         cdef int64_t v
 *         #print iIndex, self._iAttrCount, dVal, self._docInfo.getAttrCount()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("py_csft.PyDocInfo.setAttrTimestamp", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_11setAttrTimestamp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_11setAttrTimestamp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_iIndex;
  int64_t __pyx_v_dVal;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAttrTimestamp (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iIndex,&__pyx_n_s_dVal,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dVal)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAttrTimestamp", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAttrTimestamp") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_iIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_iIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_dVal = __Pyx_PyInt_As_int64_t(values[1]); if (unlikely((__pyx_v_dVal == (int64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAttrTimestamp", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_csft.PyDocInfo.setAttrTimestamp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7py_csft_9PyDocInfo_10setAttrTimestamp(((struct __pyx_obj_7py_csft_PyDocInfo *)__pyx_v_self), __pyx_v_iIndex, __pyx_v_dVal);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_9PyDocInfo_10setAttrTimestamp(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, int64_t __pyx_v_dVal) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAttrTimestamp", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PyDocInfo *)__pyx_v_self->__pyx_vtab)->setAttrTimestamp(__pyx_v_self, __pyx_v_iIndex, __pyx_v_dVal, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PyDocInfo.setAttrTimestamp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":404
 *         return 0
 * 
 *     cpdef int setAttrMulti(self, int iIndex, list values, bool bValue64 = False):             # <<<<<<<<<<<<<<
 *         cdef vector[int64_t] vect
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 */

static PyObject *__pyx_pw_7py_csft_9PyDocInfo_13setAttrMulti(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_7py_csft_9PyDocInfo_setAttrMulti(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, PyObject *__pyx_v_values, int __pyx_skip_dispatch, struct __pyx_opt_args_7py_csft_9PyDocInfo_setAttrMulti *__pyx_optional_args) {
  bool __pyx_v_bValue64 = ((bool)0);
  std::vector<int64_t> __pyx_v_vect;
  PyObject *__pyx_v_v = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int64_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAttrMulti", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_bValue64 = __pyx_optional_args->bValue64;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setAttrMulti); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_13setAttrMulti)) {
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_iIndex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_bValue64); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_values);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_values);
      __Pyx_GIVEREF(__pyx_v_values);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":406
 *     cpdef int setAttrMulti(self, int iIndex, list values, bool bValue64 = False):
 *         cdef vector[int64_t] vect
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()             # <<<<<<<<<<<<<<
 *         vect.reserve(1024)
 *         for v in values:
 */
  __pyx_t_6 = ((__pyx_v_iIndex < 0) != 0);
  if (!__pyx_t_6) {
    __pyx_t_7 = ((__pyx_v_iIndex >= __pyx_v_self->_iAttrCount) != 0);
    __pyx_t_8 = __pyx_t_7;
  } else {
    __pyx_t_8 = __pyx_t_6;
  }
  if (__pyx_t_8) {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "py_csft.pyx":407
 *         cdef vector[int64_t] vect
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 *         vect.reserve(1024)             # <<<<<<<<<<<<<<
 *         for v in values:
 *             vect.push_back(v)
 */
  __pyx_v_vect.reserve(1024);

  /* "py_csft.pyx":408
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 *         vect.reserve(1024)
 *         for v in values:             # <<<<<<<<<<<<<<
 *             vect.push_back(v)
 *         self._docInfo.pushMva(iIndex, vect, bValue64)
 */
  if (unlikely(__pyx_v_values == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_values; __Pyx_INCREF(__pyx_t_1); __pyx_t_9 = 0;
  for (;;) {
    if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_3); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "py_csft.pyx":409
 *         vect.reserve(1024)
 *         for v in values:
 *             vect.push_back(v)             # <<<<<<<<<<<<<<
 *         self._docInfo.pushMva(iIndex, vect, bValue64)
 *         return len(values)
 */
    __pyx_t_10 = __Pyx_PyInt_As_int64_t(__pyx_v_v); if (unlikely((__pyx_t_10 == (int64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_vect.push_back(__pyx_t_10);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "py_csft.pyx":410
 *         for v in values:
 *             vect.push_back(v)
 *         self._docInfo.pushMva(iIndex, vect, bValue64)             # <<<<<<<<<<<<<<
 *         return len(values)
 * 
 */
  __pyx_v_self->_docInfo.pushMva(__pyx_v_iIndex, __pyx_v_vect, __pyx_v_bValue64);

  /* "py_csft.pyx":411
 *             vect.push_back(v)
 *         self._docInfo.pushMva(iIndex, vect, bValue64)
 *         return len(values)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_values == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_9 = PyList_GET_SIZE(__pyx_v_values); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_9;
  goto __pyx_L0;

  /* "py_csft.pyx":404
 *         return 0
 * 
 *     cpdef int setAttrMulti(self, int iIndex, list values, bool bValue64 = False):             # <<<<<<<<<<<<<<
 *         cdef vector[int64_t] vect
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("py_csft.PyDocInfo.setAttrMulti", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_13setAttrMulti(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_13setAttrMulti(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_iIndex;
  PyObject *__pyx_v_values = 0;
  bool __pyx_v_bValue64;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAttrMulti (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iIndex,&__pyx_n_s_values,&__pyx_n_s_bValue64,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_values)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAttrMulti", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bValue64);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAttrMulti") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_iIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_iIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_values = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_bValue64 = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_bValue64 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_bValue64 = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAttrMulti", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_csft.PyDocInfo.setAttrMulti", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_values), (&PyList_Type), 1, "values", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7py_csft_9PyDocInfo_12setAttrMulti(((struct __pyx_obj_7py_csft_PyDocInfo *)__pyx_v_self), __pyx_v_iIndex, __pyx_v_values, __pyx_v_bValue64);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_9PyDocInfo_12setAttrMulti(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, PyObject *__pyx_v_values, bool __pyx_v_bValue64) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_opt_args_7py_csft_9PyDocInfo_setAttrMulti __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAttrMulti", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.bValue64 = __pyx_v_bValue64;
  __pyx_t_1 = ((struct __pyx_vtabstruct_7py_csft_PyDocInfo *)__pyx_v_self->__pyx_vtab)->setAttrMulti(__pyx_v_self, __pyx_v_iIndex, __pyx_v_values, 1, &__pyx_t_2); 
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("py_csft.PyDocInfo.setAttrMulti", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":414
 * 
 * 
 *     cpdef int setAttrString(self, int iIndex, const char* sVal):             # <<<<<<<<<<<<<<
 *         #printf("got str %s.\n", sVal);
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 */

static PyObject *__pyx_pw_7py_csft_9PyDocInfo_15setAttrString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_7py_csft_9PyDocInfo_setAttrString(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, char const *__pyx_v_sVal, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAttrString", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setAttrString); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_15setAttrString)) {
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_iIndex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_sVal); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":416
 *     cpdef int setAttrString(self, int iIndex, const char* sVal):
 *         #printf("got str %s.\n", sVal);
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()             # <<<<<<<<<<<<<<
 *         self._docInfo.setAttrString(iIndex, sVal)
 *         return 0
 */
  __pyx_t_6 = ((__pyx_v_iIndex < 0) != 0);
  if (!__pyx_t_6) {
    __pyx_t_7 = ((__pyx_v_iIndex >= __pyx_v_self->_iAttrCount) != 0);
    __pyx_t_8 = __pyx_t_7;
  } else {
    __pyx_t_8 = __pyx_t_6;
  }
  if (__pyx_t_8) {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "py_csft.pyx":417
 *         #printf("got str %s.\n", sVal);
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 *         self._docInfo.setAttrString(iIndex, sVal)             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  __pyx_v_self->_docInfo.setAttrString(__pyx_v_iIndex, __pyx_v_sVal);

  /* "py_csft.pyx":418
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 *         self._docInfo.setAttrString(iIndex, sVal)
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cpdef int setField(self, int iIndex, const char* sVal):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "py_csft.pyx":414
 * 
 * 
 *     cpdef int setAttrString(self, int iIndex, const char* sVal):             # <<<<<<<<<<<<<<
 *         #printf("got str %s.\n", sVal);
 *         if iIndex < 0 or iIndex>= self._iAttrCount: raise IndexError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("py_csft.PyDocInfo.setAttrString", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_15setAttrString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_15setAttrString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_iIndex;
  char const *__pyx_v_sVal;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAttrString (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iIndex,&__pyx_n_s_sVal,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sVal)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAttrString", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAttrString") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_iIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_iIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_sVal = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_sVal) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAttrString", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_csft.PyDocInfo.setAttrString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7py_csft_9PyDocInfo_14setAttrString(((struct __pyx_obj_7py_csft_PyDocInfo *)__pyx_v_self), __pyx_v_iIndex, __pyx_v_sVal);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_9PyDocInfo_14setAttrString(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, char const *__pyx_v_sVal) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAttrString", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PyDocInfo *)__pyx_v_self->__pyx_vtab)->setAttrString(__pyx_v_self, __pyx_v_iIndex, __pyx_v_sVal, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PyDocInfo.setAttrString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":420
 *         return 0
 * 
 *     cpdef int setField(self, int iIndex, const char* sVal):             # <<<<<<<<<<<<<<
 *         if iIndex < 0 or iIndex>= self._iFieldCount: raise IndexError()
 *         self._docInfo.setField(iIndex, sVal)
 */

static PyObject *__pyx_pw_7py_csft_9PyDocInfo_17setField(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_7py_csft_9PyDocInfo_setField(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, char const *__pyx_v_sVal, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setField", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setField); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_17setField)) {
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_iIndex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_sVal); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":421
 * 
 *     cpdef int setField(self, int iIndex, const char* sVal):
 *         if iIndex < 0 or iIndex>= self._iFieldCount: raise IndexError()             # <<<<<<<<<<<<<<
 *         self._docInfo.setField(iIndex, sVal)
 *         return 0
 */
  __pyx_t_6 = ((__pyx_v_iIndex < 0) != 0);
  if (!__pyx_t_6) {
    __pyx_t_7 = ((__pyx_v_iIndex >= __pyx_v_self->_iFieldCount) != 0);
    __pyx_t_8 = __pyx_t_7;
  } else {
    __pyx_t_8 = __pyx_t_6;
  }
  if (__pyx_t_8) {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "py_csft.pyx":422
 *     cpdef int setField(self, int iIndex, const char* sVal):
 *         if iIndex < 0 or iIndex>= self._iFieldCount: raise IndexError()
 *         self._docInfo.setField(iIndex, sVal)             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  __pyx_v_self->_docInfo.setField(__pyx_v_iIndex, __pyx_v_sVal);

  /* "py_csft.pyx":423
 *         if iIndex < 0 or iIndex>= self._iFieldCount: raise IndexError()
 *         self._docInfo.setField(iIndex, sVal)
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cpdef uint64_t getLastDocID(self): #FIXME: larger this when docid lager than 64bit.
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "py_csft.pyx":420
 *         return 0
 * 
 *     cpdef int setField(self, int iIndex, const char* sVal):             # <<<<<<<<<<<<<<
 *         if iIndex < 0 or iIndex>= self._iFieldCount: raise IndexError()
 *         self._docInfo.setField(iIndex, sVal)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("py_csft.PyDocInfo.setField", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_17setField(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_17setField(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_iIndex;
  char const *__pyx_v_sVal;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setField (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iIndex,&__pyx_n_s_sVal,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iIndex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sVal)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setField", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setField") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_iIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_iIndex == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_sVal = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_sVal) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setField", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_csft.PyDocInfo.setField", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7py_csft_9PyDocInfo_16setField(((struct __pyx_obj_7py_csft_PyDocInfo *)__pyx_v_self), __pyx_v_iIndex, __pyx_v_sVal);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_9PyDocInfo_16setField(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_v_iIndex, char const *__pyx_v_sVal) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setField", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PyDocInfo *)__pyx_v_self->__pyx_vtab)->setField(__pyx_v_self, __pyx_v_iIndex, __pyx_v_sVal, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PyDocInfo.setField", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":425
 *         return 0
 * 
 *     cpdef uint64_t getLastDocID(self): #FIXME: larger this when docid lager than 64bit.             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */

static PyObject *__pyx_pw_7py_csft_9PyDocInfo_19getLastDocID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static uint64_t __pyx_f_7py_csft_9PyDocInfo_getLastDocID(CYTHON_UNUSED struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self, int __pyx_skip_dispatch) {
  uint64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  uint64_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getLastDocID", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getLastDocID); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_19getLastDocID)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":426
 * 
 *     cpdef uint64_t getLastDocID(self): #FIXME: larger this when docid lager than 64bit.
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * cdef class PyHitCollector(object):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "py_csft.pyx":425
 *         return 0
 * 
 *     cpdef uint64_t getLastDocID(self): #FIXME: larger this when docid lager than 64bit.             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("py_csft.PyDocInfo.getLastDocID", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_19getLastDocID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7py_csft_9PyDocInfo_19getLastDocID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getLastDocID (wrapper)", 0);
  __pyx_r = __pyx_pf_7py_csft_9PyDocInfo_18getLastDocID(((struct __pyx_obj_7py_csft_PyDocInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_9PyDocInfo_18getLastDocID(struct __pyx_obj_7py_csft_PyDocInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getLastDocID", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(((struct __pyx_vtabstruct_7py_csft_PyDocInfo *)__pyx_v_self->__pyx_vtab)->getLastDocID(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PyDocInfo.getLastDocID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":433
 *     """
 *     cdef ISphHits* _hits
 *     cdef void bind(self, ISphHits* hits):             # <<<<<<<<<<<<<<
 *         self._hits = hits;
 * 
 */

static void __pyx_f_7py_csft_14PyHitCollector_bind(struct __pyx_obj_7py_csft_PyHitCollector *__pyx_v_self, ISphHits *__pyx_v_hits) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bind", 0);

  /* "py_csft.pyx":434
 *     cdef ISphHits* _hits
 *     cdef void bind(self, ISphHits* hits):
 *         self._hits = hits;             # <<<<<<<<<<<<<<
 * 
 *     cpdef uint64_t getPrevDocID(self):
 */
  __pyx_v_self->_hits = __pyx_v_hits;

  /* "py_csft.pyx":433
 *     """
 *     cdef ISphHits* _hits
 *     cdef void bind(self, ISphHits* hits):             # <<<<<<<<<<<<<<
 *         self._hits = hits;
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "py_csft.pyx":436
 *         self._hits = hits;
 * 
 *     cpdef uint64_t getPrevDocID(self):             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */

static PyObject *__pyx_pw_7py_csft_14PyHitCollector_1getPrevDocID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static uint64_t __pyx_f_7py_csft_14PyHitCollector_getPrevDocID(CYTHON_UNUSED struct __pyx_obj_7py_csft_PyHitCollector *__pyx_v_self, int __pyx_skip_dispatch) {
  uint64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  uint64_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPrevDocID", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getPrevDocID); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_14PyHitCollector_1getPrevDocID)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":437
 * 
 *     cpdef uint64_t getPrevDocID(self):
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cpdef uint64_t getDocID(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "py_csft.pyx":436
 *         self._hits = hits;
 * 
 *     cpdef uint64_t getPrevDocID(self):             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("py_csft.PyHitCollector.getPrevDocID", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_14PyHitCollector_1getPrevDocID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7py_csft_14PyHitCollector_1getPrevDocID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPrevDocID (wrapper)", 0);
  __pyx_r = __pyx_pf_7py_csft_14PyHitCollector_getPrevDocID(((struct __pyx_obj_7py_csft_PyHitCollector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_14PyHitCollector_getPrevDocID(struct __pyx_obj_7py_csft_PyHitCollector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPrevDocID", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(((struct __pyx_vtabstruct_7py_csft_PyHitCollector *)__pyx_v_self->__pyx_vtab)->getPrevDocID(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PyHitCollector.getPrevDocID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":439
 *         return 0
 * 
 *     cpdef uint64_t getDocID(self):             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */

static PyObject *__pyx_pw_7py_csft_14PyHitCollector_3getDocID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static uint64_t __pyx_f_7py_csft_14PyHitCollector_getDocID(CYTHON_UNUSED struct __pyx_obj_7py_csft_PyHitCollector *__pyx_v_self, int __pyx_skip_dispatch) {
  uint64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  uint64_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDocID", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getDocID); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_14PyHitCollector_3getDocID)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_uint64_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":440
 * 
 *     cpdef uint64_t getDocID(self):
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "py_csft.pyx":439
 *         return 0
 * 
 *     cpdef uint64_t getDocID(self):             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("py_csft.PyHitCollector.getDocID", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_14PyHitCollector_3getDocID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7py_csft_14PyHitCollector_3getDocID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDocID (wrapper)", 0);
  __pyx_r = __pyx_pf_7py_csft_14PyHitCollector_2getDocID(((struct __pyx_obj_7py_csft_PyHitCollector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_14PyHitCollector_2getDocID(struct __pyx_obj_7py_csft_PyHitCollector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDocID", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(((struct __pyx_vtabstruct_7py_csft_PyHitCollector *)__pyx_v_self->__pyx_vtab)->getDocID(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PyHitCollector.getDocID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":458
 *     cdef int  _killListPos
 * 
 *     def __init__(self, pysrc):             # <<<<<<<<<<<<<<
 *         self._pysource = pysrc
 *         self._docInfo = PyDocInfo()
 */

/* Python wrapper */
static int __pyx_pw_7py_csft_12PySourceWrap_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7py_csft_12PySourceWrap_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pysrc = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pysrc,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pysrc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_pysrc = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_csft.PySourceWrap.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7py_csft_12PySourceWrap___init__(((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_v_self), __pyx_v_pysrc);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7py_csft_12PySourceWrap___init__(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, PyObject *__pyx_v_pysrc) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "py_csft.pyx":459
 * 
 *     def __init__(self, pysrc):
 *         self._pysource = pysrc             # <<<<<<<<<<<<<<
 *         self._docInfo = PyDocInfo()
 *         self._hitCollecotr = PyHitCollector()
 */
  __Pyx_INCREF(__pyx_v_pysrc);
  __Pyx_GIVEREF(__pyx_v_pysrc);
  __Pyx_GOTREF(__pyx_v_self->_pysource);
  __Pyx_DECREF(__pyx_v_self->_pysource);
  __pyx_v_self->_pysource = __pyx_v_pysrc;

  /* "py_csft.pyx":460
 *     def __init__(self, pysrc):
 *         self._pysource = pysrc
 *         self._docInfo = PyDocInfo()             # <<<<<<<<<<<<<<
 *         self._hitCollecotr = PyHitCollector()
 *         self._csrc = NULL
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7py_csft_PyDocInfo)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_docInfo);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_docInfo));
  __pyx_v_self->_docInfo = ((struct __pyx_obj_7py_csft_PyDocInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_csft.pyx":461
 *         self._pysource = pysrc
 *         self._docInfo = PyDocInfo()
 *         self._hitCollecotr = PyHitCollector()             # <<<<<<<<<<<<<<
 *         self._csrc = NULL
 *         self._killList = None
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7py_csft_PyHitCollector)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_hitCollecotr);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_hitCollecotr));
  __pyx_v_self->_hitCollecotr = ((struct __pyx_obj_7py_csft_PyHitCollector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_csft.pyx":462
 *         self._docInfo = PyDocInfo()
 *         self._hitCollecotr = PyHitCollector()
 *         self._csrc = NULL             # <<<<<<<<<<<<<<
 *         self._killList = None
 *         self._killListPos = 0
 */
  __pyx_v_self->_csrc = NULL;

  /* "py_csft.pyx":463
 *         self._hitCollecotr = PyHitCollector()
 *         self._csrc = NULL
 *         self._killList = None             # <<<<<<<<<<<<<<
 *         self._killListPos = 0
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_killList);
  __Pyx_DECREF(__pyx_v_self->_killList);
  __pyx_v_self->_killList = ((PyObject*)Py_None);

  /* "py_csft.pyx":464
 *         self._csrc = NULL
 *         self._killList = None
 *         self._killListPos = 0             # <<<<<<<<<<<<<<
 * 
 *     cdef bindSource(self, CSphSource_Python2* pSource):
 */
  __pyx_v_self->_killListPos = 0;

  /* "py_csft.pyx":458
 *     cdef int  _killListPos
 * 
 *     def __init__(self, pysrc):             # <<<<<<<<<<<<<<
 *         self._pysource = pysrc
 *         self._docInfo = PyDocInfo()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySourceWrap.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":466
 *         self._killListPos = 0
 * 
 *     cdef bindSource(self, CSphSource_Python2* pSource):             # <<<<<<<<<<<<<<
 *         """
 *              DocInfo & HitCollector  DataSource,
 */

static PyObject *__pyx_f_7py_csft_12PySourceWrap_bindSource(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, CSphSource_Python2 *__pyx_v_pSource) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bindSource", 0);

  /* "py_csft.pyx":471
 *                 - do real bind after setup.
 *         """
 *         self._csrc = pSource;             # <<<<<<<<<<<<<<
 *         #printf("cpp source: %p\n", pSource)
 * 
 */
  __pyx_v_self->_csrc = __pyx_v_pSource;

  /* "py_csft.pyx":466
 *         self._killListPos = 0
 * 
 *     cdef bindSource(self, CSphSource_Python2* pSource):             # <<<<<<<<<<<<<<
 *         """
 *              DocInfo & HitCollector  DataSource,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":474
 *         #printf("cpp source: %p\n", pSource)
 * 
 *     cpdef int setup(self, source_conf):             # <<<<<<<<<<<<<<
 *         try:
 *             ret = self._pysource.setup(source_conf)
 */

static PyObject *__pyx_pw_7py_csft_12PySourceWrap_3setup(PyObject *__pyx_v_self, PyObject *__pyx_v_source_conf); /*proto*/
static int __pyx_f_7py_csft_12PySourceWrap_setup(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, PyObject *__pyx_v_source_conf, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_ret = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ex = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setup", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setup); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_3setup)) {
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_source_conf);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_source_conf);
      __Pyx_GIVEREF(__pyx_v_source_conf);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":475
 * 
 *     cpdef int setup(self, source_conf):
 *         try:             # <<<<<<<<<<<<<<
 *             ret = self._pysource.setup(source_conf)
 *             if ret or ret == None:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "py_csft.pyx":476
 *     cpdef int setup(self, source_conf):
 *         try:
 *             ret = self._pysource.setup(source_conf)             # <<<<<<<<<<<<<<
 *             if ret or ret == None:
 *                 #check obj has necessary method.
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_pysource, __pyx_n_s_setup); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_source_conf);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_source_conf);
      __Pyx_GIVEREF(__pyx_v_source_conf);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_ret = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "py_csft.pyx":477
 *         try:
 *             ret = self._pysource.setup(source_conf)
 *             if ret or ret == None:             # <<<<<<<<<<<<<<
 *                 #check obj has necessary method.
 *                 if not attr_callable(self._pysource, 'gather'):
 */
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_ret); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      if (!__pyx_t_8) {
        __pyx_t_2 = PyObject_RichCompare(__pyx_v_ret, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_10 = __pyx_t_9;
      } else {
        __pyx_t_10 = __pyx_t_8;
      }
      if (__pyx_t_10) {

        /* "py_csft.pyx":479
 *             if ret or ret == None:
 *                 #check obj has necessary method.
 *                 if not attr_callable(self._pysource, 'gather'):             # <<<<<<<<<<<<<<
 *                     return -2
 * 
 */
        __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_attr_callable); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_v_self->_pysource);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->_pysource);
        __Pyx_GIVEREF(__pyx_v_self->_pysource);
        __Pyx_INCREF(__pyx_n_s_gather);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_gather);
        __Pyx_GIVEREF(__pyx_n_s_gather);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_8 = ((!__pyx_t_10) != 0);
        if (__pyx_t_8) {

          /* "py_csft.pyx":480
 *                 #check obj has necessary method.
 *                 if not attr_callable(self._pysource, 'gather'):
 *                     return -2             # <<<<<<<<<<<<<<
 * 
 *                 return 0
 */
          __pyx_r = -2;
          goto __pyx_L7_try_return;
        }

        /* "py_csft.pyx":482
 *                     return -2
 * 
 *                 return 0             # <<<<<<<<<<<<<<
 *         except Exception, ex:
 *             traceback.print_exc()
 */
        __pyx_r = 0;
        goto __pyx_L7_try_return;
      }
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "py_csft.pyx":483
 * 
 *                 return 0
 *         except Exception, ex:             # <<<<<<<<<<<<<<
 *             traceback.print_exc()
 *             return -1 # setup failured.
 */
    __pyx_t_4 = PyErr_ExceptionMatches(__pyx_builtin_Exception);
    if (__pyx_t_4) {
      __Pyx_AddTraceback("py_csft.PySourceWrap.setup", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_3, &__pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __pyx_v_ex = __pyx_t_3;

      /* "py_csft.pyx":484
 *                 return 0
 *         except Exception, ex:
 *             traceback.print_exc()             # <<<<<<<<<<<<<<
 *             return -1 # setup failured.
 * 
 */
      __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_print_exc); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "py_csft.pyx":485
 *         except Exception, ex:
 *             traceback.print_exc()
 *             return -1 # setup failured.             # <<<<<<<<<<<<<<
 * 
 *         return -100 # some error happen
 */
      __pyx_r = -1;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L6_except_return;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    __pyx_L10_try_end:;
  }

  /* "py_csft.pyx":487
 *             return -1 # setup failured.
 * 
 *         return -100 # some error happen             # <<<<<<<<<<<<<<
 * 
 *     cpdef int connect(self, schema):
 */
  __pyx_r = -100;
  goto __pyx_L0;

  /* "py_csft.pyx":474
 *         #printf("cpp source: %p\n", pSource)
 * 
 *     cpdef int setup(self, source_conf):             # <<<<<<<<<<<<<<
 *         try:
 *             ret = self._pysource.setup(source_conf)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("py_csft.PySourceWrap.setup", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_ex);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_3setup(PyObject *__pyx_v_self, PyObject *__pyx_v_source_conf); /*proto*/
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_3setup(PyObject *__pyx_v_self, PyObject *__pyx_v_source_conf) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setup (wrapper)", 0);
  __pyx_r = __pyx_pf_7py_csft_12PySourceWrap_2setup(((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_v_self), ((PyObject *)__pyx_v_source_conf));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySourceWrap_2setup(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, PyObject *__pyx_v_source_conf) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setup", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->setup(__pyx_v_self, __pyx_v_source_conf, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySourceWrap.setup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":489
 *         return -100 # some error happen
 * 
 *     cpdef int connect(self, schema):             # <<<<<<<<<<<<<<
 *         # check have the function
 *         if attr_callable(self._pysource, 'connect'):
 */

static PyObject *__pyx_pw_7py_csft_12PySourceWrap_5connect(PyObject *__pyx_v_self, PyObject *__pyx_v_schema); /*proto*/
static int __pyx_f_7py_csft_12PySourceWrap_connect(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, PyObject *__pyx_v_schema, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_ret = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ex = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("connect", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_connect); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_5connect)) {
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_schema);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_schema);
      __Pyx_GIVEREF(__pyx_v_schema);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":491
 *     cpdef int connect(self, schema):
 *         # check have the function
 *         if attr_callable(self._pysource, 'connect'):             # <<<<<<<<<<<<<<
 *             try:
 *                 ret = self._pysource.connect(schema)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_attr_callable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->_pysource);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->_pysource);
  __Pyx_GIVEREF(__pyx_v_self->_pysource);
  __Pyx_INCREF(__pyx_n_s_connect);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_connect);
  __Pyx_GIVEREF(__pyx_n_s_connect);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "py_csft.pyx":492
 *         # check have the function
 *         if attr_callable(self._pysource, 'connect'):
 *             try:             # <<<<<<<<<<<<<<
 *                 ret = self._pysource.connect(schema)
 *                 if ret or ret == None:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      /*try:*/ {

        /* "py_csft.pyx":493
 *         if attr_callable(self._pysource, 'connect'):
 *             try:
 *                 ret = self._pysource.connect(schema)             # <<<<<<<<<<<<<<
 *                 if ret or ret == None:
 *                     #bind source.
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_pysource, __pyx_n_s_connect); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_v_schema);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_schema);
        __Pyx_GIVEREF(__pyx_v_schema);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_ret = __pyx_t_1;
        __pyx_t_1 = 0;

        /* "py_csft.pyx":494
 *             try:
 *                 ret = self._pysource.connect(schema)
 *                 if ret or ret == None:             # <<<<<<<<<<<<<<
 *                     #bind source.
 *                     self._docInfo.bind(self._csrc, &(self._csrc.m_tDocInfo) )
 */
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_ret); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        if (!__pyx_t_5) {
          __pyx_t_1 = PyObject_RichCompare(__pyx_v_ret, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_10 = __pyx_t_9;
        } else {
          __pyx_t_10 = __pyx_t_5;
        }
        if (__pyx_t_10) {

          /* "py_csft.pyx":496
 *                 if ret or ret == None:
 *                     #bind source.
 *                     self._docInfo.bind(self._csrc, &(self._csrc.m_tDocInfo) )             # <<<<<<<<<<<<<<
 *                     self._hitCollecotr.bind(self._csrc.getHits())
 *                     return 0
 */
          ((struct __pyx_vtabstruct_7py_csft_PyDocInfo *)__pyx_v_self->_docInfo->__pyx_vtab)->bind(__pyx_v_self->_docInfo, __pyx_v_self->_csrc, (&__pyx_v_self->_csrc->m_tDocInfo));

          /* "py_csft.pyx":497
 *                     #bind source.
 *                     self._docInfo.bind(self._csrc, &(self._csrc.m_tDocInfo) )
 *                     self._hitCollecotr.bind(self._csrc.getHits())             # <<<<<<<<<<<<<<
 *                     return 0
 *                 else:
 */
          ((struct __pyx_vtabstruct_7py_csft_PyHitCollector *)__pyx_v_self->_hitCollecotr->__pyx_vtab)->bind(__pyx_v_self->_hitCollecotr, __pyx_v_self->_csrc->getHits());

          /* "py_csft.pyx":498
 *                     self._docInfo.bind(self._csrc, &(self._csrc.m_tDocInfo) )
 *                     self._hitCollecotr.bind(self._csrc.getHits())
 *                     return 0             # <<<<<<<<<<<<<<
 *                 else:
 *                     return -2
 */
          __pyx_r = 0;
          goto __pyx_L8_try_return;
        }
        /*else*/ {

          /* "py_csft.pyx":500
 *                     return 0
 *                 else:
 *                     return -2             # <<<<<<<<<<<<<<
 *             except Exception, ex:
 *                 traceback.print_exc()
 */
          __pyx_r = -2;
          goto __pyx_L8_try_return;
        }
      }
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "py_csft.pyx":501
 *                 else:
 *                     return -2
 *             except Exception, ex:             # <<<<<<<<<<<<<<
 *                 traceback.print_exc()
 *                 return -1 # setup failured.
 */
      __pyx_t_4 = PyErr_ExceptionMatches(__pyx_builtin_Exception);
      if (__pyx_t_4) {
        __Pyx_AddTraceback("py_csft.PySourceWrap.connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_3, &__pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_v_ex = __pyx_t_3;

        /* "py_csft.pyx":502
 *                     return -2
 *             except Exception, ex:
 *                 traceback.print_exc()             # <<<<<<<<<<<<<<
 *                 return -1 # setup failured.
 *         return 0 # no such define
 */
        __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_print_exc); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "py_csft.pyx":503
 *             except Exception, ex:
 *                 traceback.print_exc()
 *                 return -1 # setup failured.             # <<<<<<<<<<<<<<
 *         return 0 # no such define
 * 
 */
        __pyx_r = -1;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L7_except_return;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L0;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L0;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_L11_try_end:;
    }
  }

  /* "py_csft.pyx":504
 *                 traceback.print_exc()
 *                 return -1 # setup failured.
 *         return 0 # no such define             # <<<<<<<<<<<<<<
 * 
 *     cpdef int indexFinished(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "py_csft.pyx":489
 *         return -100 # some error happen
 * 
 *     cpdef int connect(self, schema):             # <<<<<<<<<<<<<<
 *         # check have the function
 *         if attr_callable(self._pysource, 'connect'):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("py_csft.PySourceWrap.connect", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_ex);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_5connect(PyObject *__pyx_v_self, PyObject *__pyx_v_schema); /*proto*/
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_5connect(PyObject *__pyx_v_self, PyObject *__pyx_v_schema) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connect (wrapper)", 0);
  __pyx_r = __pyx_pf_7py_csft_12PySourceWrap_4connect(((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_v_self), ((PyObject *)__pyx_v_schema));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySourceWrap_4connect(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, PyObject *__pyx_v_schema) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("connect", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->connect(__pyx_v_self, __pyx_v_schema, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySourceWrap.connect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":506
 *         return 0 # no such define
 * 
 *     cpdef int indexFinished(self):             # <<<<<<<<<<<<<<
 *         # optinal call back.
 *         if attr_callable(self._pysource, 'indexFinished'):
 */

static PyObject *__pyx_pw_7py_csft_12PySourceWrap_7indexFinished(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_7py_csft_12PySourceWrap_indexFinished(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_ret = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ex = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("indexFinished", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_indexFinished); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_7indexFinished)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":508
 *     cpdef int indexFinished(self):
 *         # optinal call back.
 *         if attr_callable(self._pysource, 'indexFinished'):             # <<<<<<<<<<<<<<
 *             try:
 *                 ret = self._pysource.indexFinished()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_attr_callable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->_pysource);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self->_pysource);
  __Pyx_GIVEREF(__pyx_v_self->_pysource);
  __Pyx_INCREF(__pyx_n_s_indexFinished);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_indexFinished);
  __Pyx_GIVEREF(__pyx_n_s_indexFinished);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {

    /* "py_csft.pyx":509
 *         # optinal call back.
 *         if attr_callable(self._pysource, 'indexFinished'):
 *             try:             # <<<<<<<<<<<<<<
 *                 ret = self._pysource.indexFinished()
 *                 if ret or ret == None:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      /*try:*/ {

        /* "py_csft.pyx":510
 *         if attr_callable(self._pysource, 'indexFinished'):
 *             try:
 *                 ret = self._pysource.indexFinished()             # <<<<<<<<<<<<<<
 *                 if ret or ret == None:
 *                     return 0
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_pysource, __pyx_n_s_indexFinished); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_v_ret = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "py_csft.pyx":511
 *             try:
 *                 ret = self._pysource.indexFinished()
 *                 if ret or ret == None:             # <<<<<<<<<<<<<<
 *                     return 0
 *                 else:
 */
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_ret); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        if (!__pyx_t_5) {
          __pyx_t_2 = PyObject_RichCompare(__pyx_v_ret, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_10 = __pyx_t_9;
        } else {
          __pyx_t_10 = __pyx_t_5;
        }
        if (__pyx_t_10) {

          /* "py_csft.pyx":512
 *                 ret = self._pysource.indexFinished()
 *                 if ret or ret == None:
 *                     return 0             # <<<<<<<<<<<<<<
 *                 else:
 *                     return -2
 */
          __pyx_r = 0;
          goto __pyx_L8_try_return;
        }
        /*else*/ {

          /* "py_csft.pyx":514
 *                     return 0
 *                 else:
 *                     return -2             # <<<<<<<<<<<<<<
 *             except Exception, ex:
 *                 traceback.print_exc()
 */
          __pyx_r = -2;
          goto __pyx_L8_try_return;
        }
      }
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "py_csft.pyx":515
 *                 else:
 *                     return -2
 *             except Exception, ex:             # <<<<<<<<<<<<<<
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.
 */
      __pyx_t_3 = PyErr_ExceptionMatches(__pyx_builtin_Exception);
      if (__pyx_t_3) {
        __Pyx_AddTraceback("py_csft.PySourceWrap.indexFinished", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_4, &__pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __pyx_v_ex = __pyx_t_4;

        /* "py_csft.pyx":516
 *                     return -2
 *             except Exception, ex:
 *                 traceback.print_exc()             # <<<<<<<<<<<<<<
 *                 return -1 # some error in python code.
 *         return 0 # no such define
 */
        __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_print_exc); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "py_csft.pyx":517
 *             except Exception, ex:
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.             # <<<<<<<<<<<<<<
 *         return 0 # no such define
 * 
 */
        __pyx_r = -1;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L7_except_return;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L0;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L0;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_L11_try_end:;
    }
  }

  /* "py_csft.pyx":518
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.
 *         return 0 # no such define             # <<<<<<<<<<<<<<
 * 
 *     cpdef int beforeIndex(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "py_csft.pyx":506
 *         return 0 # no such define
 * 
 *     cpdef int indexFinished(self):             # <<<<<<<<<<<<<<
 *         # optinal call back.
 *         if attr_callable(self._pysource, 'indexFinished'):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("py_csft.PySourceWrap.indexFinished", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_ex);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_7indexFinished(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_7indexFinished(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("indexFinished (wrapper)", 0);
  __pyx_r = __pyx_pf_7py_csft_12PySourceWrap_6indexFinished(((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySourceWrap_6indexFinished(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("indexFinished", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->indexFinished(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySourceWrap.indexFinished", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":520
 *         return 0 # no such define
 * 
 *     cpdef int beforeIndex(self):             # <<<<<<<<<<<<<<
 *         # optinal call back.
 *         if attr_callable(self._pysource, 'beforeIndex'):
 */

static PyObject *__pyx_pw_7py_csft_12PySourceWrap_9beforeIndex(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_7py_csft_12PySourceWrap_beforeIndex(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_ret = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ex = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("beforeIndex", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_beforeIndex); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_9beforeIndex)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":522
 *     cpdef int beforeIndex(self):
 *         # optinal call back.
 *         if attr_callable(self._pysource, 'beforeIndex'):             # <<<<<<<<<<<<<<
 *             try:
 *                 ret = self._pysource.beforeIndex()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_attr_callable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->_pysource);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self->_pysource);
  __Pyx_GIVEREF(__pyx_v_self->_pysource);
  __Pyx_INCREF(__pyx_n_s_beforeIndex);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_beforeIndex);
  __Pyx_GIVEREF(__pyx_n_s_beforeIndex);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {

    /* "py_csft.pyx":523
 *         # optinal call back.
 *         if attr_callable(self._pysource, 'beforeIndex'):
 *             try:             # <<<<<<<<<<<<<<
 *                 ret = self._pysource.beforeIndex()
 *                 if ret or ret == None: # treat None as True
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      /*try:*/ {

        /* "py_csft.pyx":524
 *         if attr_callable(self._pysource, 'beforeIndex'):
 *             try:
 *                 ret = self._pysource.beforeIndex()             # <<<<<<<<<<<<<<
 *                 if ret or ret == None: # treat None as True
 *                     return 0
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_pysource, __pyx_n_s_beforeIndex); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_v_ret = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "py_csft.pyx":525
 *             try:
 *                 ret = self._pysource.beforeIndex()
 *                 if ret or ret == None: # treat None as True             # <<<<<<<<<<<<<<
 *                     return 0
 *                 else:
 */
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_ret); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        if (!__pyx_t_5) {
          __pyx_t_2 = PyObject_RichCompare(__pyx_v_ret, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_10 = __pyx_t_9;
        } else {
          __pyx_t_10 = __pyx_t_5;
        }
        if (__pyx_t_10) {

          /* "py_csft.pyx":526
 *                 ret = self._pysource.beforeIndex()
 *                 if ret or ret == None: # treat None as True
 *                     return 0             # <<<<<<<<<<<<<<
 *                 else:
 *                     return -2
 */
          __pyx_r = 0;
          goto __pyx_L8_try_return;
        }
        /*else*/ {

          /* "py_csft.pyx":528
 *                     return 0
 *                 else:
 *                     return -2             # <<<<<<<<<<<<<<
 *             except Exception, ex:
 *                 traceback.print_exc()
 */
          __pyx_r = -2;
          goto __pyx_L8_try_return;
        }
      }
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "py_csft.pyx":529
 *                 else:
 *                     return -2
 *             except Exception, ex:             # <<<<<<<<<<<<<<
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.
 */
      __pyx_t_3 = PyErr_ExceptionMatches(__pyx_builtin_Exception);
      if (__pyx_t_3) {
        __Pyx_AddTraceback("py_csft.PySourceWrap.beforeIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_4, &__pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __pyx_v_ex = __pyx_t_4;

        /* "py_csft.pyx":530
 *                     return -2
 *             except Exception, ex:
 *                 traceback.print_exc()             # <<<<<<<<<<<<<<
 *                 return -1 # some error in python code.
 *         return 0 # no such define
 */
        __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_print_exc); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "py_csft.pyx":531
 *             except Exception, ex:
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.             # <<<<<<<<<<<<<<
 *         return 0 # no such define
 * 
 */
        __pyx_r = -1;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L7_except_return;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L0;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L0;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_L11_try_end:;
    }
  }

  /* "py_csft.pyx":532
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.
 *         return 0 # no such define             # <<<<<<<<<<<<<<
 * 
 *     cpdef int afterIndex(self, bool bNormalExit):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "py_csft.pyx":520
 *         return 0 # no such define
 * 
 *     cpdef int beforeIndex(self):             # <<<<<<<<<<<<<<
 *         # optinal call back.
 *         if attr_callable(self._pysource, 'beforeIndex'):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("py_csft.PySourceWrap.beforeIndex", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_ex);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_9beforeIndex(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_9beforeIndex(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("beforeIndex (wrapper)", 0);
  __pyx_r = __pyx_pf_7py_csft_12PySourceWrap_8beforeIndex(((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySourceWrap_8beforeIndex(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("beforeIndex", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->beforeIndex(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySourceWrap.beforeIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":534
 *         return 0 # no such define
 * 
 *     cpdef int afterIndex(self, bool bNormalExit):             # <<<<<<<<<<<<<<
 *         # optinal call back.
 *         if attr_callable(self._pysource, 'afterIndex'):
 */

static PyObject *__pyx_pw_7py_csft_12PySourceWrap_11afterIndex(PyObject *__pyx_v_self, PyObject *__pyx_arg_bNormalExit); /*proto*/
static int __pyx_f_7py_csft_12PySourceWrap_afterIndex(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, bool __pyx_v_bNormalExit, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_ret = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ex = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("afterIndex", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_afterIndex); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_11afterIndex)) {
      __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_bNormalExit); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":536
 *     cpdef int afterIndex(self, bool bNormalExit):
 *         # optinal call back.
 *         if attr_callable(self._pysource, 'afterIndex'):             # <<<<<<<<<<<<<<
 *             try:
 *                 ret = self._pysource.afterIndex(bNormalExit)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_attr_callable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->_pysource);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self->_pysource);
  __Pyx_GIVEREF(__pyx_v_self->_pysource);
  __Pyx_INCREF(__pyx_n_s_afterIndex);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_afterIndex);
  __Pyx_GIVEREF(__pyx_n_s_afterIndex);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "py_csft.pyx":537
 *         # optinal call back.
 *         if attr_callable(self._pysource, 'afterIndex'):
 *             try:             # <<<<<<<<<<<<<<
 *                 ret = self._pysource.afterIndex(bNormalExit)
 *                 if ret or ret == None:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      /*try:*/ {

        /* "py_csft.pyx":538
 *         if attr_callable(self._pysource, 'afterIndex'):
 *             try:
 *                 ret = self._pysource.afterIndex(bNormalExit)             # <<<<<<<<<<<<<<
 *                 if ret or ret == None:
 *                     return 0
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_pysource, __pyx_n_s_afterIndex); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_bNormalExit); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_v_ret = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "py_csft.pyx":539
 *             try:
 *                 ret = self._pysource.afterIndex(bNormalExit)
 *                 if ret or ret == None:             # <<<<<<<<<<<<<<
 *                     return 0
 *                 else:
 */
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_ret); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        if (!__pyx_t_5) {
          __pyx_t_2 = PyObject_RichCompare(__pyx_v_ret, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_10 = __pyx_t_9;
        } else {
          __pyx_t_10 = __pyx_t_5;
        }
        if (__pyx_t_10) {

          /* "py_csft.pyx":540
 *                 ret = self._pysource.afterIndex(bNormalExit)
 *                 if ret or ret == None:
 *                     return 0             # <<<<<<<<<<<<<<
 *                 else:
 *                     return -2
 */
          __pyx_r = 0;
          goto __pyx_L8_try_return;
        }
        /*else*/ {

          /* "py_csft.pyx":542
 *                     return 0
 *                 else:
 *                     return -2             # <<<<<<<<<<<<<<
 *             except Exception, ex:
 *                 traceback.print_exc()
 */
          __pyx_r = -2;
          goto __pyx_L8_try_return;
        }
      }
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "py_csft.pyx":543
 *                 else:
 *                     return -2
 *             except Exception, ex:             # <<<<<<<<<<<<<<
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.
 */
      __pyx_t_4 = PyErr_ExceptionMatches(__pyx_builtin_Exception);
      if (__pyx_t_4) {
        __Pyx_AddTraceback("py_csft.PySourceWrap.afterIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_ex = __pyx_t_1;

        /* "py_csft.pyx":544
 *                     return -2
 *             except Exception, ex:
 *                 traceback.print_exc()             # <<<<<<<<<<<<<<
 *                 return -1 # some error in python code.
 *         return 0 # no such define
 */
        __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_print_exc); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "py_csft.pyx":545
 *             except Exception, ex:
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.             # <<<<<<<<<<<<<<
 *         return 0 # no such define
 * 
 */
        __pyx_r = -1;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L7_except_return;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L0;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L0;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_L11_try_end:;
    }
  }

  /* "py_csft.pyx":546
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.
 *         return 0 # no such define             # <<<<<<<<<<<<<<
 * 
 *     cpdef int index_finished(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "py_csft.pyx":534
 *         return 0 # no such define
 * 
 *     cpdef int afterIndex(self, bool bNormalExit):             # <<<<<<<<<<<<<<
 *         # optinal call back.
 *         if attr_callable(self._pysource, 'afterIndex'):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("py_csft.PySourceWrap.afterIndex", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_ex);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_11afterIndex(PyObject *__pyx_v_self, PyObject *__pyx_arg_bNormalExit); /*proto*/
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_11afterIndex(PyObject *__pyx_v_self, PyObject *__pyx_arg_bNormalExit) {
  bool __pyx_v_bNormalExit;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("afterIndex (wrapper)", 0);
  assert(__pyx_arg_bNormalExit); {
    __pyx_v_bNormalExit = __Pyx_PyObject_IsTrue(__pyx_arg_bNormalExit); if (unlikely((__pyx_v_bNormalExit == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_csft.PySourceWrap.afterIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7py_csft_12PySourceWrap_10afterIndex(((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_v_self), ((bool)__pyx_v_bNormalExit));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySourceWrap_10afterIndex(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, bool __pyx_v_bNormalExit) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("afterIndex", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->afterIndex(__pyx_v_self, __pyx_v_bNormalExit, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySourceWrap.afterIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":548
 *         return 0 # no such define
 * 
 *     cpdef int index_finished(self):             # <<<<<<<<<<<<<<
 *         if attr_callable(self._pysource, 'indexFinished'):
 *             try:
 */

static PyObject *__pyx_pw_7py_csft_12PySourceWrap_13index_finished(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_7py_csft_12PySourceWrap_index_finished(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_ret = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ex = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("index_finished", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_index_finished); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_13index_finished)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":549
 * 
 *     cpdef int index_finished(self):
 *         if attr_callable(self._pysource, 'indexFinished'):             # <<<<<<<<<<<<<<
 *             try:
 *                 ret = self._pysource.indexFinished()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_attr_callable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->_pysource);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self->_pysource);
  __Pyx_GIVEREF(__pyx_v_self->_pysource);
  __Pyx_INCREF(__pyx_n_s_indexFinished);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_indexFinished);
  __Pyx_GIVEREF(__pyx_n_s_indexFinished);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {

    /* "py_csft.pyx":550
 *     cpdef int index_finished(self):
 *         if attr_callable(self._pysource, 'indexFinished'):
 *             try:             # <<<<<<<<<<<<<<
 *                 ret = self._pysource.indexFinished()
 *                 if ret or ret == None:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      /*try:*/ {

        /* "py_csft.pyx":551
 *         if attr_callable(self._pysource, 'indexFinished'):
 *             try:
 *                 ret = self._pysource.indexFinished()             # <<<<<<<<<<<<<<
 *                 if ret or ret == None:
 *                     return 0
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_pysource, __pyx_n_s_indexFinished); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_v_ret = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "py_csft.pyx":552
 *             try:
 *                 ret = self._pysource.indexFinished()
 *                 if ret or ret == None:             # <<<<<<<<<<<<<<
 *                     return 0
 *                 else:
 */
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_ret); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        if (!__pyx_t_5) {
          __pyx_t_2 = PyObject_RichCompare(__pyx_v_ret, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_10 = __pyx_t_9;
        } else {
          __pyx_t_10 = __pyx_t_5;
        }
        if (__pyx_t_10) {

          /* "py_csft.pyx":553
 *                 ret = self._pysource.indexFinished()
 *                 if ret or ret == None:
 *                     return 0             # <<<<<<<<<<<<<<
 *                 else:
 *                     return -2
 */
          __pyx_r = 0;
          goto __pyx_L8_try_return;
        }
        /*else*/ {

          /* "py_csft.pyx":555
 *                     return 0
 *                 else:
 *                     return -2             # <<<<<<<<<<<<<<
 *             except Exception, ex:
 *                 traceback.print_exc()
 */
          __pyx_r = -2;
          goto __pyx_L8_try_return;
        }
      }
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "py_csft.pyx":556
 *                 else:
 *                     return -2
 *             except Exception, ex:             # <<<<<<<<<<<<<<
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.
 */
      __pyx_t_3 = PyErr_ExceptionMatches(__pyx_builtin_Exception);
      if (__pyx_t_3) {
        __Pyx_AddTraceback("py_csft.PySourceWrap.index_finished", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_4, &__pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __pyx_v_ex = __pyx_t_4;

        /* "py_csft.pyx":557
 *                     return -2
 *             except Exception, ex:
 *                 traceback.print_exc()             # <<<<<<<<<<<<<<
 *                 return -1 # some error in python code.
 *         return 0 # no such define
 */
        __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_print_exc); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "py_csft.pyx":558
 *             except Exception, ex:
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.             # <<<<<<<<<<<<<<
 *         return 0 # no such define
 * 
 */
        __pyx_r = -1;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L7_except_return;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L0;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L0;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_L11_try_end:;
    }
  }

  /* "py_csft.pyx":559
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.
 *         return 0 # no such define             # <<<<<<<<<<<<<<
 * 
 *     cpdef int getJoinField(self, const char* attrName):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "py_csft.pyx":548
 *         return 0 # no such define
 * 
 *     cpdef int index_finished(self):             # <<<<<<<<<<<<<<
 *         if attr_callable(self._pysource, 'indexFinished'):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("py_csft.PySourceWrap.index_finished", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_ex);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_13index_finished(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_13index_finished(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("index_finished (wrapper)", 0);
  __pyx_r = __pyx_pf_7py_csft_12PySourceWrap_12index_finished(((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySourceWrap_12index_finished(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("index_finished", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->index_finished(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySourceWrap.index_finished", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":561
 *         return 0 # no such define
 * 
 *     cpdef int getJoinField(self, const char* attrName):             # <<<<<<<<<<<<<<
 *         # programal optional, if has join field , the method must define.
 *         if attr_callable(self._pysource, 'gatherJoinField'):
 */

static PyObject *__pyx_pw_7py_csft_12PySourceWrap_15getJoinField(PyObject *__pyx_v_self, PyObject *__pyx_arg_attrName); /*proto*/
static int __pyx_f_7py_csft_12PySourceWrap_getJoinField(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, char const *__pyx_v_attrName, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_ret = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ex = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getJoinField", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getJoinField); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_15getJoinField)) {
      __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_attrName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":563
 *     cpdef int getJoinField(self, const char* attrName):
 *         # programal optional, if has join field , the method must define.
 *         if attr_callable(self._pysource, 'gatherJoinField'):             # <<<<<<<<<<<<<<
 *             try:
 *                 ret = self._pysource.gatherJoinField(attrName, self._docInfo, self._hitCollecotr)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_attr_callable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->_pysource);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self->_pysource);
  __Pyx_GIVEREF(__pyx_v_self->_pysource);
  __Pyx_INCREF(__pyx_n_s_gatherJoinField);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_gatherJoinField);
  __Pyx_GIVEREF(__pyx_n_s_gatherJoinField);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "py_csft.pyx":564
 *         # programal optional, if has join field , the method must define.
 *         if attr_callable(self._pysource, 'gatherJoinField'):
 *             try:             # <<<<<<<<<<<<<<
 *                 ret = self._pysource.gatherJoinField(attrName, self._docInfo, self._hitCollecotr)
 *                 if ret or ret == None:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      /*try:*/ {

        /* "py_csft.pyx":565
 *         if attr_callable(self._pysource, 'gatherJoinField'):
 *             try:
 *                 ret = self._pysource.gatherJoinField(attrName, self._docInfo, self._hitCollecotr)             # <<<<<<<<<<<<<<
 *                 if ret or ret == None:
 *                     return 0
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_pysource, __pyx_n_s_gatherJoinField); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_attrName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        __Pyx_INCREF(((PyObject *)__pyx_v_self->_docInfo));
        PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->_docInfo));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_self->_docInfo));
        __Pyx_INCREF(((PyObject *)__pyx_v_self->_hitCollecotr));
        PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_self->_hitCollecotr));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_self->_hitCollecotr));
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_v_ret = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "py_csft.pyx":566
 *             try:
 *                 ret = self._pysource.gatherJoinField(attrName, self._docInfo, self._hitCollecotr)
 *                 if ret or ret == None:             # <<<<<<<<<<<<<<
 *                     return 0
 *             except Exception, ex:
 */
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_ret); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        if (!__pyx_t_5) {
          __pyx_t_2 = PyObject_RichCompare(__pyx_v_ret, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_10 = __pyx_t_9;
        } else {
          __pyx_t_10 = __pyx_t_5;
        }
        if (__pyx_t_10) {

          /* "py_csft.pyx":567
 *                 ret = self._pysource.gatherJoinField(attrName, self._docInfo, self._hitCollecotr)
 *                 if ret or ret == None:
 *                     return 0             # <<<<<<<<<<<<<<
 *             except Exception, ex:
 *                 traceback.print_exc()
 */
          __pyx_r = 0;
          goto __pyx_L8_try_return;
        }
      }
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "py_csft.pyx":568
 *                 if ret or ret == None:
 *                     return 0
 *             except Exception, ex:             # <<<<<<<<<<<<<<
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.
 */
      __pyx_t_4 = PyErr_ExceptionMatches(__pyx_builtin_Exception);
      if (__pyx_t_4) {
        __Pyx_AddTraceback("py_csft.PySourceWrap.getJoinField", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_ex = __pyx_t_1;

        /* "py_csft.pyx":569
 *                     return 0
 *             except Exception, ex:
 *                 traceback.print_exc()             # <<<<<<<<<<<<<<
 *                 return -1 # some error in python code.
 *         return 0
 */
        __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_print_exc); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "py_csft.pyx":570
 *             except Exception, ex:
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
        __pyx_r = -1;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L7_except_return;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L0;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L0;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_L11_try_end:;
    }
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "py_csft.pyx":571
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cpdef getJoinMva(self, const char* attrName):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "py_csft.pyx":561
 *         return 0 # no such define
 * 
 *     cpdef int getJoinField(self, const char* attrName):             # <<<<<<<<<<<<<<
 *         # programal optional, if has join field , the method must define.
 *         if attr_callable(self._pysource, 'gatherJoinField'):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("py_csft.PySourceWrap.getJoinField", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_ex);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_15getJoinField(PyObject *__pyx_v_self, PyObject *__pyx_arg_attrName); /*proto*/
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_15getJoinField(PyObject *__pyx_v_self, PyObject *__pyx_arg_attrName) {
  char const *__pyx_v_attrName;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getJoinField (wrapper)", 0);
  assert(__pyx_arg_attrName); {
    __pyx_v_attrName = __Pyx_PyObject_AsString(__pyx_arg_attrName); if (unlikely((!__pyx_v_attrName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_csft.PySourceWrap.getJoinField", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7py_csft_12PySourceWrap_14getJoinField(((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_v_self), ((char const *)__pyx_v_attrName));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySourceWrap_14getJoinField(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, char const *__pyx_v_attrName) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getJoinField", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->getJoinField(__pyx_v_self, __pyx_v_attrName, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySourceWrap.getJoinField", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":573
 *         return 0
 * 
 *     cpdef getJoinMva(self, const char* attrName):             # <<<<<<<<<<<<<<
 *         # programal optional, if has list-query , the method must define.
 *         if attr_callable(self._pysource, 'getMultiValueAttribute'):
 */

static PyObject *__pyx_pw_7py_csft_12PySourceWrap_17getJoinMva(PyObject *__pyx_v_self, PyObject *__pyx_arg_attrName); /*proto*/
static PyObject *__pyx_f_7py_csft_12PySourceWrap_getJoinMva(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, char const *__pyx_v_attrName, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_ret = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ex = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getJoinMva", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getJoinMva); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_17getJoinMva)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_attrName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":575
 *     cpdef getJoinMva(self, const char* attrName):
 *         # programal optional, if has list-query , the method must define.
 *         if attr_callable(self._pysource, 'getMultiValueAttribute'):             # <<<<<<<<<<<<<<
 *             try:
 *                 ret = self._pysource.getMultiValueAttribute(attrName)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_attr_callable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->_pysource);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self->_pysource);
  __Pyx_GIVEREF(__pyx_v_self->_pysource);
  __Pyx_INCREF(__pyx_n_s_getMultiValueAttribute);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_getMultiValueAttribute);
  __Pyx_GIVEREF(__pyx_n_s_getMultiValueAttribute);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "py_csft.pyx":576
 *         # programal optional, if has list-query , the method must define.
 *         if attr_callable(self._pysource, 'getMultiValueAttribute'):
 *             try:             # <<<<<<<<<<<<<<
 *                 ret = self._pysource.getMultiValueAttribute(attrName)
 *                 if ret:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "py_csft.pyx":577
 *         if attr_callable(self._pysource, 'getMultiValueAttribute'):
 *             try:
 *                 ret = self._pysource.getMultiValueAttribute(attrName)             # <<<<<<<<<<<<<<
 *                 if ret:
 *                     return ret
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_pysource, __pyx_n_s_getMultiValueAttribute); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 577; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_attrName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 577; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 577; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 577; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_v_ret = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "py_csft.pyx":578
 *             try:
 *                 ret = self._pysource.getMultiValueAttribute(attrName)
 *                 if ret:             # <<<<<<<<<<<<<<
 *                     return ret
 *                 else:
 */
        __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_ret); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        if (__pyx_t_4) {

          /* "py_csft.pyx":579
 *                 ret = self._pysource.getMultiValueAttribute(attrName)
 *                 if ret:
 *                     return ret             # <<<<<<<<<<<<<<
 *                 else:
 *                     return (0, 0)
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(__pyx_v_ret);
          __pyx_r = __pyx_v_ret;
          goto __pyx_L8_try_return;
        }
        /*else*/ {

          /* "py_csft.pyx":581
 *                     return ret
 *                 else:
 *                     return (0, 0)             # <<<<<<<<<<<<<<
 *             except Exception, ex:
 *                 traceback.print_exc()
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(__pyx_tuple__4);
          __pyx_r = __pyx_tuple__4;
          goto __pyx_L8_try_return;
        }
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "py_csft.pyx":582
 *                 else:
 *                     return (0, 0)
 *             except Exception, ex:             # <<<<<<<<<<<<<<
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.
 */
      __pyx_t_8 = PyErr_ExceptionMatches(__pyx_builtin_Exception);
      if (__pyx_t_8) {
        __Pyx_AddTraceback("py_csft.PySourceWrap.getJoinMva", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_ex = __pyx_t_1;

        /* "py_csft.pyx":583
 *                     return (0, 0)
 *             except Exception, ex:
 *                 traceback.print_exc()             # <<<<<<<<<<<<<<
 *                 return -1 # some error in python code.
 *         return (0,0) # no such define
 */
        __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_print_exc); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "py_csft.pyx":584
 *             except Exception, ex:
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.             # <<<<<<<<<<<<<<
 *         return (0,0) # no such define
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_int_neg_1);
        __pyx_r = __pyx_int_neg_1;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L7_except_return;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L0;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L0;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      __pyx_L11_try_end:;
    }
  }

  /* "py_csft.pyx":585
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.
 *         return (0,0) # no such define             # <<<<<<<<<<<<<<
 * 
 *     cpdef int next(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple__5);
  __pyx_r = __pyx_tuple__5;
  goto __pyx_L0;

  /* "py_csft.pyx":573
 *         return 0
 * 
 *     cpdef getJoinMva(self, const char* attrName):             # <<<<<<<<<<<<<<
 *         # programal optional, if has list-query , the method must define.
 *         if attr_callable(self._pysource, 'getMultiValueAttribute'):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("py_csft.PySourceWrap.getJoinMva", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_ex);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_17getJoinMva(PyObject *__pyx_v_self, PyObject *__pyx_arg_attrName); /*proto*/
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_17getJoinMva(PyObject *__pyx_v_self, PyObject *__pyx_arg_attrName) {
  char const *__pyx_v_attrName;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getJoinMva (wrapper)", 0);
  assert(__pyx_arg_attrName); {
    __pyx_v_attrName = __Pyx_PyObject_AsString(__pyx_arg_attrName); if (unlikely((!__pyx_v_attrName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("py_csft.PySourceWrap.getJoinMva", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7py_csft_12PySourceWrap_16getJoinMva(((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_v_self), ((char const *)__pyx_v_attrName));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySourceWrap_16getJoinMva(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, char const *__pyx_v_attrName) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getJoinMva", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->getJoinMva(__pyx_v_self, __pyx_v_attrName, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySourceWrap.getJoinMva", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":587
 *         return (0,0) # no such define
 * 
 *     cpdef int next(self):             # <<<<<<<<<<<<<<
 *         # should check this function when binding
 *         try:
 */

static PyObject *__pyx_pw_7py_csft_12PySourceWrap_19next(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_7py_csft_12PySourceWrap_next(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, int __pyx_skip_dispatch) {
  CYTHON_UNUSED PyObject *__pyx_v_ex = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("next", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_next); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_19next)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":589
 *     cpdef int next(self):
 *         # should check this function when binding
 *         try:             # <<<<<<<<<<<<<<
 *             if self._pysource.gather(self._docInfo, self._hitCollecotr): # must return True | some value, return None | False will stop indexing.
 *                 return 0
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    /*try:*/ {

      /* "py_csft.pyx":590
 *         # should check this function when binding
 *         try:
 *             if self._pysource.gather(self._docInfo, self._hitCollecotr): # must return True | some value, return None | False will stop indexing.             # <<<<<<<<<<<<<<
 *                 return 0
 *             else:
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_pysource, __pyx_n_s_gather); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)__pyx_v_self->_docInfo));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->_docInfo));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->_docInfo));
      __Pyx_INCREF(((PyObject *)__pyx_v_self->_hitCollecotr));
      PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self->_hitCollecotr));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->_hitCollecotr));
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__pyx_t_8) {

        /* "py_csft.pyx":591
 *         try:
 *             if self._pysource.gather(self._docInfo, self._hitCollecotr): # must return True | some value, return None | False will stop indexing.
 *                 return 0             # <<<<<<<<<<<<<<
 *             else:
 *                 return 1
 */
        __pyx_r = 0;
        goto __pyx_L7_try_return;
      }
      /*else*/ {

        /* "py_csft.pyx":593
 *                 return 0
 *             else:
 *                 return 1             # <<<<<<<<<<<<<<
 *         except Exception, ex:
 *             traceback.print_exc()
 */
        __pyx_r = 1;
        goto __pyx_L7_try_return;
      }
    }
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "py_csft.pyx":594
 *             else:
 *                 return 1
 *         except Exception, ex:             # <<<<<<<<<<<<<<
 *             traceback.print_exc()
 *             return -1 # some error in python code.
 */
    __pyx_t_3 = PyErr_ExceptionMatches(__pyx_builtin_Exception);
    if (__pyx_t_3) {
      __Pyx_AddTraceback("py_csft.PySourceWrap.next", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_2, &__pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 594; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __pyx_v_ex = __pyx_t_2;

      /* "py_csft.pyx":595
 *                 return 1
 *         except Exception, ex:
 *             traceback.print_exc()             # <<<<<<<<<<<<<<
 *             return -1 # some error in python code.
 * 
 */
      __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_print_exc); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "py_csft.pyx":596
 *         except Exception, ex:
 *             traceback.print_exc()
 *             return -1 # some error in python code.             # <<<<<<<<<<<<<<
 * 
 *     cpdef int getKillList(self):
 */
      __pyx_r = -1;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_except_return;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    __pyx_L10_try_end:;
  }

  /* "py_csft.pyx":587
 *         return (0,0) # no such define
 * 
 *     cpdef int next(self):             # <<<<<<<<<<<<<<
 *         # should check this function when binding
 *         try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("py_csft.PySourceWrap.next", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ex);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_19next(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_19next(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("next (wrapper)", 0);
  __pyx_r = __pyx_pf_7py_csft_12PySourceWrap_18next(((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySourceWrap_18next(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("next", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->next(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySourceWrap.next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":598
 *             return -1 # some error in python code.
 * 
 *     cpdef int getKillList(self):             # <<<<<<<<<<<<<<
 *         # optinal call back.
 *         if attr_callable(self._pysource, 'getKillList'):
 */

static PyObject *__pyx_pw_7py_csft_12PySourceWrap_21getKillList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_7py_csft_12PySourceWrap_getKillList(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_klist = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ex = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getKillList", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getKillList); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_21getKillList)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "py_csft.pyx":600
 *     cpdef int getKillList(self):
 *         # optinal call back.
 *         if attr_callable(self._pysource, 'getKillList'):             # <<<<<<<<<<<<<<
 *             try:
 *                 klist = self._pysource.getKillList()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_attr_callable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->_pysource);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self->_pysource);
  __Pyx_GIVEREF(__pyx_v_self->_pysource);
  __Pyx_INCREF(__pyx_n_s_getKillList);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_getKillList);
  __Pyx_GIVEREF(__pyx_n_s_getKillList);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {

    /* "py_csft.pyx":601
 *         # optinal call back.
 *         if attr_callable(self._pysource, 'getKillList'):
 *             try:             # <<<<<<<<<<<<<<
 *                 klist = self._pysource.getKillList()
 *                 if klist or klist == None:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      /*try:*/ {

        /* "py_csft.pyx":602
 *         if attr_callable(self._pysource, 'getKillList'):
 *             try:
 *                 klist = self._pysource.getKillList()             # <<<<<<<<<<<<<<
 *                 if klist or klist == None:
 *                     self._killList = klist if klist else []
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_pysource, __pyx_n_s_getKillList); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 602; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 602; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_v_klist = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "py_csft.pyx":603
 *             try:
 *                 klist = self._pysource.getKillList()
 *                 if klist or klist == None:             # <<<<<<<<<<<<<<
 *                     self._killList = klist if klist else []
 *                     self._killListPos = 0
 */
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_klist); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        if (!__pyx_t_5) {
          __pyx_t_2 = PyObject_RichCompare(__pyx_v_klist, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_10 = __pyx_t_9;
        } else {
          __pyx_t_10 = __pyx_t_5;
        }
        if (__pyx_t_10) {

          /* "py_csft.pyx":604
 *                 klist = self._pysource.getKillList()
 *                 if klist or klist == None:
 *                     self._killList = klist if klist else []             # <<<<<<<<<<<<<<
 *                     self._killListPos = 0
 *                     return 0
 */
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_klist); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
          if (__pyx_t_10) {
            if (!(likely(PyList_CheckExact(__pyx_v_klist))||((__pyx_v_klist) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_klist)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            __Pyx_INCREF(__pyx_v_klist);
            __pyx_t_2 = __pyx_v_klist;
          } else {
            __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_2 = __pyx_t_4;
            __pyx_t_4 = 0;
          }
          __Pyx_GIVEREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_v_self->_killList);
          __Pyx_DECREF(__pyx_v_self->_killList);
          __pyx_v_self->_killList = ((PyObject*)__pyx_t_2);
          __pyx_t_2 = 0;

          /* "py_csft.pyx":605
 *                 if klist or klist == None:
 *                     self._killList = klist if klist else []
 *                     self._killListPos = 0             # <<<<<<<<<<<<<<
 *                     return 0
 *                 else:
 */
          __pyx_v_self->_killListPos = 0;

          /* "py_csft.pyx":606
 *                     self._killList = klist if klist else []
 *                     self._killListPos = 0
 *                     return 0             # <<<<<<<<<<<<<<
 *                 else:
 *                     return -2
 */
          __pyx_r = 0;
          goto __pyx_L8_try_return;
        }
        /*else*/ {

          /* "py_csft.pyx":608
 *                     return 0
 *                 else:
 *                     return -2             # <<<<<<<<<<<<<<
 *             except Exception, ex:
 *                 traceback.print_exc()
 */
          __pyx_r = -2;
          goto __pyx_L8_try_return;
        }
      }
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "py_csft.pyx":609
 *                 else:
 *                     return -2
 *             except Exception, ex:             # <<<<<<<<<<<<<<
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.
 */
      __pyx_t_3 = PyErr_ExceptionMatches(__pyx_builtin_Exception);
      if (__pyx_t_3) {
        __Pyx_AddTraceback("py_csft.PySourceWrap.getKillList", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_4, &__pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __pyx_v_ex = __pyx_t_4;

        /* "py_csft.pyx":610
 *                     return -2
 *             except Exception, ex:
 *                 traceback.print_exc()             # <<<<<<<<<<<<<<
 *                 return -1 # some error in python code.
 *         return 0 # no such define
 */
        __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_print_exc); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "py_csft.pyx":611
 *             except Exception, ex:
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.             # <<<<<<<<<<<<<<
 *         return 0 # no such define
 * 
 */
        __pyx_r = -1;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L7_except_return;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L0;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L0;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_L11_try_end:;
    }
  }

  /* "py_csft.pyx":612
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.
 *         return 0 # no such define             # <<<<<<<<<<<<<<
 * 
 *     cdef int getKillListItem(self, uint64_t* opDocID):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "py_csft.pyx":598
 *             return -1 # some error in python code.
 * 
 *     cpdef int getKillList(self):             # <<<<<<<<<<<<<<
 *         # optinal call back.
 *         if attr_callable(self._pysource, 'getKillList'):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("py_csft.PySourceWrap.getKillList", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_klist);
  __Pyx_XDECREF(__pyx_v_ex);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_21getKillList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7py_csft_12PySourceWrap_21getKillList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getKillList (wrapper)", 0);
  __pyx_r = __pyx_pf_7py_csft_12PySourceWrap_20getKillList(((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7py_csft_12PySourceWrap_20getKillList(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getKillList", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->getKillList(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("py_csft.PySourceWrap.getKillList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":614
 *         return 0 # no such define
 * 
 *     cdef int getKillListItem(self, uint64_t* opDocID):             # <<<<<<<<<<<<<<
 *         if self._killListPos >= len(self._killList):
 *             return -1
 */

static int __pyx_f_7py_csft_12PySourceWrap_getKillListItem(struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self, uint64_t *__pyx_v_opDocID) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  uint64_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getKillListItem", 0);

  /* "py_csft.pyx":615
 * 
 *     cdef int getKillListItem(self, uint64_t* opDocID):
 *         if self._killListPos >= len(self._killList):             # <<<<<<<<<<<<<<
 *             return -1
 * 
 */
  __pyx_t_1 = __pyx_v_self->_killList;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((__pyx_v_self->_killListPos >= __pyx_t_2) != 0);
  if (__pyx_t_3) {

    /* "py_csft.pyx":616
 *     cdef int getKillListItem(self, uint64_t* opDocID):
 *         if self._killListPos >= len(self._killList):
 *             return -1             # <<<<<<<<<<<<<<
 * 
 *         if opDocID:
 */
    __pyx_r = -1;
    goto __pyx_L0;
  }

  /* "py_csft.pyx":618
 *             return -1
 * 
 *         if opDocID:             # <<<<<<<<<<<<<<
 *             opDocID[0] = self._killList[self._killListPos]
 * 
 */
  __pyx_t_3 = (__pyx_v_opDocID != 0);
  if (__pyx_t_3) {

    /* "py_csft.pyx":619
 * 
 *         if opDocID:
 *             opDocID[0] = self._killList[self._killListPos]             # <<<<<<<<<<<<<<
 * 
 *         self._killListPos += 1
 */
    if (unlikely(__pyx_v_self->_killList == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->_killList, __pyx_v_self->_killListPos, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 619; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    (__pyx_v_opDocID[0]) = __pyx_t_4;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "py_csft.pyx":621
 *             opDocID[0] = self._killList[self._killListPos]
 * 
 *         self._killListPos += 1             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
  __pyx_v_self->_killListPos = (__pyx_v_self->_killListPos + 1);

  /* "py_csft.pyx":622
 * 
 *         self._killListPos += 1
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * """
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "py_csft.pyx":614
 *         return 0 # no such define
 * 
 *     cdef int getKillListItem(self, uint64_t* opDocID):             # <<<<<<<<<<<<<<
 *         if self._killListPos >= len(self._killList):
 *             return -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("py_csft.PySourceWrap.getKillListItem", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":634
 * ## --- python source ---
 * # ,    key -> value; key-> valuelist.
 * cdef public int py_source_setup(void *ptr, const CSphConfigSection & hSource):             # <<<<<<<<<<<<<<
 *     cdef const char* key
 *     cdef CSphStringList values
 */

int py_source_setup(void *__pyx_v_ptr, CSphConfigSection const &__pyx_v_hSource) {
  PyObject *__pyx_v_conf_dict = 0;
  struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_source_setup", 0);

  /* "py_csft.pyx":639
 *     cdef uint32_t value_count
 *     cdef dict conf_dict
 *     conf_dict = wrap_sphinx_config(hSource)             # <<<<<<<<<<<<<<
 *     # build helper object & feed data in it.
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 */
  __pyx_t_1 = __pyx_f_7py_csft_wrap_sphinx_config(__pyx_v_hSource); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_conf_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_csft.pyx":641
 *     conf_dict = wrap_sphinx_config(hSource)
 *     # build helper object & feed data in it.
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)             # <<<<<<<<<<<<<<
 *     # call wrap
 *     return self.setup(conf_dict)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_ptr);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_self = ((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_csft.pyx":643
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     # call wrap
 *     return self.setup(conf_dict)             # <<<<<<<<<<<<<<
 * 
 *     # temp usage for crc32 key ------->
 */
  __pyx_r = ((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->setup(__pyx_v_self, __pyx_v_conf_dict, 0);
  goto __pyx_L0;

  /* "py_csft.pyx":634
 * ## --- python source ---
 * # ,    key -> value; key-> valuelist.
 * cdef public int py_source_setup(void *ptr, const CSphConfigSection & hSource):             # <<<<<<<<<<<<<<
 *     cdef const char* key
 *     cdef CSphStringList values
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("py_csft.py_source_setup", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_conf_dict);
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":659
 * 
 * # - Connected
 * cdef public int py_source_connected(void *ptr, CSphSchema& Schema):             # <<<<<<<<<<<<<<
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     pySchema = PySchemaWrap()
 */

int py_source_connected(void *__pyx_v_ptr, CSphSchema &__pyx_v_Schema) {
  struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self = 0;
  struct __pyx_obj_7py_csft_PySchemaWrap *__pyx_v_pySchema = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_source_connected", 0);

  /* "py_csft.pyx":660
 * # - Connected
 * cdef public int py_source_connected(void *ptr, CSphSchema& Schema):
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)             # <<<<<<<<<<<<<<
 *     pySchema = PySchemaWrap()
 *     pySchema.bind(&Schema)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_ptr);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_self = ((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_csft.pyx":661
 * cdef public int py_source_connected(void *ptr, CSphSchema& Schema):
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     pySchema = PySchemaWrap()             # <<<<<<<<<<<<<<
 *     pySchema.bind(&Schema)
 *     return self.connect(pySchema)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7py_csft_PySchemaWrap)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pySchema = ((struct __pyx_obj_7py_csft_PySchemaWrap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_csft.pyx":662
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     pySchema = PySchemaWrap()
 *     pySchema.bind(&Schema)             # <<<<<<<<<<<<<<
 *     return self.connect(pySchema)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7py_csft_PySchemaWrap *)__pyx_v_pySchema->__pyx_vtab)->bind(__pyx_v_pySchema, (&__pyx_v_Schema)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "py_csft.pyx":663
 *     pySchema = PySchemaWrap()
 *     pySchema.bind(&Schema)
 *     return self.connect(pySchema)             # <<<<<<<<<<<<<<
 * 
 * # - OnIndexFinished
 */
  __pyx_r = ((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->connect(__pyx_v_self, ((PyObject *)__pyx_v_pySchema), 0);
  goto __pyx_L0;

  /* "py_csft.pyx":659
 * 
 * # - Connected
 * cdef public int py_source_connected(void *ptr, CSphSchema& Schema):             # <<<<<<<<<<<<<<
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     pySchema = PySchemaWrap()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("py_csft.py_source_connected", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_XDECREF((PyObject *)__pyx_v_pySchema);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":666
 * 
 * # - OnIndexFinished
 * cdef public int py_source_index_finished(void *ptr):             # <<<<<<<<<<<<<<
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.index_finished()
 */

int py_source_index_finished(void *__pyx_v_ptr) {
  struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_source_index_finished", 0);

  /* "py_csft.pyx":667
 * # - OnIndexFinished
 * cdef public int py_source_index_finished(void *ptr):
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)             # <<<<<<<<<<<<<<
 *     return self.index_finished()
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_ptr);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_self = ((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_csft.pyx":668
 * cdef public int py_source_index_finished(void *ptr):
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.index_finished()             # <<<<<<<<<<<<<<
 * 
 * # - OnBeforeIndex
 */
  __pyx_r = ((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->index_finished(__pyx_v_self, 0);
  goto __pyx_L0;

  /* "py_csft.pyx":666
 * 
 * # - OnIndexFinished
 * cdef public int py_source_index_finished(void *ptr):             # <<<<<<<<<<<<<<
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.index_finished()
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":671
 * 
 * # - OnBeforeIndex
 * cdef public int py_source_before_index(void *ptr):             # <<<<<<<<<<<<<<
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.beforeIndex()
 */

int py_source_before_index(void *__pyx_v_ptr) {
  struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_source_before_index", 0);

  /* "py_csft.pyx":672
 * # - OnBeforeIndex
 * cdef public int py_source_before_index(void *ptr):
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)             # <<<<<<<<<<<<<<
 *     return self.beforeIndex()
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_ptr);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_self = ((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_csft.pyx":673
 * cdef public int py_source_before_index(void *ptr):
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.beforeIndex()             # <<<<<<<<<<<<<<
 * 
 * # - GetDocField
 */
  __pyx_r = ((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->beforeIndex(__pyx_v_self, 0);
  goto __pyx_L0;

  /* "py_csft.pyx":671
 * 
 * # - OnBeforeIndex
 * cdef public int py_source_before_index(void *ptr):             # <<<<<<<<<<<<<<
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.beforeIndex()
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":676
 * 
 * # - GetDocField
 * cdef public int py_source_get_join_field(void *ptr, const char* fieldname):             # <<<<<<<<<<<<<<
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.getJoinField(fieldname)
 */

int py_source_get_join_field(void *__pyx_v_ptr, char const *__pyx_v_fieldname) {
  struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_source_get_join_field", 0);

  /* "py_csft.pyx":677
 * # - GetDocField
 * cdef public int py_source_get_join_field(void *ptr, const char* fieldname):
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)             # <<<<<<<<<<<<<<
 *     return self.getJoinField(fieldname)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_ptr);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_self = ((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_csft.pyx":678
 * cdef public int py_source_get_join_field(void *ptr, const char* fieldname):
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.getJoinField(fieldname)             # <<<<<<<<<<<<<<
 * 
 * # - GetMVAValue
 */
  __pyx_r = ((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->getJoinField(__pyx_v_self, __pyx_v_fieldname, 0);
  goto __pyx_L0;

  /* "py_csft.pyx":676
 * 
 * # - GetDocField
 * cdef public int py_source_get_join_field(void *ptr, const char* fieldname):             # <<<<<<<<<<<<<<
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.getJoinField(fieldname)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":681
 * 
 * # - GetMVAValue
 * cdef public int py_source_get_join_mva(void *ptr, const char* fieldname, uint64_t* opDocID, int64_t* opVal):             # <<<<<<<<<<<<<<
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     docid, v = self.getJoinMva(fieldname)
 */

int py_source_get_join_mva(void *__pyx_v_ptr, char const *__pyx_v_fieldname, uint64_t *__pyx_v_opDocID, int64_t *__pyx_v_opVal) {
  struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self = 0;
  PyObject *__pyx_v_docid = NULL;
  PyObject *__pyx_v_v = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  uint64_t __pyx_t_7;
  int64_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_source_get_join_mva", 0);

  /* "py_csft.pyx":682
 * # - GetMVAValue
 * cdef public int py_source_get_join_mva(void *ptr, const char* fieldname, uint64_t* opDocID, int64_t* opVal):
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)             # <<<<<<<<<<<<<<
 *     docid, v = self.getJoinMva(fieldname)
 *     if opDocID and opVal:
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_ptr);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_self = ((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_csft.pyx":683
 * cdef public int py_source_get_join_mva(void *ptr, const char* fieldname, uint64_t* opDocID, int64_t* opVal):
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     docid, v = self.getJoinMva(fieldname)             # <<<<<<<<<<<<<<
 *     if opDocID and opVal:
 *         opDocID[0] = docid
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->getJoinMva(__pyx_v_self, __pyx_v_fieldname, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_docid = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_v = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "py_csft.pyx":684
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     docid, v = self.getJoinMva(fieldname)
 *     if opDocID and opVal:             # <<<<<<<<<<<<<<
 *         opDocID[0] = docid
 *         opVal[0] = v
 */
  if ((__pyx_v_opDocID != 0)) {
    __pyx_t_6 = (__pyx_v_opVal != 0);
  } else {
    __pyx_t_6 = (__pyx_v_opDocID != 0);
  }
  if (__pyx_t_6) {

    /* "py_csft.pyx":685
 *     docid, v = self.getJoinMva(fieldname)
 *     if opDocID and opVal:
 *         opDocID[0] = docid             # <<<<<<<<<<<<<<
 *         opVal[0] = v
 *         return 0
 */
    __pyx_t_7 = __Pyx_PyInt_As_uint64_t(__pyx_v_docid); if (unlikely((__pyx_t_7 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_opDocID[0]) = __pyx_t_7;

    /* "py_csft.pyx":686
 *     if opDocID and opVal:
 *         opDocID[0] = docid
 *         opVal[0] = v             # <<<<<<<<<<<<<<
 *         return 0
 *     return -1;
 */
    __pyx_t_8 = __Pyx_PyInt_As_int64_t(__pyx_v_v); if (unlikely((__pyx_t_8 == (int64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_opVal[0]) = __pyx_t_8;

    /* "py_csft.pyx":687
 *         opDocID[0] = docid
 *         opVal[0] = v
 *         return 0             # <<<<<<<<<<<<<<
 *     return -1;
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "py_csft.pyx":688
 *         opVal[0] = v
 *         return 0
 *     return -1;             # <<<<<<<<<<<<<<
 * 
 * # - NextDocument
 */
  __pyx_r = -1;
  goto __pyx_L0;

  /* "py_csft.pyx":681
 * 
 * # - GetMVAValue
 * cdef public int py_source_get_join_mva(void *ptr, const char* fieldname, uint64_t* opDocID, int64_t* opVal):             # <<<<<<<<<<<<<<
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     docid, v = self.getJoinMva(fieldname)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("py_csft.py_source_get_join_mva", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_XDECREF(__pyx_v_docid);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":691
 * 
 * # - NextDocument
 * cdef public int py_source_next(void *ptr):             # <<<<<<<<<<<<<<
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.next()
 */

int py_source_next(void *__pyx_v_ptr) {
  struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_source_next", 0);

  /* "py_csft.pyx":692
 * # - NextDocument
 * cdef public int py_source_next(void *ptr):
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)             # <<<<<<<<<<<<<<
 *     return self.next()
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_ptr);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_self = ((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_csft.pyx":693
 * cdef public int py_source_next(void *ptr):
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.next()             # <<<<<<<<<<<<<<
 * 
 * # - OnAfterIndex
 */
  __pyx_r = ((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->next(__pyx_v_self, 0);
  goto __pyx_L0;

  /* "py_csft.pyx":691
 * 
 * # - NextDocument
 * cdef public int py_source_next(void *ptr):             # <<<<<<<<<<<<<<
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.next()
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":696
 * 
 * # - OnAfterIndex
 * cdef public int py_source_after_index(void *ptr, bool bNormalExit):             # <<<<<<<<<<<<<<
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.afterIndex(bNormalExit)
 */

int py_source_after_index(void *__pyx_v_ptr, bool __pyx_v_bNormalExit) {
  struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_source_after_index", 0);

  /* "py_csft.pyx":697
 * # - OnAfterIndex
 * cdef public int py_source_after_index(void *ptr, bool bNormalExit):
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)             # <<<<<<<<<<<<<<
 *     return self.afterIndex(bNormalExit)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_ptr);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_self = ((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_csft.pyx":698
 * cdef public int py_source_after_index(void *ptr, bool bNormalExit):
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.afterIndex(bNormalExit)             # <<<<<<<<<<<<<<
 * 
 * # - GetKillList
 */
  __pyx_r = ((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->afterIndex(__pyx_v_self, __pyx_v_bNormalExit, 0);
  goto __pyx_L0;

  /* "py_csft.pyx":696
 * 
 * # - OnAfterIndex
 * cdef public int py_source_after_index(void *ptr, bool bNormalExit):             # <<<<<<<<<<<<<<
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.afterIndex(bNormalExit)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":701
 * 
 * # - GetKillList
 * cdef public int py_source_get_kill_list(void *ptr):             # <<<<<<<<<<<<<<
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.getKillList()
 */

int py_source_get_kill_list(void *__pyx_v_ptr) {
  struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_source_get_kill_list", 0);

  /* "py_csft.pyx":702
 * # - GetKillList
 * cdef public int py_source_get_kill_list(void *ptr):
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)             # <<<<<<<<<<<<<<
 *     return self.getKillList()
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_ptr);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_self = ((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_csft.pyx":703
 * cdef public int py_source_get_kill_list(void *ptr):
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.getKillList()             # <<<<<<<<<<<<<<
 * 
 * cdef public int py_source_get_kill_list_item(void *ptr, uint64_t* opDocID):
 */
  __pyx_r = ((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->getKillList(__pyx_v_self, 0);
  goto __pyx_L0;

  /* "py_csft.pyx":701
 * 
 * # - GetKillList
 * cdef public int py_source_get_kill_list(void *ptr):             # <<<<<<<<<<<<<<
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.getKillList()
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":705
 *     return self.getKillList()
 * 
 * cdef public int py_source_get_kill_list_item(void *ptr, uint64_t* opDocID):             # <<<<<<<<<<<<<<
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.getKillListItem(opDocID)
 */

int py_source_get_kill_list_item(void *__pyx_v_ptr, uint64_t *__pyx_v_opDocID) {
  struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_self = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("py_source_get_kill_list_item", 0);

  /* "py_csft.pyx":706
 * 
 * cdef public int py_source_get_kill_list_item(void *ptr, uint64_t* opDocID):
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)             # <<<<<<<<<<<<<<
 *     return self.getKillListItem(opDocID)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_ptr);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_self = ((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_csft.pyx":707
 * cdef public int py_source_get_kill_list_item(void *ptr, uint64_t* opDocID):
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.getKillListItem(opDocID)             # <<<<<<<<<<<<<<
 * 
 * # - [Removed] GetFieldOrder ->  buildSchema
 */
  __pyx_r = ((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_self->__pyx_vtab)->getKillListItem(__pyx_v_self, __pyx_v_opDocID);
  goto __pyx_L0;

  /* "py_csft.pyx":705
 *     return self.getKillList()
 * 
 * cdef public int py_source_get_kill_list_item(void *ptr, uint64_t* opDocID):             # <<<<<<<<<<<<<<
 *     cdef PySourceWrap self = <PySourceWrap>(ptr)
 *     return self.getKillListItem(opDocID)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":717
 * """
 * # ,    key -> value; key-> valuelist.
 * cdef dict wrap_sphinx_config(const CSphConfigSection & hSource):             # <<<<<<<<<<<<<<
 *     cdef const char* key
 *     cdef CSphStringList values
 */

static PyObject *__pyx_f_7py_csft_wrap_sphinx_config(CSphConfigSection const &__pyx_v_hSource) {
  char const *__pyx_v_key;
  CSphStringList __pyx_v_values;
  uint32_t __pyx_v_value_count;
  PyObject *__pyx_v_conf_items = NULL;
  PyObject *__pyx_v_v = NULL;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  long __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("wrap_sphinx_config", 0);

  /* "py_csft.pyx":722
 *     cdef uint32_t value_count
 * 
 *     conf_items = {}             # <<<<<<<<<<<<<<
 *     hSource.IterateStart()
 *     while hSource.IterateNext():
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_conf_items = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "py_csft.pyx":723
 * 
 *     conf_items = {}
 *     hSource.IterateStart()             # <<<<<<<<<<<<<<
 *     while hSource.IterateNext():
 *         values.Reset()
 */
  __pyx_v_hSource.IterateStart();

  /* "py_csft.pyx":724
 *     conf_items = {}
 *     hSource.IterateStart()
 *     while hSource.IterateNext():             # <<<<<<<<<<<<<<
 *         values.Reset()
 *         key = hSource.IterateGetKey().cstr()
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_hSource.IterateNext() != 0);
    if (!__pyx_t_2) break;

    /* "py_csft.pyx":725
 *     hSource.IterateStart()
 *     while hSource.IterateNext():
 *         values.Reset()             # <<<<<<<<<<<<<<
 *         key = hSource.IterateGetKey().cstr()
 *         value_count = getConfigValues(hSource, key, values)
 */
    __pyx_v_values.Reset();

    /* "py_csft.pyx":726
 *     while hSource.IterateNext():
 *         values.Reset()
 *         key = hSource.IterateGetKey().cstr()             # <<<<<<<<<<<<<<
 *         value_count = getConfigValues(hSource, key, values)
 * 
 */
    __pyx_v_key = __pyx_v_hSource.IterateGetKey().cstr();

    /* "py_csft.pyx":727
 *         values.Reset()
 *         key = hSource.IterateGetKey().cstr()
 *         value_count = getConfigValues(hSource, key, values)             # <<<<<<<<<<<<<<
 * 
 *         if value_count == 1:
 */
    __pyx_v_value_count = getConfigValues(__pyx_v_hSource, __pyx_v_key, __pyx_v_values);

    /* "py_csft.pyx":729
 *         value_count = getConfigValues(hSource, key, values)
 * 
 *         if value_count == 1:             # <<<<<<<<<<<<<<
 *             conf_items[key] = values[0].cstr()
 *             continue
 */
    __pyx_t_2 = ((__pyx_v_value_count == 1) != 0);
    if (__pyx_t_2) {

      /* "py_csft.pyx":730
 * 
 *         if value_count == 1:
 *             conf_items[key] = values[0].cstr()             # <<<<<<<<<<<<<<
 *             continue
 *         v = []
 */
      __pyx_t_1 = __Pyx_PyBytes_FromString((__pyx_v_values[0]).cstr()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_key); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(PyDict_SetItem(__pyx_v_conf_items, __pyx_t_3, __pyx_t_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "py_csft.pyx":731
 *         if value_count == 1:
 *             conf_items[key] = values[0].cstr()
 *             continue             # <<<<<<<<<<<<<<
 *         v = []
 *         for i in range(0, values.GetLength()):
 */
      goto __pyx_L3_continue;
    }

    /* "py_csft.pyx":732
 *             conf_items[key] = values[0].cstr()
 *             continue
 *         v = []             # <<<<<<<<<<<<<<
 *         for i in range(0, values.GetLength()):
 *             v.append( values[i].cstr() )
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 732; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_v, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "py_csft.pyx":733
 *             continue
 *         v = []
 *         for i in range(0, values.GetLength()):             # <<<<<<<<<<<<<<
 *             v.append( values[i].cstr() )
 *         conf_items[key] = v
 */
    __pyx_t_4 = __pyx_v_values.GetLength();
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "py_csft.pyx":734
 *         v = []
 *         for i in range(0, values.GetLength()):
 *             v.append( values[i].cstr() )             # <<<<<<<<<<<<<<
 *         conf_items[key] = v
 * 
 */
      __pyx_t_1 = __Pyx_PyBytes_FromString((__pyx_v_values[__pyx_v_i]).cstr()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_v, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "py_csft.pyx":735
 *         for i in range(0, values.GetLength()):
 *             v.append( values[i].cstr() )
 *         conf_items[key] = v             # <<<<<<<<<<<<<<
 * 
 *     # call wrap
 */
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_key); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_conf_items, __pyx_t_1, __pyx_v_v) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_L3_continue:;
  }

  /* "py_csft.pyx":738
 * 
 *     # call wrap
 *     return conf_items             # <<<<<<<<<<<<<<
 * 
 * ## --- python source ---
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_conf_items);
  __pyx_r = __pyx_v_conf_items;
  goto __pyx_L0;

  /* "py_csft.pyx":717
 * """
 * # ,    key -> value; key-> valuelist.
 * cdef dict wrap_sphinx_config(const CSphConfigSection & hSource):             # <<<<<<<<<<<<<<
 *     cdef const char* key
 *     cdef CSphStringList values
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("py_csft.wrap_sphinx_config", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_conf_items);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_csft.pyx":742
 * ## --- python source ---
 * # pass source config infomation.
 * cdef public api CSphSource * createPythonDataSourceObject ( const char* sName, const char * class_name ):             # <<<<<<<<<<<<<<
 *     cdef CSphSource_Python2* pySource
 *     sName = class_name
 */

CSphSource *createPythonDataSourceObject(char const *__pyx_v_sName, char const *__pyx_v_class_name) {
  CSphSource_Python2 *__pyx_v_pySource;
  PyObject *__pyx_v_clsType = NULL;
  PyObject *__pyx_v_obj = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_ex = NULL;
  struct __pyx_obj_7py_csft_PySourceWrap *__pyx_v_wrap = NULL;
  CSphSource *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createPythonDataSourceObject", 0);

  /* "py_csft.pyx":744
 * cdef public api CSphSource * createPythonDataSourceObject ( const char* sName, const char * class_name ):
 *     cdef CSphSource_Python2* pySource
 *     sName = class_name             # <<<<<<<<<<<<<<
 *     clsType = __findPythonClass(sName)
 *     #print "hhhhh\n", clsType
 */
  __pyx_v_sName = __pyx_v_class_name;

  /* "py_csft.pyx":745
 *     cdef CSphSource_Python2* pySource
 *     sName = class_name
 *     clsType = __findPythonClass(sName)             # <<<<<<<<<<<<<<
 *     #print "hhhhh\n", clsType
 *     if clsType:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_findPythonClass); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_sName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_clsType = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "py_csft.pyx":747
 *     clsType = __findPythonClass(sName)
 *     #print "hhhhh\n", clsType
 *     if clsType:             # <<<<<<<<<<<<<<
 *         # Do error report @user code.
 *         try:
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_clsType); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "py_csft.pyx":749
 *     if clsType:
 *         # Do error report @user code.
 *         try:             # <<<<<<<<<<<<<<
 *             obj = clsType()
 *         except Exception, ex:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "py_csft.pyx":750
 *         # Do error report @user code.
 *         try:
 *             obj = clsType()             # <<<<<<<<<<<<<<
 *         except Exception, ex:
 *             traceback.print_exc()
 */
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_v_clsType, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_v_obj = __pyx_t_2;
        __pyx_t_2 = 0;
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "py_csft.pyx":751
 *         try:
 *             obj = clsType()
 *         except Exception, ex:             # <<<<<<<<<<<<<<
 *             traceback.print_exc()
 *             return NULL
 */
      __pyx_t_8 = PyErr_ExceptionMatches(__pyx_builtin_Exception);
      if (__pyx_t_8) {
        __Pyx_AddTraceback("py_csft.createPythonDataSourceObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_3, &__pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_v_ex = __pyx_t_3;

        /* "py_csft.pyx":752
 *             obj = clsType()
 *         except Exception, ex:
 *             traceback.print_exc()             # <<<<<<<<<<<<<<
 *             return NULL
 * 
 */
        __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_print_exc); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "py_csft.pyx":753
 *         except Exception, ex:
 *             traceback.print_exc()
 *             return NULL             # <<<<<<<<<<<<<<
 * 
 *         wrap = PySourceWrap(obj)
 */
        __pyx_r = NULL;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L7_except_return;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L0;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      __pyx_L11_try_end:;
    }

    /* "py_csft.pyx":755
 *             return NULL
 * 
 *         wrap = PySourceWrap(obj)             # <<<<<<<<<<<<<<
 *         #Py_INCREF(wrap) # pass pyobjct* to cpp code should addref ( @ the cpp code. )
 * 
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_obj);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_obj);
    __Pyx_GIVEREF(__pyx_v_obj);
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7py_csft_PySourceWrap)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_wrap = ((struct __pyx_obj_7py_csft_PySourceWrap *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "py_csft.pyx":758
 *         #Py_INCREF(wrap) # pass pyobjct* to cpp code should addref ( @ the cpp code. )
 * 
 *         pySource = new CSphSource_Python2(sName, <cpy_ref.PyObject*>wrap)             # <<<<<<<<<<<<<<
 *         # FIXME: crash when new failure.
 *         wrap.bindSource(pySource);
 */
    __pyx_v_pySource = new CSphSource_Python2(__pyx_v_sName, ((PyObject *)__pyx_v_wrap));

    /* "py_csft.pyx":760
 *         pySource = new CSphSource_Python2(sName, <cpy_ref.PyObject*>wrap)
 *         # FIXME: crash when new failure.
 *         wrap.bindSource(pySource);             # <<<<<<<<<<<<<<
 *         return <CSphSource*>pySource
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_7py_csft_PySourceWrap *)__pyx_v_wrap->__pyx_vtab)->bindSource(__pyx_v_wrap, __pyx_v_pySource); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "py_csft.pyx":761
 *         # FIXME: crash when new failure.
 *         wrap.bindSource(pySource);
 *         return <CSphSource*>pySource             # <<<<<<<<<<<<<<
 *     else:
 *         return NULL
 */
    __pyx_r = ((CSphSource *)__pyx_v_pySource);
    goto __pyx_L0;
  }
  /*else*/ {

    /* "py_csft.pyx":763
 *         return <CSphSource*>pySource
 *     else:
 *         return NULL             # <<<<<<<<<<<<<<
 * 
 * #end of file
 */
    __pyx_r = NULL;
    goto __pyx_L0;
  }

  /* "py_csft.pyx":742
 * ## --- python source ---
 * # pass source config infomation.
 * cdef public api CSphSource * createPythonDataSourceObject ( const char* sName, const char * class_name ):             # <<<<<<<<<<<<<<
 *     cdef CSphSource_Python2* pySource
 *     sName = class_name
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("py_csft.createPythonDataSourceObject", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_clsType);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_ex);
  __Pyx_XDECREF((PyObject *)__pyx_v_wrap);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7py_csft_PySchemaWrap __pyx_vtable_7py_csft_PySchemaWrap;

static PyObject *__pyx_tp_new_7py_csft_PySchemaWrap(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7py_csft_PySchemaWrap *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7py_csft_PySchemaWrap *)o);
  p->__pyx_vtab = __pyx_vtabptr_7py_csft_PySchemaWrap;
  p->_valid_attribute_type = Py_None; Py_INCREF(Py_None);
  p->_join_fields = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7py_csft_12PySchemaWrap_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7py_csft_PySchemaWrap(PyObject *o) {
  struct __pyx_obj_7py_csft_PySchemaWrap *p = (struct __pyx_obj_7py_csft_PySchemaWrap *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_valid_attribute_type);
  Py_CLEAR(p->_join_fields);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7py_csft_PySchemaWrap(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7py_csft_PySchemaWrap *p = (struct __pyx_obj_7py_csft_PySchemaWrap *)o;
  if (p->_valid_attribute_type) {
    e = (*v)(p->_valid_attribute_type, a); if (e) return e;
  }
  if (p->_join_fields) {
    e = (*v)(p->_join_fields, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7py_csft_PySchemaWrap(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7py_csft_PySchemaWrap *p = (struct __pyx_obj_7py_csft_PySchemaWrap *)o;
  tmp = ((PyObject*)p->_valid_attribute_type);
  p->_valid_attribute_type = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_join_fields);
  p->_join_fields = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7py_csft_PySchemaWrap[] = {
  {__Pyx_NAMESTR("done"), (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_3done, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("addAttribute"), (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_5addAttribute, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7py_csft_12PySchemaWrap_4addAttribute)},
  {__Pyx_NAMESTR("addField"), (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_7addField, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7py_csft_12PySchemaWrap_6addField)},
  {__Pyx_NAMESTR("fieldsBaseCount"), (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_9fieldsBaseCount, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("fieldsCount"), (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_11fieldsCount, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("attributeCount"), (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_13attributeCount, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("fieldsInfo"), (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_15fieldsInfo, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("attributeInfo"), (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_17attributeInfo, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getFieldIndex"), (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_19getFieldIndex, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getAttributeIndex"), (PyCFunction)__pyx_pw_7py_csft_12PySchemaWrap_21getAttributeIndex, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7py_csft_PySchemaWrap = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("py_csft.PySchemaWrap"), /*tp_name*/
  sizeof(struct __pyx_obj_7py_csft_PySchemaWrap), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7py_csft_PySchemaWrap, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n        \347\224\250\344\272\216\345\220\221 Python \347\253\257 \346\217\220\344\276\233\346\223\215\344\275\234 Schema \347\232\204\346\216\245\345\217\243\n    "), /*tp_doc*/
  __pyx_tp_traverse_7py_csft_PySchemaWrap, /*tp_traverse*/
  __pyx_tp_clear_7py_csft_PySchemaWrap, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7py_csft_PySchemaWrap, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7py_csft_PySchemaWrap, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7py_csft_PyDocInfo __pyx_vtable_7py_csft_PyDocInfo;

static PyObject *__pyx_tp_new_7py_csft_PyDocInfo(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7py_csft_PyDocInfo *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7py_csft_PyDocInfo *)o);
  p->__pyx_vtab = __pyx_vtabptr_7py_csft_PyDocInfo;
  new((void*)&(p->_docInfo)) PySphMatch();
  return o;
}

static void __pyx_tp_dealloc_7py_csft_PyDocInfo(PyObject *o) {
  struct __pyx_obj_7py_csft_PyDocInfo *p = (struct __pyx_obj_7py_csft_PyDocInfo *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(&p->_docInfo);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7py_csft_PyDocInfo[] = {
  {__Pyx_NAMESTR("setDocID"), (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_1setDocID, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getDocID"), (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_3getDocID, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setAttr"), (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_5setAttr, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setAttrFloat"), (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_7setAttrFloat, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setAttrInt64"), (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_9setAttrInt64, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setAttrTimestamp"), (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_11setAttrTimestamp, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setAttrMulti"), (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_13setAttrMulti, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setAttrString"), (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_15setAttrString, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setField"), (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_17setField, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getLastDocID"), (PyCFunction)__pyx_pw_7py_csft_9PyDocInfo_19getLastDocID, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7py_csft_PyDocInfo = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("py_csft.PyDocInfo"), /*tp_name*/
  sizeof(struct __pyx_obj_7py_csft_PyDocInfo), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7py_csft_PyDocInfo, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n        \344\276\233 Python \347\250\213\345\272\217 \350\256\276\347\275\256 \345\276\205\346\243\200\347\264\242\346\226\207\346\241\243\347\232\204\345\261\236\346\200\247 \345\222\214 \345\205\250\346\226\207\346\243\200\347\264\242\345\255\227\346\256\265\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7py_csft_PyDocInfo, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7py_csft_PyDocInfo, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7py_csft_PyHitCollector __pyx_vtable_7py_csft_PyHitCollector;

static PyObject *__pyx_tp_new_7py_csft_PyHitCollector(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7py_csft_PyHitCollector *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7py_csft_PyHitCollector *)o);
  p->__pyx_vtab = __pyx_vtabptr_7py_csft_PyHitCollector;
  return o;
}

static void __pyx_tp_dealloc_7py_csft_PyHitCollector(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7py_csft_PyHitCollector[] = {
  {__Pyx_NAMESTR("getPrevDocID"), (PyCFunction)__pyx_pw_7py_csft_14PyHitCollector_1getPrevDocID, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getDocID"), (PyCFunction)__pyx_pw_7py_csft_14PyHitCollector_3getDocID, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7py_csft_PyHitCollector = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("py_csft.PyHitCollector"), /*tp_name*/
  sizeof(struct __pyx_obj_7py_csft_PyHitCollector), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7py_csft_PyHitCollector, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n        \344\270\272 Python \347\250\213\345\272\217\346\217\220\344\276\233\345\234\250\347\264\242\345\274\225\345\273\272\347\253\213\351\230\266\346\256\265\344\275\277\347\224\250 \347\232\204 Hit \351\207\207\351\233\206\346\216\245\345\217\243, \345\217\257\344\273\245\346\211\213\345\267\245\350\256\276\347\275\256 FieldIndex\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7py_csft_PyHitCollector, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7py_csft_PyHitCollector, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7py_csft_PySourceWrap __pyx_vtable_7py_csft_PySourceWrap;

static PyObject *__pyx_tp_new_7py_csft_PySourceWrap(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7py_csft_PySourceWrap *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7py_csft_PySourceWrap *)o);
  p->__pyx_vtab = __pyx_vtabptr_7py_csft_PySourceWrap;
  p->_pysource = Py_None; Py_INCREF(Py_None);
  p->_docInfo = ((struct __pyx_obj_7py_csft_PyDocInfo *)Py_None); Py_INCREF(Py_None);
  p->_hitCollecotr = ((struct __pyx_obj_7py_csft_PyHitCollector *)Py_None); Py_INCREF(Py_None);
  p->_killList = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7py_csft_PySourceWrap(PyObject *o) {
  struct __pyx_obj_7py_csft_PySourceWrap *p = (struct __pyx_obj_7py_csft_PySourceWrap *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_pysource);
  Py_CLEAR(p->_docInfo);
  Py_CLEAR(p->_hitCollecotr);
  Py_CLEAR(p->_killList);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7py_csft_PySourceWrap(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7py_csft_PySourceWrap *p = (struct __pyx_obj_7py_csft_PySourceWrap *)o;
  if (p->_pysource) {
    e = (*v)(p->_pysource, a); if (e) return e;
  }
  if (p->_docInfo) {
    e = (*v)(((PyObject*)p->_docInfo), a); if (e) return e;
  }
  if (p->_hitCollecotr) {
    e = (*v)(((PyObject*)p->_hitCollecotr), a); if (e) return e;
  }
  if (p->_killList) {
    e = (*v)(p->_killList, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7py_csft_PySourceWrap(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7py_csft_PySourceWrap *p = (struct __pyx_obj_7py_csft_PySourceWrap *)o;
  tmp = ((PyObject*)p->_pysource);
  p->_pysource = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_docInfo);
  p->_docInfo = ((struct __pyx_obj_7py_csft_PyDocInfo *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_hitCollecotr);
  p->_hitCollecotr = ((struct __pyx_obj_7py_csft_PyHitCollector *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_killList);
  p->_killList = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7py_csft_PySourceWrap[] = {
  {__Pyx_NAMESTR("setup"), (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_3setup, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("connect"), (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_5connect, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("indexFinished"), (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_7indexFinished, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("beforeIndex"), (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_9beforeIndex, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("afterIndex"), (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_11afterIndex, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("index_finished"), (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_13index_finished, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getJoinField"), (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_15getJoinField, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getJoinMva"), (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_17getJoinMva, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("next"), (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_19next, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getKillList"), (PyCFunction)__pyx_pw_7py_csft_12PySourceWrap_21getKillList, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7py_csft_PySourceWrap = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("py_csft.PySourceWrap"), /*tp_name*/
  sizeof(struct __pyx_obj_7py_csft_PySourceWrap), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7py_csft_PySourceWrap, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n        C++ -> Python \347\232\204\346\241\245; \351\242\235\345\244\226\346\217\220\344\276\233\n          - DocInfo \350\256\251 Python \344\277\256\346\224\271 Document \347\232\204\345\261\236\346\200\247\344\277\241\346\201\257\n          - HitCollector \350\256\251 Python \345\217\257\344\273\245\344\270\273\345\212\250\346\216\250\351\200\201\347\264\242\345\274\225\n    "), /*tp_doc*/
  __pyx_tp_traverse_7py_csft_PySourceWrap, /*tp_traverse*/
  __pyx_tp_clear_7py_csft_PySourceWrap, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7py_csft_PySourceWrap, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7py_csft_12PySourceWrap_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7py_csft_PySourceWrap, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("py_csft"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_n_s_AttributeError, __pyx_k_AttributeError, sizeof(__pyx_k_AttributeError), 0, 0, 1, 1},
  {&__pyx_n_s_Exception, __pyx_k_Exception, sizeof(__pyx_k_Exception), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_n_s_InvalidAttributeType, __pyx_k_InvalidAttributeType, sizeof(__pyx_k_InvalidAttributeType), 0, 0, 1, 1},
  {&__pyx_kp_s_Users_nzinfo_coreseek_sphinxsea, __pyx_k_Users_nzinfo_coreseek_sphinxsea, sizeof(__pyx_k_Users_nzinfo_coreseek_sphinxsea), 0, 0, 1, 0},
  {&__pyx_kp_s_WARNING_PySource_s_is_defined_b, __pyx_k_WARNING_PySource_s_is_defined_b, sizeof(__pyx_k_WARNING_PySource_s_is_defined_b), 0, 0, 1, 0},
  {&__pyx_n_s_abspath, __pyx_k_abspath, sizeof(__pyx_k_abspath), 0, 0, 1, 1},
  {&__pyx_n_s_addAttribute, __pyx_k_addAttribute, sizeof(__pyx_k_addAttribute), 0, 0, 1, 1},
  {&__pyx_n_s_addField, __pyx_k_addField, sizeof(__pyx_k_addField), 0, 0, 1, 1},
  {&__pyx_n_s_afterIndex, __pyx_k_afterIndex, sizeof(__pyx_k_afterIndex), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_attr_callable, __pyx_k_attr_callable, sizeof(__pyx_k_attr_callable), 0, 0, 1, 1},
  {&__pyx_n_s_attr_name, __pyx_k_attr_name, sizeof(__pyx_k_attr_name), 0, 0, 1, 1},
  {&__pyx_n_s_attributeCount, __pyx_k_attributeCount, sizeof(__pyx_k_attributeCount), 0, 0, 1, 1},
  {&__pyx_n_s_attributeInfo, __pyx_k_attributeInfo, sizeof(__pyx_k_attributeInfo), 0, 0, 1, 1},
  {&__pyx_n_s_bIsSet, __pyx_k_bIsSet, sizeof(__pyx_k_bIsSet), 0, 0, 1, 1},
  {&__pyx_n_s_bJoin, __pyx_k_bJoin, sizeof(__pyx_k_bJoin), 0, 0, 1, 1},
  {&__pyx_n_s_bValue64, __pyx_k_bValue64, sizeof(__pyx_k_bValue64), 0, 0, 1, 1},
  {&__pyx_n_s_beforeIndex, __pyx_k_beforeIndex, sizeof(__pyx_k_beforeIndex), 0, 0, 1, 1},
  {&__pyx_n_s_bit, __pyx_k_bit, sizeof(__pyx_k_bit), 0, 0, 1, 1},
  {&__pyx_n_s_boolean, __pyx_k_boolean, sizeof(__pyx_k_boolean), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_cName, __pyx_k_cName, sizeof(__pyx_k_cName), 0, 0, 1, 1},
  {&__pyx_n_s_connect, __pyx_k_connect, sizeof(__pyx_k_connect), 0, 0, 1, 1},
  {&__pyx_n_s_dVal, __pyx_k_dVal, sizeof(__pyx_k_dVal), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_done, __pyx_k_done, sizeof(__pyx_k_done), 0, 0, 1, 1},
  {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_ex, __pyx_k_ex, sizeof(__pyx_k_ex), 0, 0, 1, 1},
  {&__pyx_n_s_field, __pyx_k_field, sizeof(__pyx_k_field), 0, 0, 1, 1},
  {&__pyx_n_s_fieldsBaseCount, __pyx_k_fieldsBaseCount, sizeof(__pyx_k_fieldsBaseCount), 0, 0, 1, 1},
  {&__pyx_n_s_fieldsCount, __pyx_k_fieldsCount, sizeof(__pyx_k_fieldsCount), 0, 0, 1, 1},
  {&__pyx_n_s_fieldsInfo, __pyx_k_fieldsInfo, sizeof(__pyx_k_fieldsInfo), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_find, __pyx_k_find, sizeof(__pyx_k_find), 0, 0, 1, 1},
  {&__pyx_n_s_findPythonClass, __pyx_k_findPythonClass, sizeof(__pyx_k_findPythonClass), 0, 0, 1, 1},
  {&__pyx_n_s_float, __pyx_k_float, sizeof(__pyx_k_float), 0, 0, 1, 1},
  {&__pyx_n_s_func, __pyx_k_func, sizeof(__pyx_k_func), 0, 0, 1, 1},
  {&__pyx_n_s_gather, __pyx_k_gather, sizeof(__pyx_k_gather), 0, 0, 1, 1},
  {&__pyx_n_s_gatherJoinField, __pyx_k_gatherJoinField, sizeof(__pyx_k_gatherJoinField), 0, 0, 1, 1},
  {&__pyx_n_s_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 0, 1, 1},
  {&__pyx_n_s_getAttributeIndex, __pyx_k_getAttributeIndex, sizeof(__pyx_k_getAttributeIndex), 0, 0, 1, 1},
  {&__pyx_n_s_getDocID, __pyx_k_getDocID, sizeof(__pyx_k_getDocID), 0, 0, 1, 1},
  {&__pyx_n_s_getFieldIndex, __pyx_k_getFieldIndex, sizeof(__pyx_k_getFieldIndex), 0, 0, 1, 1},
  {&__pyx_n_s_getJoinField, __pyx_k_getJoinField, sizeof(__pyx_k_getJoinField), 0, 0, 1, 1},
  {&__pyx_n_s_getJoinMva, __pyx_k_getJoinMva, sizeof(__pyx_k_getJoinMva), 0, 0, 1, 1},
  {&__pyx_n_s_getKillList, __pyx_k_getKillList, sizeof(__pyx_k_getKillList), 0, 0, 1, 1},
  {&__pyx_n_s_getLastDocID, __pyx_k_getLastDocID, sizeof(__pyx_k_getLastDocID), 0, 0, 1, 1},
  {&__pyx_n_s_getMultiValueAttribute, __pyx_k_getMultiValueAttribute, sizeof(__pyx_k_getMultiValueAttribute), 0, 0, 1, 1},
  {&__pyx_n_s_getPrevDocID, __pyx_k_getPrevDocID, sizeof(__pyx_k_getPrevDocID), 0, 0, 1, 1},
  {&__pyx_n_s_iBitSize, __pyx_k_iBitSize, sizeof(__pyx_k_iBitSize), 0, 0, 1, 1},
  {&__pyx_n_s_iIndex, __pyx_k_iIndex, sizeof(__pyx_k_iIndex), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_import_module, __pyx_k_import_module, sizeof(__pyx_k_import_module), 0, 0, 1, 1},
  {&__pyx_n_s_importlib, __pyx_k_importlib, sizeof(__pyx_k_importlib), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_indexFinished, __pyx_k_indexFinished, sizeof(__pyx_k_indexFinished), 0, 0, 1, 1},
  {&__pyx_n_s_index_finished, __pyx_k_index_finished, sizeof(__pyx_k_index_finished), 0, 0, 1, 1},
  {&__pyx_n_s_integer, __pyx_k_integer, sizeof(__pyx_k_integer), 0, 0, 1, 1},
  {&__pyx_n_s_json, __pyx_k_json, sizeof(__pyx_k_json), 0, 0, 1, 1},
  {&__pyx_n_s_long, __pyx_k_long, sizeof(__pyx_k_long), 0, 0, 1, 1},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_module_name, __pyx_k_module_name, sizeof(__pyx_k_module_name), 0, 0, 1, 1},
  {&__pyx_n_s_mva32, __pyx_k_mva32, sizeof(__pyx_k_mva32), 0, 0, 1, 1},
  {&__pyx_n_s_mva64, __pyx_k_mva64, sizeof(__pyx_k_mva64), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_next, __pyx_k_next, sizeof(__pyx_k_next), 0, 0, 1, 1},
  {&__pyx_n_s_none, __pyx_k_none, sizeof(__pyx_k_none), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_poly2d, __pyx_k_poly2d, sizeof(__pyx_k_poly2d), 0, 0, 1, 1},
  {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_print_exc, __pyx_k_print_exc, sizeof(__pyx_k_print_exc), 0, 0, 1, 1},
  {&__pyx_n_s_py_csft, __pyx_k_py_csft, sizeof(__pyx_k_py_csft), 0, 0, 1, 1},
  {&__pyx_n_s_pysrc, __pyx_k_pysrc, sizeof(__pyx_k_pysrc), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_sName, __pyx_k_sName, sizeof(__pyx_k_sName), 0, 0, 1, 1},
  {&__pyx_n_s_sType, __pyx_k_sType, sizeof(__pyx_k_sType), 0, 0, 1, 1},
  {&__pyx_n_s_sVal, __pyx_k_sVal, sizeof(__pyx_k_sVal), 0, 0, 1, 1},
  {&__pyx_n_s_setAttr, __pyx_k_setAttr, sizeof(__pyx_k_setAttr), 0, 0, 1, 1},
  {&__pyx_n_s_setAttrFloat, __pyx_k_setAttrFloat, sizeof(__pyx_k_setAttrFloat), 0, 0, 1, 1},
  {&__pyx_n_s_setAttrInt64, __pyx_k_setAttrInt64, sizeof(__pyx_k_setAttrInt64), 0, 0, 1, 1},
  {&__pyx_n_s_setAttrMulti, __pyx_k_setAttrMulti, sizeof(__pyx_k_setAttrMulti), 0, 0, 1, 1},
  {&__pyx_n_s_setAttrString, __pyx_k_setAttrString, sizeof(__pyx_k_setAttrString), 0, 0, 1, 1},
  {&__pyx_n_s_setAttrTimestamp, __pyx_k_setAttrTimestamp, sizeof(__pyx_k_setAttrTimestamp), 0, 0, 1, 1},
  {&__pyx_n_s_setDocID, __pyx_k_setDocID, sizeof(__pyx_k_setDocID), 0, 0, 1, 1},
  {&__pyx_n_s_setField, __pyx_k_setField, sizeof(__pyx_k_setField), 0, 0, 1, 1},
  {&__pyx_n_s_setup, __pyx_k_setup, sizeof(__pyx_k_setup), 0, 0, 1, 1},
  {&__pyx_n_s_string, __pyx_k_string, sizeof(__pyx_k_string), 0, 0, 1, 1},
  {&__pyx_n_s_stringPtr, __pyx_k_stringPtr, sizeof(__pyx_k_stringPtr), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_timestamp, __pyx_k_timestamp, sizeof(__pyx_k_timestamp), 0, 0, 1, 1},
  {&__pyx_n_s_tokencount, __pyx_k_tokencount, sizeof(__pyx_k_tokencount), 0, 0, 1, 1},
  {&__pyx_n_s_traceback, __pyx_k_traceback, sizeof(__pyx_k_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {&__pyx_n_s_unknown, __pyx_k_unknown, sizeof(__pyx_k_unknown), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_Exception = __Pyx_GetBuiltinName(__pyx_n_s_Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_AttributeError = __Pyx_GetBuiltinName(__pyx_n_s_AttributeError); if (!__pyx_builtin_AttributeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "py_csft.pyx":33
 * def __findPythonClass(sName):
 *     import importlib
 *     pos = sName.find('.')             # <<<<<<<<<<<<<<
 *     module_name = sName[:pos]
 *     cName = sName[pos+1:]
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "py_csft.pyx":290
 *         if sType not in self._valid_attribute_type:
 *             raise InvalidAttributeType()
 *         if sType == str("field"):             # <<<<<<<<<<<<<<
 *             raise InvalidAttributeType() # used addField plz.
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_n_s_field); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "py_csft.pyx":581
 *                     return ret
 *                 else:
 *                     return (0, 0)             # <<<<<<<<<<<<<<
 *             except Exception, ex:
 *                 traceback.print_exc()
 */
  __pyx_tuple__4 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "py_csft.pyx":585
 *                 traceback.print_exc()
 *                 return -1 # some error in python code.
 *         return (0,0) # no such define             # <<<<<<<<<<<<<<
 * 
 *     cpdef int next(self):
 */
  __pyx_tuple__5 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "py_csft.pyx":31
 * 
 * # Ref: http://stackoverflow.com/questions/1176136/convert-string-to-python-class-object
 * def __findPythonClass(sName):             # <<<<<<<<<<<<<<
 *     import importlib
 *     pos = sName.find('.')
 */
  __pyx_tuple__6 = PyTuple_Pack(8, __pyx_n_s_sName, __pyx_n_s_importlib, __pyx_n_s_pos, __pyx_n_s_module_name, __pyx_n_s_cName, __pyx_n_s_m, __pyx_n_s_c, __pyx_n_s_e); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(1, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__6, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_nzinfo_coreseek_sphinxsea, __pyx_n_s_findPythonClass, 31, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "py_csft.pyx":213
 * 
 * ## --- python source ---
 * def attr_callable(obj, attr_name):             # <<<<<<<<<<<<<<
 *     try:
 *         func = getattr(obj, attr_name)
 */
  __pyx_tuple__8 = PyTuple_Pack(4, __pyx_n_s_obj, __pyx_n_s_attr_name, __pyx_n_s_func, __pyx_n_s_ex); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_nzinfo_coreseek_sphinxsea, __pyx_n_s_attr_callable, 213, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initpy_csft(void); /*proto*/
PyMODINIT_FUNC initpy_csft(void)
#else
PyMODINIT_FUNC PyInit_py_csft(void); /*proto*/
PyMODINIT_FUNC PyInit_py_csft(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_py_csft(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("py_csft"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_py_csft) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "py_csft")) {
      if (unlikely(PyDict_SetItemString(modules, "py_csft", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("__setPythonPath", (void (*)(void))__setPythonPath, "void (char const *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("__getPythonClassByName", (void (*)(void))__getPythonClassByName, "PyObject *(char const *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("createPythonDataSourceObject", (void (*)(void))createPythonDataSourceObject, "CSphSource *(char const *, char const *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Type init code ---*/
  __pyx_vtabptr_7py_csft_PySchemaWrap = &__pyx_vtable_7py_csft_PySchemaWrap;
  __pyx_vtable_7py_csft_PySchemaWrap.sphColumnInfoTypeToString = (PyObject *(*)(struct __pyx_obj_7py_csft_PySchemaWrap *, CSphColumnInfo &))__pyx_f_7py_csft_12PySchemaWrap_sphColumnInfoTypeToString;
  __pyx_vtable_7py_csft_PySchemaWrap.bind = (PyObject *(*)(struct __pyx_obj_7py_csft_PySchemaWrap *, CSphSchema *))__pyx_f_7py_csft_12PySchemaWrap_bind;
  __pyx_vtable_7py_csft_PySchemaWrap.done = (PyObject *(*)(struct __pyx_obj_7py_csft_PySchemaWrap *, int __pyx_skip_dispatch))__pyx_f_7py_csft_12PySchemaWrap_done;
  __pyx_vtable_7py_csft_PySchemaWrap.addAttribute = (int (*)(struct __pyx_obj_7py_csft_PySchemaWrap *, char const *, char const *, int __pyx_skip_dispatch, struct __pyx_opt_args_7py_csft_12PySchemaWrap_addAttribute *__pyx_optional_args))__pyx_f_7py_csft_12PySchemaWrap_addAttribute;
  __pyx_vtable_7py_csft_PySchemaWrap.addField = (PyObject *(*)(struct __pyx_obj_7py_csft_PySchemaWrap *, char const *, int __pyx_skip_dispatch, struct __pyx_opt_args_7py_csft_12PySchemaWrap_addField *__pyx_optional_args))__pyx_f_7py_csft_12PySchemaWrap_addField;
  __pyx_vtable_7py_csft_PySchemaWrap.fieldsBaseCount = (int (*)(struct __pyx_obj_7py_csft_PySchemaWrap *, int __pyx_skip_dispatch))__pyx_f_7py_csft_12PySchemaWrap_fieldsBaseCount;
  __pyx_vtable_7py_csft_PySchemaWrap.fieldsCount = (int (*)(struct __pyx_obj_7py_csft_PySchemaWrap *, int __pyx_skip_dispatch))__pyx_f_7py_csft_12PySchemaWrap_fieldsCount;
  __pyx_vtable_7py_csft_PySchemaWrap.attributeCount = (int (*)(struct __pyx_obj_7py_csft_PySchemaWrap *, int __pyx_skip_dispatch))__pyx_f_7py_csft_12PySchemaWrap_attributeCount;
  __pyx_vtable_7py_csft_PySchemaWrap.fieldsInfo = (PyObject *(*)(struct __pyx_obj_7py_csft_PySchemaWrap *, int, int __pyx_skip_dispatch))__pyx_f_7py_csft_12PySchemaWrap_fieldsInfo;
  __pyx_vtable_7py_csft_PySchemaWrap.attributeInfo = (PyObject *(*)(struct __pyx_obj_7py_csft_PySchemaWrap *, int, int __pyx_skip_dispatch))__pyx_f_7py_csft_12PySchemaWrap_attributeInfo;
  __pyx_vtable_7py_csft_PySchemaWrap.getFieldIndex = (int (*)(struct __pyx_obj_7py_csft_PySchemaWrap *, char const *, int __pyx_skip_dispatch))__pyx_f_7py_csft_12PySchemaWrap_getFieldIndex;
  __pyx_vtable_7py_csft_PySchemaWrap.getAttributeIndex = (int (*)(struct __pyx_obj_7py_csft_PySchemaWrap *, char const *, int __pyx_skip_dispatch))__pyx_f_7py_csft_12PySchemaWrap_getAttributeIndex;
  if (PyType_Ready(&__pyx_type_7py_csft_PySchemaWrap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7py_csft_PySchemaWrap.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7py_csft_PySchemaWrap.tp_dict, __pyx_vtabptr_7py_csft_PySchemaWrap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PySchemaWrap", (PyObject *)&__pyx_type_7py_csft_PySchemaWrap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7py_csft_PySchemaWrap = &__pyx_type_7py_csft_PySchemaWrap;
  __pyx_vtabptr_7py_csft_PyDocInfo = &__pyx_vtable_7py_csft_PyDocInfo;
  __pyx_vtable_7py_csft_PyDocInfo.bind = (void (*)(struct __pyx_obj_7py_csft_PyDocInfo *, CSphSource_Python2 *, CSphMatch *))__pyx_f_7py_csft_9PyDocInfo_bind;
  __pyx_vtable_7py_csft_PyDocInfo.setDocID = (PyObject *(*)(struct __pyx_obj_7py_csft_PyDocInfo *, uint64_t, int __pyx_skip_dispatch))__pyx_f_7py_csft_9PyDocInfo_setDocID;
  __pyx_vtable_7py_csft_PyDocInfo.getDocID = (uint64_t (*)(struct __pyx_obj_7py_csft_PyDocInfo *, int __pyx_skip_dispatch))__pyx_f_7py_csft_9PyDocInfo_getDocID;
  __pyx_vtable_7py_csft_PyDocInfo.setAttr = (int (*)(struct __pyx_obj_7py_csft_PyDocInfo *, int, SphAttr_t, int __pyx_skip_dispatch))__pyx_f_7py_csft_9PyDocInfo_setAttr;
  __pyx_vtable_7py_csft_PyDocInfo.setAttrFloat = (int (*)(struct __pyx_obj_7py_csft_PyDocInfo *, int, float, int __pyx_skip_dispatch))__pyx_f_7py_csft_9PyDocInfo_setAttrFloat;
  __pyx_vtable_7py_csft_PyDocInfo.setAttrInt64 = (int (*)(struct __pyx_obj_7py_csft_PyDocInfo *, int, int64_t, int __pyx_skip_dispatch))__pyx_f_7py_csft_9PyDocInfo_setAttrInt64;
  __pyx_vtable_7py_csft_PyDocInfo.setAttrTimestamp = (int (*)(struct __pyx_obj_7py_csft_PyDocInfo *, int, int64_t, int __pyx_skip_dispatch))__pyx_f_7py_csft_9PyDocInfo_setAttrTimestamp;
  __pyx_vtable_7py_csft_PyDocInfo.setAttrMulti = (int (*)(struct __pyx_obj_7py_csft_PyDocInfo *, int, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_7py_csft_9PyDocInfo_setAttrMulti *__pyx_optional_args))__pyx_f_7py_csft_9PyDocInfo_setAttrMulti;
  __pyx_vtable_7py_csft_PyDocInfo.setAttrString = (int (*)(struct __pyx_obj_7py_csft_PyDocInfo *, int, char const *, int __pyx_skip_dispatch))__pyx_f_7py_csft_9PyDocInfo_setAttrString;
  __pyx_vtable_7py_csft_PyDocInfo.setField = (int (*)(struct __pyx_obj_7py_csft_PyDocInfo *, int, char const *, int __pyx_skip_dispatch))__pyx_f_7py_csft_9PyDocInfo_setField;
  __pyx_vtable_7py_csft_PyDocInfo.getLastDocID = (uint64_t (*)(struct __pyx_obj_7py_csft_PyDocInfo *, int __pyx_skip_dispatch))__pyx_f_7py_csft_9PyDocInfo_getLastDocID;
  if (PyType_Ready(&__pyx_type_7py_csft_PyDocInfo) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7py_csft_PyDocInfo.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7py_csft_PyDocInfo.tp_dict, __pyx_vtabptr_7py_csft_PyDocInfo) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyDocInfo", (PyObject *)&__pyx_type_7py_csft_PyDocInfo) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7py_csft_PyDocInfo = &__pyx_type_7py_csft_PyDocInfo;
  __pyx_vtabptr_7py_csft_PyHitCollector = &__pyx_vtable_7py_csft_PyHitCollector;
  __pyx_vtable_7py_csft_PyHitCollector.bind = (void (*)(struct __pyx_obj_7py_csft_PyHitCollector *, ISphHits *))__pyx_f_7py_csft_14PyHitCollector_bind;
  __pyx_vtable_7py_csft_PyHitCollector.getPrevDocID = (uint64_t (*)(struct __pyx_obj_7py_csft_PyHitCollector *, int __pyx_skip_dispatch))__pyx_f_7py_csft_14PyHitCollector_getPrevDocID;
  __pyx_vtable_7py_csft_PyHitCollector.getDocID = (uint64_t (*)(struct __pyx_obj_7py_csft_PyHitCollector *, int __pyx_skip_dispatch))__pyx_f_7py_csft_14PyHitCollector_getDocID;
  if (PyType_Ready(&__pyx_type_7py_csft_PyHitCollector) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7py_csft_PyHitCollector.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7py_csft_PyHitCollector.tp_dict, __pyx_vtabptr_7py_csft_PyHitCollector) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyHitCollector", (PyObject *)&__pyx_type_7py_csft_PyHitCollector) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7py_csft_PyHitCollector = &__pyx_type_7py_csft_PyHitCollector;
  __pyx_vtabptr_7py_csft_PySourceWrap = &__pyx_vtable_7py_csft_PySourceWrap;
  __pyx_vtable_7py_csft_PySourceWrap.bindSource = (PyObject *(*)(struct __pyx_obj_7py_csft_PySourceWrap *, CSphSource_Python2 *))__pyx_f_7py_csft_12PySourceWrap_bindSource;
  __pyx_vtable_7py_csft_PySourceWrap.setup = (int (*)(struct __pyx_obj_7py_csft_PySourceWrap *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7py_csft_12PySourceWrap_setup;
  __pyx_vtable_7py_csft_PySourceWrap.connect = (int (*)(struct __pyx_obj_7py_csft_PySourceWrap *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7py_csft_12PySourceWrap_connect;
  __pyx_vtable_7py_csft_PySourceWrap.indexFinished = (int (*)(struct __pyx_obj_7py_csft_PySourceWrap *, int __pyx_skip_dispatch))__pyx_f_7py_csft_12PySourceWrap_indexFinished;
  __pyx_vtable_7py_csft_PySourceWrap.beforeIndex = (int (*)(struct __pyx_obj_7py_csft_PySourceWrap *, int __pyx_skip_dispatch))__pyx_f_7py_csft_12PySourceWrap_beforeIndex;
  __pyx_vtable_7py_csft_PySourceWrap.afterIndex = (int (*)(struct __pyx_obj_7py_csft_PySourceWrap *, bool, int __pyx_skip_dispatch))__pyx_f_7py_csft_12PySourceWrap_afterIndex;
  __pyx_vtable_7py_csft_PySourceWrap.index_finished = (int (*)(struct __pyx_obj_7py_csft_PySourceWrap *, int __pyx_skip_dispatch))__pyx_f_7py_csft_12PySourceWrap_index_finished;
  __pyx_vtable_7py_csft_PySourceWrap.getJoinField = (int (*)(struct __pyx_obj_7py_csft_PySourceWrap *, char const *, int __pyx_skip_dispatch))__pyx_f_7py_csft_12PySourceWrap_getJoinField;
  __pyx_vtable_7py_csft_PySourceWrap.getJoinMva = (PyObject *(*)(struct __pyx_obj_7py_csft_PySourceWrap *, char const *, int __pyx_skip_dispatch))__pyx_f_7py_csft_12PySourceWrap_getJoinMva;
  __pyx_vtable_7py_csft_PySourceWrap.next = (int (*)(struct __pyx_obj_7py_csft_PySourceWrap *, int __pyx_skip_dispatch))__pyx_f_7py_csft_12PySourceWrap_next;
  __pyx_vtable_7py_csft_PySourceWrap.getKillList = (int (*)(struct __pyx_obj_7py_csft_PySourceWrap *, int __pyx_skip_dispatch))__pyx_f_7py_csft_12PySourceWrap_getKillList;
  __pyx_vtable_7py_csft_PySourceWrap.getKillListItem = (int (*)(struct __pyx_obj_7py_csft_PySourceWrap *, uint64_t *))__pyx_f_7py_csft_12PySourceWrap_getKillListItem;
  if (PyType_Ready(&__pyx_type_7py_csft_PySourceWrap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7py_csft_PySourceWrap.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7py_csft_PySourceWrap.tp_dict, __pyx_vtabptr_7py_csft_PySourceWrap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PySourceWrap", (PyObject *)&__pyx_type_7py_csft_PySourceWrap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7py_csft_PySourceWrap = &__pyx_type_7py_csft_PySourceWrap;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "py_csft.pyx":8
 * from cpython.exc cimport PyErr_Fetch, PyErr_Restore
 * 
 * import os             # <<<<<<<<<<<<<<
 * from libcpp cimport bool
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "py_csft.pyx":16
 * from libcpp.vector cimport vector
 * 
 * import traceback             # <<<<<<<<<<<<<<
 * 
 * """
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_traceback, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_traceback, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "py_csft.pyx":28
 * 
 * #test gc
 * import gc             # <<<<<<<<<<<<<<
 * 
 * # Ref: http://stackoverflow.com/questions/1176136/convert-string-to-python-class-object
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_gc, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gc, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "py_csft.pyx":31
 * 
 * # Ref: http://stackoverflow.com/questions/1176136/convert-string-to-python-class-object
 * def __findPythonClass(sName):             # <<<<<<<<<<<<<<
 *     import importlib
 *     pos = sName.find('.')
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7py_csft_1__findPythonClass, NULL, __pyx_n_s_py_csft); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_findPythonClass, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "py_csft.pyx":213
 * 
 * ## --- python source ---
 * def attr_callable(obj, attr_name):             # <<<<<<<<<<<<<<
 *     try:
 *         func = getattr(obj, attr_name)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7py_csft_3attr_callable, NULL, __pyx_n_s_py_csft); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_attr_callable, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "py_csft.pyx":224
 *     return False
 * 
 * class InvalidAttributeType(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_builtin_Exception);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_Exception);
  __Pyx_GIVEREF(__pyx_builtin_Exception);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_InvalidAttributeType, __pyx_n_s_InvalidAttributeType, (PyObject *) NULL, __pyx_n_s_py_csft, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_InvalidAttributeType, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_InvalidAttributeType, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "py_csft.pyx":1
 * # -*- coding: UTF-8 -*-             # <<<<<<<<<<<<<<
 * 
 * cimport py_csft
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    __Pyx_AddTraceback("init py_csft", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init py_csft");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
#endif
    result = (*call)(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    Py_LeaveRecursiveCall();
#endif
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (PyErr_ExceptionMatches(PyExc_OverflowError))
                    PyErr_Clear();
                else
                    goto bad;
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_COMPILING_IN_CPYTHON
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_COMPILING_IN_CPYTHON
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (result) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
        if (PyInstance_Check(type)) {
            type = (PyObject*) ((PyInstanceObject*)type)->in_class;
            Py_INCREF(type);
        } else {
            type = 0;
            PyErr_SetString(PyExc_TypeError,
                "raise: exception must be an old-style class or instance");
            goto raise_error;
        }
        #else
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func)             \
    {                                                                     \
        func_type value = func(x);                                        \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                PyErr_SetString(PyExc_OverflowError,                      \
                    (is_unsigned && unlikely(value < zero)) ?             \
                    "can't convert negative value to " #target_type :     \
                    "value too large to convert to " #target_type);       \
                return (target_type) -1;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(int) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong)
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
    const uint64_t neg_one = (uint64_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to uint64_t");
                return (uint64_t) -1;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(uint64_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (uint64_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to uint64_t");
                return (uint64_t) -1;
            }
            if (sizeof(uint64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(uint64_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(uint64_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(uint64_t) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(uint64_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(uint64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(uint64_t, long, PyLong_AsLong)
            } else if (sizeof(uint64_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(uint64_t, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
    const int64_t neg_one = (int64_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int64_t");
                return (int64_t) -1;
            }
            return (int64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int64_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (int64_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int64_t");
                return (int64_t) -1;
            }
            if (sizeof(int64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(int64_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int64_t, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int64_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(int64_t) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(int64_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(int64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int64_t, long, PyLong_AsLong)
            } else if (sizeof(int64_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int64_t, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int64_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int64_t) -1;
        }
    } else {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else /* Python 3 has a print function */
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else /* Python 3 has a print function */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
    const uint64_t neg_one = (uint64_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
    const int64_t neg_one = (int64_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong)
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
#if !CYTHON_COMPILING_IN_PYPY
#if PY_VERSION_HEX >= 0x02060000
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
  #if PY_VERSION_HEX < 0x02060000
    return PyInt_AsSsize_t(b);
  #else
    return PyLong_AsSsize_t(b);
  #endif
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}


#endif /* Py_PYTHON_H */
